<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SocialStack.Api</name>
    </assembly>
    <members>
        <member name="T:Api.AutoForms.AutoFormCache">
            <summary>
            A cache for a particular type of autoform.
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormCache.populate">
            <summary>
            Called when populating the cache.
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormCache._roleService">
            <summary>
            The role service.
            </summary>
        </member>
        <member name="M:Api.AutoForms.AutoFormCache.#ctor(System.Func{Api.Contexts.Context,System.Collections.Generic.Dictionary{System.String,Api.AutoForms.AutoFormInfo},System.Threading.Tasks.ValueTask},Api.Permissions.RoleService)">
            <summary>
            Creates a new empty cache with the given population function.
            </summary>
            <param name="onPopulate"></param>
            <param name="roleService"></param>
        </member>
        <member name="M:Api.AutoForms.AutoFormCache.Clear">
            <summary>
            Clears this cache.
            </summary>
        </member>
        <member name="M:Api.AutoForms.AutoFormCache.GetForRole(Api.Contexts.Context)">
            <summary>
            Gets role specific autoform fields.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Api.AutoForms.AutoFormController">
            <summary>
            Handles an endpoint which describes available endpoints. It's at the root of the API.
            </summary>
        </member>
        <member name="M:Api.AutoForms.AutoFormController.#ctor(Api.AutoForms.AutoFormService)">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="M:Api.AutoForms.AutoFormController.Get(System.String,System.String)">
            <summary>
            Gets the autoform info for a particular form by type and name. Type is usually content, component or config.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.AutoForms.AutoFormController.AllContentForms">
            <summary>
            GET /v1/autoform
            Returns meta about all content autoforms in this API.
            </summary>
        </member>
        <member name="T:Api.AutoForms.AutoFormFieldMap">
            <summary>
            Handles JSON input for autoform supporting endpoints.
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormFieldMap.BuiltMaps">
            <summary>
            The already generated field maps.
            </summary>
        </member>
        <member name="M:Api.AutoForms.AutoFormFieldMap.Get(System.Type)">
            <summary>
            Gets or generates the field map for the given AutoForm type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="F:Api.AutoForms.AutoFormFieldMap.FieldPairs">
            <summary>
            All the field pairs in this map. This is never null.
            </summary>
        </member>
        <member name="T:Api.AutoForms.AutoFormFieldPair">
            <summary>
            A pairing of source/ target fields.
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormFieldPair.Name">
            <summary>
            The field name.
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormFieldPair.Source">
            <summary>
            The field in the input model.
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormFieldPair.Target">
            <summary>
            The field in the object being built up.
            </summary>
        </member>
        <member name="T:Api.AutoForms.AutoFormInfo">
            <summary>
            Defines a particular autoform - the endpoint it occurs at and the fields it has.
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormInfo.SupportsRevisions">
            <summary>
            True if it supports revisions.
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormInfo.Endpoint">
            <summary>
            The endpoint that this autoform is for.
            e.g. "v1/forumreply"
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormInfo.Fields">
            <summary>
            The fields in the form.
            </summary>
        </member>
        <member name="T:Api.AutoForms.AutoFormField">
            <summary>
            Follows the same JSON structure as canvas. module maps directly to a component, data to props.
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormField.Includable">
            <summary>
            True if this is a virtual list field and needs to be included if you want its value.
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormField.ValueType">
            <summary>
            The fields value type.
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormField.Module">
            <summary>
            The component to use.
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormField.Order">
            <summary>
            The fields order
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormField.Data">
            <summary>
            Props for the module.
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormField.Tokeniseable">
            <summary>
            Can this field be represented by tokens?
            </summary>
        </member>
        <member name="T:Api.AutoForms.AutoFormService">
            <summary>
            This service drives AutoForm - the form which automatically displays fields in the admin area.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.AutoForms.AutoFormService.#ctor(Api.Permissions.RoleService)">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormService._caches">
            <summary>
            The underlying caches
            </summary>
        </member>
        <member name="M:Api.AutoForms.AutoFormService.RegisterCustomFormType(System.String,System.Func{Api.Contexts.Context,System.Collections.Generic.Dictionary{System.String,Api.AutoForms.AutoFormInfo},System.Threading.Tasks.ValueTask})">
            <summary>
            Registers a custom AutoForm type.
            </summary>
            <param name="typeName"></param>
            <param name="populate"></param>
        </member>
        <member name="M:Api.AutoForms.AutoFormService.Get(Api.Contexts.Context,System.String,System.String)">
            <summary>
            Gets autoform info for a particular type.
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.AutoForms.AutoFormService.AllContentTypes">
            <summary>
            Enumerates all the content types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.AutoForms.AutoFormService.PopulateContentCache(Api.Contexts.Context,System.Collections.Generic.Dictionary{System.String,Api.AutoForms.AutoFormInfo})">
            <summary>
            Populate the given cache for the given context.
            </summary>
            <param name="context"></param>
            <param name="cache"></param>
        </member>
        <member name="M:Api.AutoForms.AutoFormService.AllContentForms(Api.Contexts.Context)">
            <summary>
            List of autoform info for the given role.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.AutoForms.AutoFormService.GetFormInfo(Api.Startup.JsonStructure)">
            <summary>
            Gets the AutoForm info such as fields available for the given :AutoForm type.
            </summary>
            <param name="jsonStructure"></param>
            <returns></returns>
        </member>
        <member name="M:Api.AutoForms.AutoFormService.BuildFieldInfo(Api.Startup.JsonField)">
            <summary>
            Converts a Json field into an AutoForm field.
            </summary>
            <param name="jsonField"></param>
            <returns></returns>
        </member>
        <member name="M:Api.AutoForms.AutoFormService.SpaceCamelCase(System.String)">
            <summary>
            Adds spaces to a CamelCase string (so it becomes "Camel Case")
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Api.AutoForms.AutoFormService.FirstCharacterToLower(System.String)">
            <summary>
            Lowercases the first character of the given string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Api.AutoForms.AutoFormStructure">
            <summary>
            Defines what autoforms are available from this API.
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormStructure.Forms">
            <summary>
            The forms in this API.
            </summary>
        </member>
        <member name="F:Api.AutoForms.AutoFormStructure.ContentTypes">
            <summary>
            The content types in this API.
            </summary>
        </member>
        <member name="T:Api.AutoForms.ContentType">
            <summary>
            A particular type of content available through this API.
            </summary>
        </member>
        <member name="F:Api.AutoForms.ContentType.Id">
            <summary>
            The ID of the content type.
            There's a fixed function to generate these IDs - you don't actually need to hit the API to establish what the ID is.
            See also: Api.Database.ContentTypes.GetId
            </summary>
        </member>
        <member name="F:Api.AutoForms.ContentType.Name">
            <summary>
            The name of the content type as-is, e.g. "ForumReply".
            </summary>
        </member>
        <member name="T:Api.AutoForms.DataAttribute">
            <summary>
            Use this to define a prop value for your UI module. [Data("placeholder", "Enter a name here")]
            It's the same structure as canvas JSON.
            </summary>
        </member>
        <member name="F:Api.AutoForms.DataAttribute.Name">
            <summary>
            The prop name.
            </summary>
        </member>
        <member name="F:Api.AutoForms.DataAttribute.Value">
            <summary>
            The value to use. Typically strings and numbers.
            </summary>
        </member>
        <member name="T:Api.AutoForms.DontCopyAttribute">
            <summary>
            Use this on fields either the endpoint model or the target model to block autoform from copying it automatically.
            Essentially this declares the field is definitely going to be mapped with custom handling in your form event.
            </summary>
        </member>
        <member name="T:Api.AutoForms.Init">
            <summary>
            Instances event handlers during the very earliest phases of startup.
            </summary>
        </member>
        <member name="M:Api.AutoForms.Init.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="T:Api.AutoForms.ModuleAttribute">
            <summary>
            Use this to define a custom UI module to use when rendering this field. E.g. [Module("UI/TagInput")]
            It's the same structure as canvas JSON.
            </summary>
        </member>
        <member name="F:Api.AutoForms.ModuleAttribute.Name">
            <summary>
            The name of the module. E.g. "UI/TagInput".
            </summary>
        </member>
        <member name="F:Api.AutoForms.ModuleAttribute.Hide">
            <summary>
            True if this should be completely hidden.
            </summary>
        </member>
        <member name="T:Api.AutoForms.OrderAttribute">
            <summary>
            Use this to define a fields order when rendering the field inside an autofrom.
            </summary>
        </member>
        <member name="F:Api.AutoForms.OrderAttribute.Order">
            <summary>
            The order of this field in the auto form.
            </summary>
        </member>
        <member name="T:Api.Automations.AutomationController">
            <summary>
            Handles an endpoint which describes available automations.
            </summary>
        </member>
        <member name="M:Api.Automations.AutomationController.#ctor(Api.Automations.AutomationService)">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="M:Api.Automations.AutomationController.Get">
            <summary>
            GET /v1/automation/list
            Returns meta about automations available from this API. Includes endpoints and content types.
            </summary>
        </member>
        <member name="M:Api.Automations.AutomationController.Execute(System.String)">
            <summary>
            GET /v1/automation/{name}/run
            Runs the named automation and waits for it to complete.
            </summary>
        </member>
        <member name="T:Api.Automations.AutomationRunInfo">
            <summary>
            Information about this trigger of an automation.
            </summary>
        </member>
        <member name="F:Api.Automations.AutomationRunInfo.Cron">
            <summary>
            The cron expression this run info is scheduled on.
            </summary>
        </member>
        <member name="F:Api.Automations.AutomationRunInfo.Scheduled">
            <summary>
            True if this runInfo has been added to the scheduler.
            </summary>
        </member>
        <member name="F:Api.Automations.AutomationRunInfo.CronExpression">
            <summary>
            The parsed cron expression.
            </summary>
        </member>
        <member name="F:Api.Automations.AutomationRunInfo.After">
            <summary>
            The automation to run after this one.
            </summary>
        </member>
        <member name="F:Api.Automations.AutomationRunInfo.Name">
            <summary>
            The lowercased name of this run info.
            </summary>
        </member>
        <member name="F:Api.Automations.AutomationRunInfo.Context">
            <summary>
            The context the automation uses.
            </summary>
        </member>
        <member name="F:Api.Automations.AutomationRunInfo.Events">
            <summary>
            The set of event handlers on this run info.
            </summary>
        </member>
        <member name="F:Api.Automations.AutomationRunInfo.NextRunTicks">
            <summary>
            The next time this automation will run at (in ticks).
            </summary>
        </member>
        <member name="M:Api.Automations.AutomationRunInfo.UpdateNextTicks">
            <summary>
            Updates the next time this runs.
            </summary>
        </member>
        <member name="P:Api.Automations.AutomationRunInfo.LastTrigger">
            <summary>
            Last trigger time.
            </summary>
        </member>
        <member name="M:Api.Automations.AutomationRunInfo.Trigger">
            <summary>
            Triggers the automation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Automations.AutomationService">
            <summary>
            Indicates the set of available automations.
            </summary>
        </member>
        <member name="M:Api.Automations.AutomationService.#ctor(Api.Pages.PageService,Api.NavMenus.AdminNavMenuItemService)">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Automations.AutomationService.GetStructure(Api.Contexts.Context)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Automations.AutomationStructure">
            <summary>
            Defines what automations are available from this API
            </summary>
        </member>
        <member name="P:Api.Automations.AutomationStructure.Results">
            <summary>
            The automations in this API.
            </summary>
        </member>
        <member name="T:Api.Automations.Automation">
            <summary>
            Information about a particular automation.
            </summary>
        </member>
        <member name="F:Api.Automations.Automation.Name">
            <summary>
            The name of the automation.
            </summary>
        </member>
        <member name="F:Api.Automations.Automation.CronDescription">
            <summary>
            The description of the automations cron.
            </summary>
        </member>
        <member name="F:Api.Automations.Automation.Cron">
            <summary>
            The cron schedule for the automation.
            </summary>
        </member>
        <member name="P:Api.Automations.Automation.LastTrigger">
            <summary>
            Last trigger time
            </summary>
        </member>
        <member name="M:Api.Automations.Automation.#ctor(Api.Automations.AutomationRunInfo)">
            <summary>
            Creates an automation description object for the given run info.
            </summary>
            <param name="runInfo"></param>
        </member>
        <member name="T:Api.Automations.CronExpression">
            <summary>
            Provides a parser and evaluator for unix-like cron expressions always in UTC. Cron
            expressions provide the ability to specify complex time combinations such as
            &quot;At 8:00am every Monday through Friday&quot; or &quot;At 1:30am every
            last Friday of the month&quot;.
            </summary>
            <remarks>
            <para>
            Cron expressions are comprised of 6 required fields and one optional field
            separated by white space. The fields respectively are described as follows:
            </para>
            <table cellspacing="8">
            <tr>
            <th align="left">Field Name</th>
            <th align="left"> </th>
            <th align="left">Allowed Values</th>
            <th align="left"> </th>
            <th align="left">Allowed Special Characters</th>
            </tr>
            <tr>
            <td align="left">Seconds</td>
            <td align="left"> </td>
            <td align="left">0-59</td>
            <td align="left"> </td>
            <td align="left">, - /// /</td>
            </tr>
            <tr>
            <td align="left">Minutes</td>
            <td align="left"> </td>
            <td align="left">0-59</td>
            <td align="left"> </td>
            <td align="left">, - /// /</td>
            </tr>
            <tr>
            <td align="left">Hours</td>
            <td align="left"> </td>
            <td align="left">0-23</td>
            <td align="left"> </td>
            <td align="left">, - /// /</td>
            </tr>
            <tr>
            <td align="left">Day-of-month</td>
            <td align="left"> </td>
            <td align="left">1-31</td>
            <td align="left"> </td>
            <td align="left">, - /// ? / L W C</td>
            </tr>
            <tr>
            <td align="left">Month</td>
            <td align="left"> </td>
            <td align="left">1-12 or JAN-DEC</td>
            <td align="left"> </td>
            <td align="left">, - /// /</td>
            </tr>
            <tr>
            <td align="left">Day-of-Week</td>
            <td align="left"> </td>
            <td align="left">1-7 or SUN-SAT</td>
            <td align="left"> </td>
            <td align="left">, - /// ? / L #</td>
            </tr>
            <tr>
            <td align="left">Year (Optional)</td>
            <td align="left"> </td>
            <td align="left">empty, 1970-2199</td>
            <td align="left"> </td>
            <td align="left">, - /// /</td>
            </tr>
            </table>
            <para>
            The '*' character is used to specify all values. For example, &quot;*&quot;
            in the minute field means &quot;every minute&quot;.
            </para>
            <para>
            The '?' character is allowed for the day-of-month and day-of-week fields. It
            is used to specify 'no specific value'. This is useful when you need to
            specify something in one of the two fields, but not the other.
            </para>
            <para>
            The '-' character is used to specify ranges For example &quot;10-12&quot; in
            the hour field means &quot;the hours 10, 11 and 12&quot;.
            </para>
            <para>
            The ',' character is used to specify additional values. For example
            &quot;MON,WED,FRI&quot; in the day-of-week field means &quot;the days Monday,
            Wednesday, and Friday&quot;.
            </para>
            <para>
            The '/' character is used to specify increments. For example &quot;0/15&quot;
            in the seconds field means &quot;the seconds 0, 15, 30, and 45&quot;. And
            &quot;5/15&quot; in the seconds field means &quot;the seconds 5, 20, 35, and
            50&quot;.  Specifying '*' before the  '/' is equivalent to specifying 0 is
            the value to start with. Essentially, for each field in the expression, there
            is a set of numbers that can be turned on or off. For seconds and minutes,
            the numbers range from 0 to 59. For hours 0 to 23, for days of the month 0 to
            31, and for months 1 to 12. The &quot;/&quot; character simply helps you turn
            on every &quot;nth&quot; value in the given set. Thus &quot;7/6&quot; in the
            month field only turns on month &quot;7&quot;, it does NOT mean every 6th
            month, please note that subtlety.
            </para>
            <para>
            The 'L' character is allowed for the day-of-month and day-of-week fields.
            This character is short-hand for &quot;last&quot;, but it has different
            meaning in each of the two fields. For example, the value &quot;L&quot; in
            the day-of-month field means &quot;the last day of the month&quot; - day 31
            for January, day 28 for February on non-leap years. If used in the
            day-of-week field by itself, it simply means &quot;7&quot; or
            &quot;SAT&quot;. But if used in the day-of-week field after another value, it
            means &quot;the last xxx day of the month&quot; - for example &quot;6L&quot;
            means &quot;the last friday of the month&quot;. You can also specify an offset
            from the last day of the month, such as "L-3" which would mean the third-to-last
            day of the calendar month. <i>When using the 'L' option, it is important not to
            specify lists, or ranges of values, as you'll get confusing/unexpected results.</i>
            </para>
            <para>
            The 'W' character is allowed for the day-of-month field.  This character
            is used to specify the weekday (Monday-Friday) nearest the given day.  As an
            example, if you were to specify &quot;15W&quot; as the value for the
            day-of-month field, the meaning is: &quot;the nearest weekday to the 15th of
            the month&quot;. So if the 15th is a Saturday, the trigger will fire on
            Friday the 14th. If the 15th is a Sunday, the trigger will fire on Monday the
            16th. If the 15th is a Tuesday, then it will fire on Tuesday the 15th.
            However if you specify &quot;1W&quot; as the value for day-of-month, and the
            1st is a Saturday, the trigger will fire on Monday the 3rd, as it will not
            'jump' over the boundary of a month's days.  The 'W' character can only be
            specified when the day-of-month is a single day, not a range or list of days.
            </para>
            <para>
            The 'L' and 'W' characters can also be combined for the day-of-month
            expression to yield 'LW', which translates to &quot;last weekday of the
            month&quot;.
            </para>
            <para>
            The '#' character is allowed for the day-of-week field. This character is
            used to specify &quot;the nth&quot; XXX day of the month. For example, the
            value of &quot;6#3&quot; in the day-of-week field means the third Friday of
            the month (day 6 = Friday and &quot;#3&quot; = the 3rd one in the month).
            Other examples: &quot;2#1&quot; = the first Monday of the month and
            &quot;4#5&quot; = the fifth Wednesday of the month. Note that if you specify
            &quot;#5&quot; and there is not 5 of the given day-of-week in the month, then
            no firing will occur that month. If the '#' character is used, there can
            only be one expression in the day-of-week field (&quot;3#1,6#3&quot; is
            not valid, since there are two expressions).
            </para>
            <para>
            <!--The 'C' character is allowed for the day-of-month and day-of-week fields.
            This character is short-hand for "calendar". This means values are
            calculated against the associated calendar, if any. If no calendar is
            associated, then it is equivalent to having an all-inclusive calendar. A
            value of "5C" in the day-of-month field means "the first day included by the
            calendar on or after the 5th". A value of "1C" in the day-of-week field
            means "the first day included by the calendar on or after Sunday". -->
            </para>
            <para>
            The legal characters and the names of months and days of the week are not
            case sensitive.
            </para>
            <para>
            <b>NOTES:</b>
            <ul>
            <li>Support for specifying both a day-of-week and a day-of-month value is
            not complete (you'll need to use the '?' character in one of these fields).
            </li>
            <li>Overflowing ranges is supported - that is, having a larger number on
            the left hand side than the right. You might do 22-2 to catch 10 o'clock
            at night until 2 o'clock in the morning, or you might have NOV-FEB. It is
            very important to note that overuse of overflowing ranges creates ranges
            that don't make sense and no effort has been made to determine which
            interpretation CronExpression chooses. An example would be
            "0 0 14-6 ? * FRI-MON". </li>
            </ul>
            </para>
            </remarks>
            <author>Sharada Jambula</author>
            <author>James House</author>
            <author>Contributions from Mads Henderson</author>
            <author>Refactoring from CronTrigger to CronExpression by Aaron Craven</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="F:Api.Automations.CronExpression.Second">
            <summary>
            Field specification for second.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.Minute">
            <summary>
            Field specification for minute.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.Hour">
            <summary>
            Field specification for hour.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.DayOfMonth">
            <summary>
            Field specification for day of month.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.Month">
            <summary>
            Field specification for month.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.DayOfWeek">
            <summary>
            Field specification for day of week.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.Year">
            <summary>
            Field specification for year.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.AllSpecInt">
            <summary>
            Field specification for all wildcard value '*'.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.NoSpecInt">
            <summary>
            Field specification for not specified value '?'.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.AllSpec">
            <summary>
            Field specification for wildcard '*'.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.NoSpec">
            <summary>
            Field specification for no specification at all '?'.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.seconds">
            <summary>
            Seconds.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.minutes">
            <summary>
            minutes.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.hours">
            <summary>
            Hours.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.daysOfMonth">
            <summary>
            Days of month.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.months">
            <summary>
            Months.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.daysOfWeek">
            <summary>
            Days of week.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.years">
            <summary>
            Years.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.lastdayOfWeek">
            <summary>
            Last day of week.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.everyNthWeek">
            <summary>
            N number of weeks.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.nthdayOfWeek">
            <summary>
            Nth day of week.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.lastdayOfMonth">
            <summary>
            Last day of month.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.nearestWeekday">
            <summary>
            Nearest weekday.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.lastdayOffset">
            <summary>
            Last day offset
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.calendardayOfWeek">
            <summary>
            Calendar day of week.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.calendardayOfMonth">
            <summary>
            Calendar day of month.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.expressionParsed">
            <summary>
            Expression parsed.
            </summary>
        </member>
        <member name="F:Api.Automations.CronExpression.MaxYear">
            <summary>
            Maximum year
            </summary>
        </member>
        <member name="M:Api.Automations.CronExpression.#ctor(System.String)">
            <summary>
             Constructs a new <see cref="P:Api.Automations.CronExpression.CronExpressionString" /> based on the specified
             parameter.
             </summary>
             <param name="cronExpression">
             String representation of the cron expression the new object should represent
             </param>
             <see cref="P:Api.Automations.CronExpression.CronExpressionString" />
        </member>
        <member name="M:Api.Automations.CronExpression.IsSatisfiedBy(System.DateTimeOffset)">
            <summary>
            Indicates whether the given date satisfies the cron expression.
            </summary>
            <remarks>
            Note that  milliseconds are ignored, so two Dates falling on different milliseconds
            of the same second will always have the same result here.
            </remarks>
            <param name="dateUtc">The date to evaluate.</param>
            <returns>a boolean indicating whether the given date satisfies the cron expression</returns>
        </member>
        <member name="M:Api.Automations.CronExpression.GetNextValidTimeAfter(System.DateTimeOffset)">
            <summary>
            Returns the next date/time <i>after</i> the given date/time which
            satisfies the cron expression.
            </summary>
            <param name="date">the date/time at which to begin the search for the next valid date/time</param>
            <returns>the next valid date/time</returns>
        </member>
        <member name="M:Api.Automations.CronExpression.GetNextInvalidTimeAfter(System.DateTimeOffset)">
            <summary>
            Returns the next date/time <i>after</i> the given date/time which does
            <i>not</i> satisfy the expression.
            </summary>
            <param name="date">the date/time at which to begin the search for the next invalid date/time</param>
            <returns>the next valid date/time</returns>
        </member>
        <member name="M:Api.Automations.CronExpression.ToString">
            <summary>
            Returns the string representation of the <see cref="T:Api.Automations.CronExpression" />
            </summary>
            <returns>The string representation of the <see cref="T:Api.Automations.CronExpression" /></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.IsValidExpression(System.String)">
            <summary>
            Indicates whether the specified cron expression can be parsed into a
            valid cron expression
            </summary>
            <param name="cronExpression">the expression to evaluate</param>
            <returns>a boolean indicating whether the given expression is a valid cron
                    expression</returns>
        </member>
        <member name="M:Api.Automations.CronExpression.ValidateExpression(System.String)">
            <summary>
            Throws if the validation fails. Generally don't use this - just construct with a try/catch.
            </summary>
            <param name="cronExpression"></param>
        </member>
        <member name="M:Api.Automations.CronExpression.BuildExpression(System.String)">
            <summary>
            Builds the expression.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Api.Automations.CronExpression.StoreExpressionVals(System.Int32,System.String,System.Int32)">
            <summary>
            Stores the expression values.
            </summary>
            <param name="pos">The position.</param>
            <param name="s">The string to traverse.</param>
            <param name="type">The type of value.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.CheckNext(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Checks the next value.
            </summary>
            <param name="pos">The position.</param>
            <param name="s">The string to check.</param>
            <param name="val">The value.</param>
            <param name="type">The type to search.</param>
            <returns></returns>
        </member>
        <member name="P:Api.Automations.CronExpression.CronExpressionString">
            <summary>
            Gets the cron expression string.
            </summary>
            <value>The cron expression string.</value>
        </member>
        <member name="M:Api.Automations.CronExpression.GetExpressionSummary">
            <summary>
            Gets the expression summary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.GetExpressionSetSummary(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Gets the expression set summary.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.SkipWhiteSpace(System.Int32,System.String)">
            <summary>
            Skips the white space.
            </summary>
            <param name="i">The i.</param>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.FindNextWhiteSpace(System.Int32,System.String)">
            <summary>
            Finds the next white space.
            </summary>
            <param name="i">The i.</param>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.AddToSet(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds to set.
            </summary>
            <param name="val">The val.</param>
            <param name="end">The end.</param>
            <param name="incr">The incr.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Api.Automations.CronExpression.GetSet(System.Int32)">
            <summary>
            Gets the set of given type.
            </summary>
            <param name="type">The type of set to get.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.GetValue(System.Int32,System.String,System.Int32)">
            <summary>
            Gets the value.
            </summary>
            <param name="v">The v.</param>
            <param name="s">The s.</param>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.GetNumericValue(System.String,System.Int32)">
            <summary>
            Gets the numeric value from string.
            </summary>
            <param name="s">The string to parse from.</param>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.GetMonthNumber(System.String)">
            <summary>
            Gets the month number.
            </summary>
            <param name="s">The string to map with.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.GetDayOfWeekNumber(System.String)">
            <summary>
            Gets the day of week number.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.GetTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the time from given time parts.
            </summary>
            <param name="sc">The seconds.</param>
            <param name="mn">The minutes.</param>
            <param name="hr">The hours.</param>
            <param name="dayofmn">The day of month.</param>
            <param name="mon">The month.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.GetTimeAfter(System.DateTimeOffset)">
            <summary>
            Gets the next fire time after the given time.
            </summary>
            <param name="afterTimeUtc">The UTC time to start searching from.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.CreateDateTimeWithoutMillis(System.DateTimeOffset)">
            <summary>
            Creates the date time without milliseconds.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.SetCalendarHour(System.DateTimeOffset,System.Int32)">
            <summary>
            Advance the calendar to the particular hour paying particular attention
            to daylight saving problems.
            </summary>
            <param name="date">The date.</param>
            <param name="hour">The hour.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.GetTimeBefore(System.Nullable{System.DateTimeOffset})">
            <summary>
            Gets the time before.
            </summary>
            <param name="endTime">The end time.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.GetFinalFireTime">
            <summary>
            NOT YET IMPLEMENTED: Returns the final time that the
            <see cref="T:Api.Automations.CronExpression" /> will match.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.IsLeapYear(System.Int32)">
            <summary>
            Determines whether given year is a leap year.
            </summary>
            <param name="year">The year.</param>
            <returns>
            	<c>true</c> if the specified year is a leap year; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Api.Automations.CronExpression.GetLastDayOfMonth(System.Int32,System.Int32)">
            <summary>
            Gets the last day of month.
            </summary>
            <param name="monthNum">The month num.</param>
            <param name="year">The year.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronExpression.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Api.Automations.CronExpression.Equals(Api.Automations.CronExpression)">
            <summary>
            Determines whether the specified <see cref="T:Api.Automations.CronExpression"/> is equal to the current <see cref="T:Api.Automations.CronExpression"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:Api.Automations.CronExpression"/> is equal to the current <see cref="T:Api.Automations.CronExpression"/>; otherwise, false.
            </returns>
            <param name="other">The <see cref="T:Api.Automations.CronExpression"/> to compare with the current <see cref="T:Api.Automations.CronExpression"/>. </param>
        </member>
        <member name="M:Api.Automations.CronExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:Api.Automations.CronExpression.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Api.Automations.ValueSet">
            <summary>
            Helper class for cron expression handling.
            </summary>
        </member>
        <member name="F:Api.Automations.ValueSet.theValue">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:Api.Automations.ValueSet.pos">
            <summary>
            The position.
            </summary>
        </member>
        <member name="T:Api.Automations.CronScheduler">
            <summary>
            Cron scheduler.
            </summary>
        </member>
        <member name="P:Api.Automations.CronScheduler.Paused">
            <summary>
            The scheduler is paused if it has nothing to wait for.
            </summary>
        </member>
        <member name="F:Api.Automations.CronScheduler._automationsByName">
            <summary>
            Maps automation names to the run info. The name is lowercased.
            </summary>
        </member>
        <member name="P:Api.Automations.CronScheduler.LastUpdated">
            <summary>
            The last time something was added to the schedule.
            </summary>
        </member>
        <member name="P:Api.Automations.CronScheduler.AutomationsByName">
            <summary>
            A readonly set of the automations by name.
            </summary>
        </member>
        <member name="M:Api.Automations.CronScheduler.Trigger(System.String)">
            <summary>
            Triggers an automation by its name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronScheduler.AddToLookup(Api.Automations.AutomationRunInfo)">
            <summary>
            Adds the given info to the automations lookup.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Api.Automations.CronScheduler.TryGetAutomation(System.String,Api.Automations.AutomationRunInfo@)">
            <summary>
            Tries to get an automation by lowercase name.
            </summary>
            <param name="lcName"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.CronScheduler.Schedule(Api.Automations.AutomationRunInfo)">
            <summary>
            Schedules the given automation.
            </summary>
        </member>
        <member name="T:Api.Automations.ExpressionDescriptor">
            <summary>
            Converts a Cron Expression into a human readable string
            </summary>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Api.Automations.ExpressionDescriptor"/> class
            </summary>
            <param name="expression">The cron expression string</param>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.#ctor(System.String,Api.Automations.Options)">
            <summary>
            Initializes a new instance of the <see cref="T:Api.Automations.ExpressionDescriptor"/> class
            </summary>
            <param name="expression">The cron expression string</param>
            <param name="options">Options to control the output description</param>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.GetDescription(Api.Automations.DescriptionTypeEnum)">
            <summary>
            Generates a human readable string for the Cron Expression
            </summary>
            <param name="type">Which part(s) of the expression to describe</param>
            <returns>The cron expression description</returns>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.GetFullDescription">
            <summary>
            Generates the FULL description
            </summary>
            <returns>The FULL description</returns>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.GetTimeOfDayDescription">
            <summary>
            Generates a description for only the TIMEOFDAY portion of the expression
            </summary>
            <returns>The TIMEOFDAY description</returns>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.GetSecondsDescription">
            <summary>
            Generates a description for only the SECONDS portion of the expression
            </summary>
            <returns>The SECONDS description</returns>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.GetMinutesDescription">
            <summary>
            Generates a description for only the MINUTE portion of the expression
            </summary>
            <returns>The MINUTE description</returns>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.GetHoursDescription">
            <summary>
            Generates a description for only the HOUR portion of the expression
            </summary>
            <returns>The HOUR description</returns>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.GetDayOfWeekDescription">
            <summary>
            Generates a description for only the DAYOFWEEK portion of the expression
            </summary>
            <returns>The DAYOFWEEK description</returns>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.GetMonthDescription">
            <summary>
            Generates a description for only the MONTH portion of the expression
            </summary>
            <returns>The MONTH description</returns>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.GetDayOfMonthDescription">
            <summary>
            Generates a description for only the DAYOFMONTH portion of the expression
            </summary>
            <returns>The DAYOFMONTH description</returns>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.GetYearDescription">
            <summary>
            Generates a description for only the YEAR portion of the expression
            </summary>
            <returns>The YEAR description</returns>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.GetSegmentDescription(System.String,System.String,System.Func{System.String,System.String},System.Func{System.String,System.String},System.Func{System.String,System.String},System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Generates the segment description
            <remarks>
            Range expressions used the 'ComaX0ThroughX1' resource
            However Romanian language has different idioms for
            1. 'from number to number' (minutes, seconds, hours, days) => ComaMinX0ThroughMinX1 optional resource
            2. 'from month to month' ComaMonthX0ThroughMonthX1 optional resource
            3. 'from year to year' => ComaYearX0ThroughYearX1 optional resource
            therefore <paramref name="getRangeFormat"/> was introduced
            </remarks>
            </summary>
            <param name="expression"></param>
            <param name="allDescription"></param>
            <param name="getSingleItemDescription"></param>
            <param name="getIntervalDescriptionFormat"></param>
            <param name="getBetweenDescriptionFormat"></param>
            <param name="getDescriptionFormat"></param>
            <param name="getRangeFormat">function that formats range expressions depending on cron parts</param>
            <returns></returns>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.GenerateBetweenSegmentDescription(System.String,System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Generates the between segment description
            </summary>
            <param name="betweenExpression"></param>
            <param name="getBetweenDescriptionFormat"></param>
            <param name="getSingleItemDescription"></param>
            <returns>The between segment description</returns>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.FormatTime(System.String,System.String)">
            <summary>
            Given time parts, will construct a formatted time description
            </summary>
            <param name="hourExpression">Hours part</param>
            <param name="minuteExpression">Minutes part</param>
            <returns>Formatted time description</returns>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.FormatTime(System.String,System.String,System.String)">
            <summary>
            Given time parts, will construct a formatted time description
            </summary>
            <param name="hourExpression">Hours part</param>
            <param name="minuteExpression">Minutes part</param>
            <param name="secondExpression">Seconds part</param>
            <returns>Formatted time description</returns>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.TransformVerbosity(System.String,System.Boolean)">
            <summary>
            Transforms the verbosity of the expression description by stripping verbosity from original description
            </summary>
            <param name="description">The description to transform</param>
            <param name="useVerboseFormat">If true, will leave description as it, if false, will strip verbose parts</param>
            <returns>The transformed description with proper verbosity</returns>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.GetDescription(System.String)">
            <summary>
            Generates a human readable string for the Cron Expression
            </summary>
            <param name="expression">The cron expression string</param>
            <returns>The cron expression description</returns>
        </member>
        <member name="M:Api.Automations.ExpressionDescriptor.GetDescription(System.String,Api.Automations.Options)">
            <summary>
            Generates a human readable string for the Cron Expression
            </summary>
            <param name="expression">The cron expression string</param>
            <param name="options">Options to control the output description</param>
            <returns>The cron expression description</returns>
        </member>
        <member name="T:Api.Automations.DescriptionTypeEnum">
            <summary>
            Enum to define the description "parts" of a Cron Expression  
            </summary>
        </member>
        <member name="F:Api.Automations.DescriptionTypeEnum.FULL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.Automations.DescriptionTypeEnum.TIMEOFDAY">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.Automations.DescriptionTypeEnum.SECONDS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.Automations.DescriptionTypeEnum.MINUTES">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.Automations.DescriptionTypeEnum.HOURS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.Automations.DescriptionTypeEnum.DAYOFWEEK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.Automations.DescriptionTypeEnum.MONTH">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.Automations.DescriptionTypeEnum.DAYOFMONTH">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.Automations.DescriptionTypeEnum.YEAR">
            <summary>
            
            </summary>
        </member>
        <member name="T:Api.Automations.Options">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Automations.Options.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Api.Automations.Options.ThrowExceptionOnParseError">
            <summary>
            
            </summary>
        </member>
        <member name="P:Api.Automations.Options.Verbose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Api.Automations.Options.DayOfWeekStartIndexZero">
            <summary>
            
            </summary>
        </member>
        <member name="P:Api.Automations.Options.Use24HourTimeFormat">
            <summary>
            
            </summary>
        </member>
        <member name="P:Api.Automations.Options.Locale">
            <summary>
            
            </summary>
        </member>
        <member name="T:Api.Automations.ExpressionParser">
            <summary>
            Cron Expression Parser used by the expression description system
            </summary>
        </member>
        <member name="M:Api.Automations.ExpressionParser.#ctor(System.String,Api.Automations.Options)">
            <summary>
            Initializes a new instance of the <see cref="T:Api.Automations.ExpressionParser"/> class
            </summary>
            <param name="expression">The cron expression string</param>
            <param name="options">Parsing options</param>
        </member>
        <member name="M:Api.Automations.ExpressionParser.Parse">
            <summary>
            Parses the cron expression string
            </summary>
            <returns>A 7 part string array, one part for each component of the cron expression (seconds, minutes, etc.)</returns>
        </member>
        <member name="M:Api.Automations.ExpressionParser.NormalizeExpression(System.String[])">
            <summary>
            Converts cron expression components into consistent, predictable formats.
            </summary>
            <param name="expressionParts">A 7 part string array, one part for each component of the cron expression</param>
        </member>
        <member name="T:Api.Eventing.Events">
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            
            Event handlers are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            Events are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events._cronScheduler">
            <summary>
            The cron scheduler for Automations.
            </summary>
        </member>
        <member name="M:Api.Eventing.Events.GetCronScheduler">
            <summary>
            Gets the cron scheduler.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.Eventing.Events.AvailableAutomations">
            <summary>
            All available automation events.
            </summary>
        </member>
        <member name="M:Api.Eventing.Events.Automation(System.String,System.String,System.Boolean)">
            <summary>
            Takes a cron string and returns an event handler which you can add a listener to. Generally used during startup.
            The event will trigger at the rate specified by your cron expression.
            Provide a name (typically lowercase with underscores instead of spaces) such that you can also explicitly request the automation to run from its name too.
            Note that if you provide a name but not the cron expression, you can add additional event handlers to an existing job.
            </summary>
            <param name="name">A lowercase key for this automation. Used to trigger it and also add additional handlers to a particular event.</param>
            <param name="cronExpression">The 7 part cron expression from e.g. https://www.freeformatter.com/cron-expression-generator-quartz.html</param>
            <param name="runOnAllServersInCluster">
            Set this to true if you want all servers in a cluster to run this automation.
            </param>
        </member>
        <member name="F:Api.Eventing.Events.AvailableEndpoints">
            <summary>
            All available endpoint events.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.FrontendjsAfterUpdate">
            <summary>
            Triggered after the underlying frontend JS has changed.
            Triggers most often on development environments; often only once on startup for prod.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.FrontendCssAfterUpdate">
            <summary>
            Triggered after the underlying frontend CSS has changed.
            Triggers most often on development environments; often only once on startup for prod.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.FrontendAfterUpdate">
            <summary>
            Triggers whenever the frontend changed at all.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.DomainCertificateChallenge">
            <summary>
            Set of events for a domainCertificateChallenge.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.DomainCertificate">
            <summary>
            Set of events for a domainCertificate.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.Redirect">
            <summary>
            Set of events for a redirect.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.Configuration">
            <summary>
            Set of events for a configuration.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.ClusteredServer">
            <summary>
            Set of events for clustered servers.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.NetworkRoomType">
            <summary>
            Set of events for nr types.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.Context">
            <summary>
            Set of events for a context.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.DatabaseDiffBeforeAdd">
            <summary>
            This is invoked just before database diff adds the given type to the schema.
            Use it to add additional types, or block adding this one.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.DatabaseDiffAfterAdd">
            <summary>
            This is invoked just after database diff adds the given type to the schema and the table now exists.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.EmailTemplate">
            <summary>
            Set of events for an emailTemplate.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.Logging">
            <summary>
            All logging events.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.EventsAfterStart">
            <summary>
            Called at the earliest point when all the event handlers are setup and you can start using them.
            </summary>
        </member>
        <member name="M:Api.Eventing.Events.TriggerStart">
            <summary>
            Call this to trigger the OnStart event.
            </summary>
        </member>
        <member name="M:Api.Eventing.Events.Init">
            <summary>
            Called to setup all event handlers.
            </summary>
        </member>
        <member name="M:Api.Eventing.Events.SetupEventsOnObject(System.Object,System.Type,System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.List{Api.Eventing.EventHandler})">
            <summary>
            Sets up any event handler objects on the given target object by looping through fields of the given type.
            Note that type is provided as the target object can be null in the case of the static Events class itself.
            If an EventGroup is instanced, note that it internally calls SetupEventsOnObject.
            </summary>
            <param name="target"></param>
            <param name="type"></param>
            <param name="attribs"></param>
            <param name="collectInto">Optionally collects all handlers into the given list.</param>
        </member>
        <member name="F:Api.Eventing.Events.DevFileGeneration">
            <summary>
            Set of events for generation
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.NavMenu">
            <summary>
            Set of events for a NavMenu.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.NavMenuItem">
            <summary>
            Set of events for a NavMenuItem.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.AdminNavMenuItem">
            <summary>
            Set of events for a AdminNavMenuItem.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.Page">
            <summary>
            All page entity events.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.PasswordResetRequest">
            <summary>
            Set of events for a passwordResetRequest.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.UserOnPasswordUpdate">
            <summary>
            Allow other services to handle the password update/storage process
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.PasswordResetRequestAfterSuccess">
            <summary>
            After successful reset.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.CapabilityOnSetup">
            <summary>
            Called when capabilities are being granted to roles.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.Role">
            <summary>
            Events on the Role type.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.Service">
            <summary>
            Event group for a bundle of events on AutoServices.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.Monitor">
            <summary>
            Set of events for the monitor service.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.Template">
            <summary>
            All template entity events.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.Locale">
            <summary>
            Set of events for a Locale.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.Translation">
            <summary>
            Set of events for a Translation.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.Upload">
            <summary>
            Set of events for an Upload.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.UserOnAuthenticate">
            <summary>
            During authentication. Add a handler to this to define custom auth schemes, or secondary auth schemes like 2FA.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.UserBeforeAuthenticate">
            <summary>
            Just before updating an user. Optionally make additional changes, or return null to cancel the update.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.UserOnLogin">
            <summary>
            During a login. This is where you can make context changes due to a user logging in.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.UserAfterAuthenticate">
            <summary>
            Just after a user has authenticated.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.ContextAfterAnonymous">
            <summary>
            Just after an anon user has been identified.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.User">
            <summary>
            Set of events for a User.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.WebSocketMessage">
            <summary>
            Called when a wrapped JSON message is received of a non-core type.
            </summary>
        </member>
        <member name="F:Api.Eventing.Events.WebSocket">
            <summary>
            Event group for a bundle of events on AutoServices.
            </summary>
        </member>
        <member name="T:Api.Eventing.EventGroup`2">
            <summary>
            A grouping of common events, such as before/ after create, update, delete etc.
            These are typically added to the Events class, named directly after the type that is being used.
            </summary>
            <summary>
            A grouping of common events, such as before/ after create, update, delete etc.
            These are typically added to the Events class, named directly after the type that is being used.
            Like this:
            public static EventGroup{Page} Page;
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
        </member>
        <member name="F:Api.Eventing.EventGroup`2.Configure">
            <summary>
            Called when this service is being configured.
            This is either when its config is first loaded, or when it was updated.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroup`2.BeforeList">
            <summary>
            Just before a service loads an entity list.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroup`2.List">
            <summary>
            Called to actually obtain the list of results from the data engine.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroup`2.AfterList">
            <summary>
            Just after an entity list was loaded.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroup`2.ListEntry">
            <summary>
            Called after an entity has been listed, just before it is written to the output
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroup`2.EndpointStartList">
            <summary>
            List entities.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroup`2.EndpointEndList">
            <summary>
            List entities.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroup`2.EndpointListEntry">
            <summary>
            Called after an entity has been listed, just before it is written to the output
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroup`2.BeforeSettable">
            <summary>
            Just before a field is added (and made settable).
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroup`2.BeforeGettable">
            <summary>
            Just before a field is added (and made gettable).
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroup`2.EndpointStartPotList">
            <summary>
            Called when a list.pot is being generated
            </summary>
        </member>
        <member name="T:Api.Eventing.ContextEventGroup">
            <summary>
            Events relating to contexts.
            </summary>
        </member>
        <member name="F:Api.Eventing.ContextEventGroup.OnLoad">
            <summary>
            Called during GetContext.
            </summary>
        </member>
        <member name="F:Api.Eventing.ContextEventGroup.CanUseCache">
            <summary>
            Called if the context is able to use the page cache.
            The given value is the current cache access (true means it can use the cache).
            </summary>
        </member>
        <member name="T:Api.Eventing.EmailEventGroup">
            <summary>
            Custom user specific events.
            </summary>
        </member>
        <member name="F:Api.Eventing.EmailEventGroup.Send">
            <summary>
            During email send. Handle this event to override the SMTP send behaviour.
            </summary>
        </member>
        <member name="T:Api.Eventing.LoggingEventGroup">
            <summary>
            Event group for logging related events.
            </summary>
        </member>
        <member name="F:Api.Eventing.LoggingEventGroup.FileAppended">
            <summary>
            Raised when the log file has been appended to. It is provided with the file path, append start and new total length.
            </summary>
        </member>
        <member name="T:Api.Eventing.EventGroup`1">
            <summary>
            A grouping of common events, such as before/ after create, update, delete etc.
            These are typically added to the Events class, named directly after the type that is being used.
            Like this:
            public static EventGroup{Page} Page;
            You can extend it with custom events as well - just do so on the base EventGroup{T, ID} type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Api.Eventing.EventGroupCore`2">
            <summary>
            Core event group which can be used by any general type and ID pairing.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.BeforeCreate">
            <summary>
            Just before a new entity is created. The given entity won't have an ID yet. Return null to cancel the creation.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.Create">
            <summary>
            Called to actually create the result in the data engine.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.CreatePartial">
            <summary>
            Called to actually create the result in the data engine during partial complete.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.AfterCreate">
            <summary>
            Just after an entity has been created. The given object will now have an ID.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.BeforeDelete">
            <summary>
            Just before an entity is being deleted. Return null to cancel the deletion.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.Delete">
            <summary>
            Called to actually delete the result from the data engine.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.AfterDelete">
            <summary>
            Just after an entity has been deleted.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.BeforeUpdate">
            <summary>
            Just before updating an entity. Optionally make additional changes, or return null to cancel the update. You MAY apply changes to the first argument.
            The second argument is the original object which MUST be unchanged but may be used for comparisons.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.Update">
            <summary>
            Called to actually update the result in the data engine. Given the updated object and the set of fields that were changed in it.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.AfterUpdate">
            <summary>
            Just after updating an entity.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.BeforeLoad">
            <summary>
            Just before an entity is loaded.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.Load">
            <summary>
            Called to actually obtain the result from the data engine.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.AfterLoad">
            <summary>
            Just after an entity was loaded.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.AfterInstanceTypeUpdate">
            <summary>
            Called just after the host service instance type has been changed. Use this to clear out any caches built on the instance type.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.EndpointStartLoad">
            <summary>
            Load entity metadata.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.EndpointEndLoad">
            <summary>
            Load entity metadata.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.EndpointStartCreate">
            <summary>
            Create a new entity.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.EndpointEndCreate">
            <summary>
            Create a new entity.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.EndpointStartDelete">
            <summary>
            Delete an entity.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.EndpointEndDelete">
            <summary>
            Delete an entity.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.EndpointStartUpdate">
            <summary>
            Update entity metadata.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.EndpointEndUpdate">
            <summary>
            Update entity metadata.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroupCore`2.Received">
            <summary>
            Called when a remote entity was received via remote sync.
            The object will be of the correct content type and will be populated 
            by passing it through all the AfterLoad handlers.
            </summary>
        </member>
        <member name="M:Api.Eventing.EventGroupCore`2.GetLoadCapability">
            <summary>
            Gets the capability for loading something of this type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Eventing.EventGroup">
            <summary>
            The base class of all EventGroup instances.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroup.AllWithCapabilities">
            <summary>
            All event handlers in this group that were assigned a capability. Can be null.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventGroup.All">
            <summary>
            All event handlers in this group.
            </summary>
        </member>
        <member name="M:Api.Eventing.EventGroup.#ctor">
            <summary>
            Creates a new instance of this event group. Automatically populates all EventHandler fields.
            </summary>
        </member>
        <member name="M:Api.Eventing.EventGroup.GetLoadCapability">
            <summary>
            Gets the capability for loading something of this type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Eventing.EventHandler">
            <summary>
            Event handlers are instanced automatically and form a major part of the pluggable architecture.
            Modules can define events via simply extending the Events class.
            Handlers are also heaviest on add - they're designed to maximise repeat run performance - so avoid rapidly adding and removing them.
            Instead add one handler at startup and then do a check inside it to see if it should run or not.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventHandler.Name">
            <summary>
            The field name that this handler is from, if it was known.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventHandler.Capability">
            <summary>
            The capability that was created for this handler, if there is one. Only available on Before* handlers.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventHandler.Attributes">
            <summary>
            Attributes on the various event handler fields. Can be null.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventHandler.PrimaryType">
            <summary>
            The primary type of this event handler. If set, it's the type of the first arg (and also its return type).
            If an Api.Results.Set/ Filter type is applied here, it will be resolved into the contained type.
            If you want the full original type - i.e you're after Api.Results.Set/ Filter types too - use SourcePrimaryType.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventHandler.SourcePrimaryType">
            <summary>
            The primary type of this event handler. If set, it's the type of the first arg (and also its return type).
            Unlike primary type, this is exactly as-is in the source.
            </summary>
        </member>
        <member name="M:Api.Eventing.EventHandler.#ctor">
            <summary>
            A place where event methods can be attached to handle events of a particular type.
            You often don't need to construct these - they'll be created automatically during startup.
            Just declare the field in the Events class.
            </summary>
        </member>
        <member name="M:Api.Eventing.EventHandler.TestCapability``1(Api.Contexts.Context,``0)">
            <summary>
            Tests the capability of this handler for the given content/ context. Used when you're running manual permissions via [Permissions(IsManual=true)].
            </summary>
            <param name="context"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Eventing.EventHandler.GetCustomAttribute``1">
            <summary>
            Gets an attribute of the given type if its on this event handler's field. Null if not set.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Api.Eventing.EventHandler.AddAttributes(System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Adds a custom attribute declared on the field.
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Api.Eventing.EventHandler.SetPrimaryType(System.Type)">
            <summary>
            Sets the PrimaryType - essentially the type of the first arg.
            Note: If it is a generic Api.Results.Set or Filter type then this will obtain the type of the raw value.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Api.Eventing.EventHandler.HasListeners">
            <summary>
            True if this event handler has any methods connected to it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Eventing.EventHandler.ListenerCount">
            <summary>
            The number of listeners on this handler.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Eventing.EventHandlerMethodSet`1">
            <summary>
            Used to define the func type used in an event handler.
            </summary>
            <typeparam name="T">
            Specify the func type for the method set.
            </typeparam>
        </member>
        <member name="M:Api.Eventing.EventHandlerMethodSet`1.#ctor">
            <summary>
            A place where event methods can be attached to handle events of a particular type.
            You often don't need to construct these - they'll be created automatically during startup.
            Just declare the field in the Events class.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventHandlerMethodSet`1.MethodSet">
            <summary>
            The raw ordered set of methods.
            </summary>
        </member>
        <member name="M:Api.Eventing.EventHandlerMethodSet`1.ListenerCount">
            <summary>
            The number of listeners on this handler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Eventing.EventHandlerMethodSet`1.AddEventListener(`0,System.Int32)">
            <summary>
            Adds a new event listener with the given priority.
            Lower priorities mean it executes sooner. The default is 10.
            </summary>
            <param name="evt">The event handler to run.</param>
            <param name="priority">Lower priorities mean it executes sooner. The default is 10.</param>
        </member>
        <member name="T:Api.Eventing.EventHandler`1">
            <summary>
            Event handlers are instanced automatically and form a major part of the pluggable architecture.
            Modules can define events via simply extending the Events class.
            </summary>
            <typeparam name="T1">
            Type of 1st arg.
            </typeparam>
        </member>
        <member name="M:Api.Eventing.EventHandler`1.#ctor">
            <summary>
            A place where event methods can be attached to handle events of a particular type.
            You often don't need to construct these - they'll be created automatically during startup.
            Just declare the field in the Events class.
            </summary>
        </member>
        <member name="M:Api.Eventing.EventHandler`1.Dispatch(Api.Contexts.Context,`0)">
            <summary>
            Triggers this event handler to run.
            Fires events in ascending order of the priority number.
            Events with the same priority number will occur in the order they were added.
            </summary>
            <param name="context">
            The context which can be used to identify the original user making a particular request.
            Important for e.g. returning correctly localised database results automatically.</param>
            <param name="v1">1st arg value to pass to the methods. This one is also the default return value.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Eventing.EventHandler`2">
            <summary>
            Event handlers are instanced automatically and form a major part of the pluggable architecture.
            Modules can define events via simply extending the Events class.
            </summary>
            <typeparam name="T1">
            Type of 1st arg.
            </typeparam>
            <typeparam name="T2">
            Type of 2nd arg.
            </typeparam>
        </member>
        <member name="M:Api.Eventing.EventHandler`2.#ctor">
            <summary>
            A place where event methods can be attached to handle events of a particular type.
            You often don't need to construct these - they'll be created automatically during startup.
            Just declare the field in the Events class.
            </summary>
        </member>
        <member name="M:Api.Eventing.EventHandler`2.Dispatch(Api.Contexts.Context,`0,`1)">
            <summary>
            Triggers this event handler to run.
            Fires events in ascending order of the priority number.
            Events with the same priority number will occur in the order they were added.
            </summary>
            <param name="context">
            The context which can be used to identify the original user making a particular request.
            Important for e.g. returning correctly localised database results automatically.</param>
            <param name="v1">1st arg value to pass to the methods. This one is also the default return value.</param>
            <param name="v2">2nd arg value to pass to the methods.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Eventing.EventHandler`3">
            <summary>
            Event handlers are instanced automatically and form a major part of the pluggable architecture.
            Modules can define events via simply extending the Events class.
            </summary>
            <typeparam name="T1">
            Type of 1st arg.
            </typeparam>
            <typeparam name="T2">
            Type of 2nd arg.
            </typeparam>
            <typeparam name="T3">
            Type of 3rd arg.
            </typeparam>
        </member>
        <member name="M:Api.Eventing.EventHandler`3.#ctor">
            <summary>
            A place where event methods can be attached to handle events of a particular type.
            You often don't need to construct these - they'll be created automatically during startup.
            Just declare the field in the Events class.
            </summary>
        </member>
        <member name="M:Api.Eventing.EventHandler`3.Dispatch(Api.Contexts.Context,`0,`1,`2)">
            <summary>
            Triggers this event handler to run.
            Fires events in ascending order of the priority number.
            Events with the same priority number will occur in the order they were added.
            </summary>
            <param name="context">
            The context which can be used to identify the original user making a particular request.
            Important for e.g. returning correctly localised database results automatically.</param>
            <param name="v1">1st arg value to pass to the methods. This one is also the default return value.</param>
            <param name="v2">2nd arg value to pass to the methods.</param>
            <param name="v3">3rd arg value to pass to the methods.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Eventing.EventHandler`4">
            <summary>
            Event handlers are instanced automatically and form a major part of the pluggable architecture.
            Modules can define events via simply extending the Events class.
            </summary>
            <typeparam name="T1">
            Type of 1st arg.
            </typeparam>
            <typeparam name="T2">
            Type of 2nd arg.
            </typeparam>
            <typeparam name="T3">
            Type of 3rd arg.
            </typeparam>
            <typeparam name="T4">
            Type of 4th arg.
            </typeparam>
        </member>
        <member name="M:Api.Eventing.EventHandler`4.#ctor">
            <summary>
            A place where event methods can be attached to handle events of a particular type.
            You often don't need to construct these - they'll be created automatically during startup.
            Just declare the field in the Events class.
            </summary>
        </member>
        <member name="M:Api.Eventing.EventHandler`4.Dispatch(Api.Contexts.Context,`0,`1,`2,`3)">
            <summary>
            Triggers this event handler to run.
            Fires events in ascending order of the priority number.
            Events with the same priority number will occur in the order they were added.
            </summary>
            <param name="context">
            The context which can be used to identify the original user making a particular request.
            Important for e.g. returning correctly localised database results automatically.</param>
            <param name="v1">1st arg value to pass to the methods. This one is also the default return value.</param>
            <param name="v2">2nd arg value to pass to the methods.</param>
            <param name="v3">3rd arg value to pass to the methods.</param>
            <param name="v4">4th arg value to pass to the methods.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Eventing.EndpointEventHandler`1">
            <summary>
            An event handler specifically for API endpoints.
            </summary>
            <typeparam name="T1"></typeparam>
        </member>
        <member name="M:Api.Eventing.EndpointEventHandler`1.#ctor">
            <summary>
            A place where event methods can be attached to handle events of a particular type.
            You often don't need to construct these - they'll be created automatically during startup.
            Just declare the field in the Events class.
            </summary>
        </member>
        <member name="T:Api.Eventing.EndpointEventHandler`2">
            <summary>
            An event handler specifically for API endpoints.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:Api.Eventing.EndpointEventHandler`2.#ctor">
            <summary>
            A place where event methods can be attached to handle events of a particular type.
            You often don't need to construct these - they'll be created automatically during startup.
            Just declare the field in the Events class.
            </summary>
        </member>
        <member name="T:Api.Eventing.EventMethodSet`1">
            <summary>
            A set of actual event methods to run.
            </summary>
            <typeparam name="T">A Func type representing the method signature.</typeparam>
        </member>
        <member name="F:Api.Eventing.EventMethodSet`1.Methods">
            <summary>
            The raw array of methods.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventMethodSet`1.Priorities">
            <summary>
            The priorities of each of the methods.
            This is always the same size as the methods array.
            It's stored separately to minimise the dispatch hot path.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventMethodSet`1.HandlerCount">
            <summary>
            The actual number of methods currently listening here.
            </summary>
        </member>
        <member name="M:Api.Eventing.EventMethodSet`1.Remove(`0)">
            <summary>
            Removes the given method from this set.
            Returns true if it actually did something, or false if not.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Api.Eventing.EventMethodSet`1.Add(`0,System.Int32)">
            <summary>
            Adds a handler of the given priority, returning the array index to add it at.
            </summary>
            <param name="method">The method that will run at this priority.</param>
            <param name="priority">The priority value to add.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Eventing.EventPlacement">
            <summary>
            The placement of an event handler.
            This gets derived from the name - see EventHandler for more details.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventPlacement.Any">
            <summary>
            Any event placement.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventPlacement.Before">
            <summary>
            Event occurs before something.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventPlacement.After">
            <summary>
            Event occurs after something.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventPlacement.On">
            <summary>
            Event occurs during something.
            </summary>
        </member>
        <member name="F:Api.Eventing.EventPlacement.NotSpecified">
            <summary>
            It's not been specified.
            </summary>
        </member>
        <member name="T:Api.Eventing.DevFileGenerationEventGroup">
            <summary>
            Custom user specific events.
            </summary>
        </member>
        <member name="F:Api.Eventing.DevFileGenerationEventGroup.OnControllerFound">
            <summary>
            An AutoController has been found.
            </summary>
        </member>
        <member name="F:Api.Eventing.DevFileGenerationEventGroup.OnEntityFound">
            <summary>
            An entity has been found.
            </summary>
        </member>
        <member name="T:Api.Eventing.PageEventGroup">
            <summary>
            Page entity specific extensions to events.
            </summary>
        </member>
        <member name="F:Api.Eventing.PageEventGroup.BeforeResolveUrl">
            <summary>
            Called just before a page is about to resolve from the given URL and search query string.
            This can be used for e.g. enforcing universal access requirements.
            </summary>
        </member>
        <member name="F:Api.Eventing.PageEventGroup.BeforeParseUrl">
            <summary>
            A URL is parsed, and then it is resolved. This happens just before the parse phase and is essentially the very first thing that happens.
            </summary>
        </member>
        <member name="F:Api.Eventing.PageEventGroup.Generated">
            <summary>
            During page generation.
            </summary>
        </member>
        <member name="F:Api.Eventing.PageEventGroup.BeforeNavigate">
            <summary>
            Before a user is about to navigate to a page (the server is generating either just the state or the html for them).
            </summary>
        </member>
        <member name="F:Api.Eventing.PageEventGroup.AfterLookupReady">
            <summary>
            Url lookup is ready. Use to add e.g. custom redirects to the lookup tree.
            </summary>
        </member>
        <member name="F:Api.Eventing.PageEventGroup.BeforeAddTerminal">
            <summary>
            Just before adding a particular terminal.
            </summary>
        </member>
        <member name="F:Api.Eventing.PageEventGroup.BeforeAdminPageInstall">
            <summary>
            On admin page install.
            </summary>
        </member>
        <member name="T:Api.Eventing.MonitorEventGroup">
            <summary>
            Event group for the monitor service.
            </summary>
        </member>
        <member name="F:Api.Eventing.MonitorEventGroup.Setup">
            <summary>
            Called whilst the monitor service is being setup.
            This is the best place to populate the host data with custom overrides, such as the hostname or group.
            </summary>
        </member>
        <member name="F:Api.Eventing.MonitorEventGroup.AfterReply">
            <summary>
            Called when the remote monitor service replied with something. 
            You can pass whatever necessary here, however, "url" and "key" are reserved to indicate a url/ key/ both change.
            It's recommended to put custom responses in a field named after your service to be fully future proof.
            </summary>
        </member>
        <member name="T:Api.Eventing.LocaleEventGroup">
            <summary>
            Event group for locales
            </summary>
        </member>
        <member name="F:Api.Eventing.LocaleEventGroup.SetLocale">
            <summary>
            Called when the set locale endpoint is used.
            </summary>
        </member>
        <member name="F:Api.Eventing.LocaleEventGroup.InitialList">
            <summary>
            Locales are needed by the database system before the locale service has even loaded.
            This initial set of locales has a special event for the data service to provide it.
            </summary>
        </member>
        <member name="F:Api.Eventing.LocaleEventGroup.PotFieldValue">
            <summary>
            Called when a particular field is being mapped to a .pot text format
            </summary>
        </member>
        <member name="T:Api.Eventing.UploadEventGroup">
            <summary>
            Upload specific events.
            </summary>
        </member>
        <member name="F:Api.Eventing.UploadEventGroup.Process">
            <summary>
            Before the upload is done processing.
            </summary>
        </member>
        <member name="F:Api.Eventing.UploadEventGroup.AfterChunksUploaded">
            <summary>
            After a chunk group has been uploaded by a transcoder.
            </summary>
        </member>
        <member name="F:Api.Eventing.UploadEventGroup.StoreFile">
            <summary>
            Called when the upload system must store a file.
            Given the upload, the temp file path and the variant name.
            </summary>
        </member>
        <member name="F:Api.Eventing.UploadEventGroup.DeleteFile">
            <summary>
            Called when the upload system must delete a file.
            </summary>
        </member>
        <member name="F:Api.Eventing.UploadEventGroup.ListFiles">
            <summary>
            Called when the upload system must list files in a search directory.
            </summary>
        </member>
        <member name="F:Api.Eventing.UploadEventGroup.ReadFile">
            <summary>
            Reads the file at the given storage relative path, and returns its byte[]. You can block future event handlers by returning an empty array of bytes.
            </summary>
        </member>
        <member name="F:Api.Eventing.UploadEventGroup.OpenFile">
            <summary>
            Reads the file at the given storage relative path, and returns it as a stream.
            </summary>
        </member>
        <member name="T:Api.Eventing.UserEventGroup">
            <summary>
            Custom user specific events.
            </summary>
        </member>
        <member name="F:Api.Eventing.UserEventGroup.Logout">
            <summary>
            During a login. This is where you can make context changes due to a user logging in.
            </summary>
        </member>
        <member name="F:Api.Eventing.UserEventGroup.OnSendVerificationEmail">
            <summary>
            An event which runs when the verify email is sent. Make it return null to block the verify email.
            </summary>
        </member>
        <member name="T:Api.AvailableEndpoints.ApiStructure">
            <summary>
            Defines what's available from this API
            </summary>
        </member>
        <member name="P:Api.AvailableEndpoints.ApiStructure.Endpoints">
            <summary>
            The endpoints in this API.
            </summary>
        </member>
        <member name="P:Api.AvailableEndpoints.ApiStructure.ContentTypes">
            <summary>
            The content types in this API.
            </summary>
        </member>
        <member name="T:Api.AvailableEndpoints.AvailableEndpointController">
            <summary>
            Handles an endpoint which describes available endpoints. It's at the root of the API.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.AvailableEndpointController._applicationJson">
            <summary>
            Json header
            </summary>
        </member>
        <member name="M:Api.AvailableEndpoints.AvailableEndpointController.#ctor(Api.AvailableEndpoints.AvailableEndpointService)">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="M:Api.AvailableEndpoints.AvailableEndpointController.Uptime">
            <summary>
            Gets the time (in both ticks and as a timestamp) that the service last started at.
            </summary>
        </member>
        <member name="M:Api.AvailableEndpoints.AvailableEndpointController.Get">
            <summary>
            GET /v1/
            Returns meta about what's available from this API. Includes endpoints and content types.
            </summary>
        </member>
        <member name="T:Api.AvailableEndpoints.AvailableEndpointService">
            <summary>
            This optional service is for self-documentation and automated testing.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.AvailableEndpoints.AvailableEndpointService.#ctor(Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider)">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.AvailableEndpoints.AvailableEndpointService.GetStructure(Api.Contexts.Context)">
            <summary>
            Gets the API structure, considering user permissions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.AvailableEndpoints.AvailableEndpointService.ListByModule">
            <summary>
            Obtains the set of all available endpoints, grouped by the module (controller) that they are from.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.AvailableEndpoints.AvailableEndpointService.List">
            <summary>
            Obtains the set of all available endpoints in this API.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.AvailableEndpoints.AvailableEndpointService.GetFieldTypeInfo(System.Type,Api.AvailableEndpoints.XmlDocMember)">
            <summary>
            Gets general field info for a field of a given type.
            </summary>
            <param name="typeInfo"></param>
            <param name="documentation"></param>
            <returns></returns>
        </member>
        <member name="M:Api.AvailableEndpoints.AvailableEndpointService.BuildBodyFields(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Builds out the bodyfields set using fields in the given type.
            </summary>
            <param name="paramType"></param>
            <param name="fields"></param>
        </member>
        <member name="T:Api.AvailableEndpoints.ContentType">
            <summary>
            A particular type of content available through this API.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.ContentType.Id">
            <summary>
            The ID of the content type.
            There's a fixed function to generate these IDs - you don't actually need to hit the API to establish what the ID is.
            See also: Api.Database.ContentTypes.GetId
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.ContentType.Name">
            <summary>
            The name of the content type as-is, e.g. "ForumReply".
            </summary>
        </member>
        <member name="T:Api.AvailableEndpoints.Endpoint">
            <summary>
            An available endpoint of the API.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.Endpoint.Url">
            <summary>
            The URL to the endpoint including any substitute fields, e.g. "v1/user/{id}".
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.Endpoint.Summary">
            <summary>
            The summary of this endpoint.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.Endpoint.UrlFields">
            <summary>
            The fields which are subsituted into the URL.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.Endpoint.BodyFields">
            <summary>
            The accepted fields to post to this endpoint.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.Endpoint.HttpMethod">
            <summary>
            The uppercase HTTP method for this endpoint.
            </summary>
        </member>
        <member name="T:Api.AvailableEndpoints.EventMeta">
            <summary>
            Defines an event that can occur in the API
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.EventMeta.Name">
            <summary>
            The name of this event.
            </summary>
        </member>
        <member name="T:Api.AvailableEndpoints.ModuleEndpoints">
            <summary>
            The list of endpoints in a particular module (controller).
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.ModuleEndpoints.ControllerType">
            <summary>
            The module's controller that these endpoints belong to.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.ModuleEndpoints.Endpoints">
            <summary>
            The endpoints themselves.
            </summary>
        </member>
        <member name="M:Api.AvailableEndpoints.ModuleEndpoints.GetAutoControllerType">
            <summary>
            Gets the AutoController type, if there is one. Null if this module does not use AutoController.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.AvailableEndpoints.ModuleEndpoints.GetContentType">
            <summary>
            Gets the content type associated with this module, if there is one. It can be null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.AvailableEndpoints.ModuleEndpoints.GetAutoService">
            <summary>
            Gets the autoService associated with this module if there is one. 
            It can be null if it is not an autoService based controller.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.AvailableEndpoints.XmlDoc">
            <summary>
            Loads xmldoc documentation (from an xml file generated by the C# compiler).
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.XmlDoc.Types">
            <summary>
            All the types in the xml doc.
            </summary>
        </member>
        <member name="M:Api.AvailableEndpoints.XmlDoc.#ctor">
            <summary>
            Create a new xml doc.
            </summary>
        </member>
        <member name="M:Api.AvailableEndpoints.XmlDoc.LoadFrom(System.String)">
            <summary>
            Loads this from xml in the given file.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Api.AvailableEndpoints.XmlDoc.AddMemberDoc(System.Xml.XmlElement)">
            <summary>
            Adds a member to this with details from the given xml element.
            Creates the type if it's needed.
            </summary>
            <param name="ele"></param>
        </member>
        <member name="M:Api.AvailableEndpoints.XmlDoc.GetType(System.String,System.Boolean)">
            <summary>
            Get a type by its fully qualified name (incl. its namespace).
            </summary>
            <param name="typeName"></param>
            <param name="create"></param>
            <returns></returns>
        </member>
        <member name="T:Api.AvailableEndpoints.XmlDocMemberType">
            <summary>
            The various types of member in an xml doc.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.XmlDocMemberType.Field">
            <summary>
            The member is a field.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.XmlDocMemberType.Property">
            <summary>
            The member is a property.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.XmlDocMemberType.Method">
            <summary>
            The member is a method.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.XmlDocMemberType.Type">
            <summary>
            The member is a type.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.XmlDocMemberType.Parameter">
            <summary>
            The member is a method parameter.
            </summary>
        </member>
        <member name="T:Api.AvailableEndpoints.XmlDocMember">
            <summary>
            A member in an type.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.XmlDocMember.Summary">
            <summary>
            The summary for this member.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.XmlDocMember.Name">
            <summary>
            The name of this member.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.XmlDocMember.Type">
            <summary>
            The type of this member.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.XmlDocMember.Parameters">
            <summary>
            The members in this type.
            </summary>
        </member>
        <member name="M:Api.AvailableEndpoints.XmlDocMember.GetParameter(System.String)">
            <summary>
            Gets info about a parameter (if this member is a method).
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.AvailableEndpoints.XmlDocMember.AddParameter(Api.AvailableEndpoints.XmlDocMember)">
            <summary>
            Adds the given member as a parameter.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:Api.AvailableEndpoints.XmlDocType">
            <summary>
            A type in an xml doc.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.XmlDocType.Summary">
            <summary>
            The summary of this type.
            </summary>
        </member>
        <member name="F:Api.AvailableEndpoints.XmlDocType.Members">
            <summary>
            The members in this type.
            </summary>
        </member>
        <member name="M:Api.AvailableEndpoints.XmlDocType.GetMember(System.String)">
            <summary>
            Gets a member. Null if it doesn't exist.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Permissions.Capabilities">
            <summary>
            Capabilities are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
            <summary>
            This permissions system is roles/ capabilities based:
            * Users have one role.
            * A role is defined by a set of capabilities granted to it.
            * Functionality checks to see if a user has a particular capability.
            
            Capabilities are instanced automatically. 
            You can however specify a custom type or instance them yourself if you'd like to do so.
            </summary>
        </member>
        <member name="F:Api.Permissions.Capabilities.AvailableEndpointList">
            <summary>
            Ability to list all endpoints.
            </summary>
        </member>
        <member name="M:Api.Permissions.Capabilities.GetAllCurrent">
            <summary>
            Get all the current capabilities. If you need to know when capabilities are created or destroyed, use  Events.Service Create and Delete.
            </summary>
        </member>
        <member name="T:Api.Permissions.FilterAst`2">
            <summary>
            A tree of parsed filter nodes.
            </summary>
            <summary>
            A tree of parsed filter nodes.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
        </member>
        <member name="M:Api.Permissions.FilterAst`2.ToSql(MySql.Data.MySqlClient.MySqlCommand,Api.SocketServerLibrary.Writer,Api.Startup.IDCollector@,System.String,Api.Permissions.Filter{`0,`1},Api.Contexts.Context)">
            <summary>
            Steps through this tree, building an SQL-format where query. Very similar to how it actually starts out.
            Note that if it encounters an array node, it will immediately resolve the value using values stored in the given filter instance.
            </summary>
            <param name="cmd"></param>
            <param name="writer"></param>
            <param name="collectors"></param>
            <param name="localeCode"></param>
            <param name="filter"></param>
            <param name="context"></param>
        </member>
        <member name="F:Api.Permissions.FilterAst`2.Collectors">
            <summary>
            Fields that will require ID collectors (if any - can be null).
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterAst`2.Root">
            <summary>
            Root node.
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterAst`2.AllowConstants">
            <summary>
            True if constant values are permitted. They're disabled for frontend users to avoid 
            potentially vast quantities of apparent unique filters, heavily damaging our ability to optimise them.
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterAst`2.AllowArgs">
            <summary>
            True if args ('?') are allowed in this filter.
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterAst`2.Query">
            <summary>
            The query str
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterAst`2.Index">
            <summary>
            Current index in the query
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterAst`2.ArgIndex">
            <summary>
            Current arg index.
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterAst`2.Service">
            <summary>
            The autoservice.
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterAst`2.Args">
            <summary>
            The bound args, available after calling ConstructType.
            </summary>
        </member>
        <member name="M:Api.Permissions.FilterAst`2.#ctor(System.String)">
            <summary>
            Create an ast for the given query string.
            </summary>
            <param name="q"></param>
        </member>
        <member name="F:Api.Permissions.FilterAst`2.BindStringMethod">
            <summary>
            The BindFromString method
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterAst`2.CollectMethod">
            <summary>
            ValueTask Collect(Context context, AutoService mappingService, int collectorId, IDCollector collector)
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterAst`2._strTypeInArray">
            <summary>
            an array of just typeof(string)
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterAst`2.Mappings">
            <summary>
            The set of mappings in this AST.
            </summary>
        </member>
        <member name="M:Api.Permissions.FilterAst`2.EmitReadValue(System.Reflection.Emit.ILGenerator,Api.Permissions.FilterTreeNode{`0,`1},System.Type,System.Boolean)">
            <summary>
            Emits a read field value for the given node into the given generator.
            </summary>
            <param name="generator"></param>
            <param name="node"></param>
            <param name="fieldType"></param>
            <param name="unwrapNullables"></param>
        </member>
        <member name="M:Api.Permissions.FilterAst`2.DeclareCollector(Api.Startup.ContentField,Api.Permissions.FilterTreeNode{`0,`1},System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            Adds a collector to the set. Field must be a virtual ListAs field.
            </summary>
        </member>
        <member name="M:Api.Permissions.FilterAst`2.DeclareArg(System.Int32,System.Type)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="argType"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterAst`2.ConsumeWhitespace">
            <summary>
            Skips whitespaces
            </summary>
        </member>
        <member name="M:Api.Permissions.FilterAst`2.Peek">
            <summary>
            Peeks the next char
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterAst`2.GetIndexable">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterAst`2.HasArrayNodes">
            <summary>
            True if there's any array args or Id collectors.
            </summary>
        </member>
        <member name="M:Api.Permissions.FilterAst`2.ConstructType">
            <summary>
            
            </summary>
            <returns>hasArrayNodes is true if there are any collector nodes or [?] args</returns>
        </member>
        <member name="M:Api.Permissions.FilterAst`2.More">
            <summary>
            True if there's more tokens
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterAst`2.Peek(System.Int32)">
            <summary>
            Peeks the next char
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterAst`2.SubstringFrom(System.Int32)">
            <summary>
            Substring from given index to the current index (inclusive of the char at both start + index).
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterAst`2.ParseAny(System.Int32)">
            <summary>
            Parse a token in the tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterAst`2.ParseOp">
            <summary>
            Parse an operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterAst`2.ParseValue">
            <summary>
            Parses a constant-like value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterAst`2.ReadString(System.Char,System.Boolean)">
            <summary>
            Read a string from this AST
            </summary>
            <param name="terminal"></param>
            <param name="allowConstants"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterAst`2.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="T:Api.Permissions.Filter`2">
            <summary>
            Fast precompiled non-allocating filter engine.
            </summary>
            <summary>
            Fast precompiled non-allocating filter engine.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.BuildWhereQuery(MySql.Data.MySqlClient.MySqlCommand,Api.SocketServerLibrary.Writer,Api.Startup.IDCollector,System.String,Api.Contexts.Context,Api.Permissions.FilterBase)">
            <summary>Builds an SQL Where query.</summary>
            <param name="cmd"></param>
            <param name="builder"></param>
            <param name="currentCollector"></param>
            <param name="context"></param>
            <param name="filterA"></param>
            <param name="localeCode">Optional localeCode used when a request is for e.g. French fields instead. 
            It would be e.g. "fr" and just matches whatever your Locale.Code is.</param>
        </member>
        <member name="F:Api.Permissions.Filter`2.IsIncluded">
            <summary>
            True if we're in an inclusion context.
            </summary>
        </member>
        <member name="F:Api.Permissions.Filter`2.Pool">
            <summary>
            The pool that the object came from.
            </summary>
        </member>
        <member name="F:Api.Permissions.Filter`2._arg">
            <summary>
            Current arg offset.
            </summary>
        </member>
        <member name="P:Api.Permissions.Filter`2.NextBindType">
            <summary>
            The type of the next arg to bind. Null if there are no more args.
            </summary>
        </member>
        <member name="P:Api.Permissions.Filter`2.RequiresSetup">
            <summary>
            True if this filter requires Setup() to be called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Filter`2.Setup">
            <summary>
            Call this to perform any async setup. Must ensure this has been done before attempting Match.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.GetMap(System.Int32)">
            <summary>
            Gets the map at the given index. Is always a mappingservice, 
            and is setup before this ever gets invoked provided GetResults is used with the filter.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Filter`2.FullyBound">
            <summary>
            True if every arg has been bound.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Filter`2.Collect(Api.Contexts.Context,AutoService,System.Int32,Api.Startup.IDCollector)">
            <summary>
            Collects using the given service and the given collectorId. The ID determines which field is read.
            </summary>
            <param name="context"></param>
            <param name="mappingService"></param>
            <param name="collectorId"></param>
            <param name="collector"></param>
        </member>
        <member name="M:Api.Permissions.Filter`2.RentAndCollect(Api.Contexts.Context,AutoService)">
            <summary>
            Rents the set of ID collectors needed for handling various types of map.
            </summary>
            <param name="context"></param>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Filter`2.Release">
            <summary>
            Return back to pool.
            </summary>
        </member>
        <member name="F:Api.Permissions.Filter`2.Empty">
            <summary>
            True if this filter will always be true.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.HasAny``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            True if the given iterator has the given value in it
            </summary>
            <typeparam name="IT"></typeparam>
            <param name="value"></param>
            <param name="vals"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Filter`2.GetArgTypes">
            <summary>
            Gets the set of argument types for this filter. Can be null if there are none.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Filter`2.GetField(System.String)">
            <summary>
            Gets a field in the type by its textual name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Filter`2.GetQuery">
            <summary>
            Gets the query for this filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Filter`2.Reset">
            <summary>
            Reset arg bind.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.CollectFail">
            <summary>
            Called when no collectors were able to answer a collect request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Filter`2.Fail(System.Type)">
            <summary>
            Indicates a bind failure has happened.
            </summary>
            <param name="type"></param>
        </member>
        <member name="F:Api.Permissions.Filter`2.DataOptions">
            <summary>
            Data options for this filter.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.ListAll(Api.Contexts.Context,System.Func{Api.Contexts.Context,`0,System.Int32,System.Object,System.Object,System.Threading.Tasks.ValueTask},System.Object,System.Object)">
            <summary>
            Execute this filter now, obtaining an allocated list of results. 
            Consider using the callback overload instead if you wish to avoid the list allocation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Filter`2.Any(Api.Contexts.Context)">
            <summary>
            Convenience function for getting a true if there are any results, or false if there were none.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Filter`2.First(Api.Contexts.Context)">
            <summary>
            Convenience function for getting the first result, or null.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Filter`2.Last(Api.Contexts.Context)">
            <summary>
            Convenience function for getting the last result, or null.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Filter`2.Count(Api.Contexts.Context)">
            <summary>
            Execute this filter now, obtaining a count using an allocated delegate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Filter`2.ListAll(Api.Contexts.Context)">
            <summary>
            Execute this filter now, obtaining an allocated list of results. 
            Consider using the callback overload instead if you wish to avoid the list allocation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Object)">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.BindUnknown(System.Object)">
            <summary>
            Binds the current arg using the given textual representation.
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="M:Api.Permissions.Filter`2.BindUnknown(System.String)">
            <summary>
            Binds the current arg using the given textual representation.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Api.Permissions.Filter`2.BindFromString(System.String)">
            <summary>
            Binds the current arg using the given textual representation.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Api.Permissions.Filter`2.Page(System.Int32,System.Int32)">
            <summary>
            A convenience variant of SetPage which returns a stronger typed filter.
            </summary>
            <param name="offset"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.String)">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Double)">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Single)">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Decimal)">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.DateTime)">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Boolean)">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.UInt64)">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Int64)">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.UInt32)">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Int32)">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.UInt16)">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Int16)">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Byte)">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.SByte)">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Nullable{System.Double})">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Nullable{System.Single})">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Nullable{System.Decimal})">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Nullable{System.DateTime})">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Nullable{System.Boolean})">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Nullable{System.UInt64})">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Nullable{System.Int64})">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Nullable{System.UInt32})">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Nullable{System.Int32})">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Nullable{System.UInt16})">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Nullable{System.Int16})">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Nullable{System.Byte})">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="M:Api.Permissions.Filter`2.Bind(System.Nullable{System.SByte})">
            <summary>
            Binds given value to current argument.
            </summary>
        </member>
        <member name="T:Api.Permissions.FilterBase">
            <summary>
            A filter. Use the concrete-type variant as much as possible.
            </summary>
            <summary>
            A filter. Use the concrete-type variant as much as possible.
            </summary>
        </member>
        <member name="M:Api.Permissions.FilterBase.BuildWhereQuery(MySql.Data.MySqlClient.MySqlCommand,Api.SocketServerLibrary.Writer,Api.Startup.IDCollector,System.String,Api.Contexts.Context,Api.Permissions.FilterBase)">
            <summary>Builds an SQL Where query.</summary>
            <param name="cmd"></param>
            <param name="builder"></param>
            <param name="currentCollector"></param>
            <param name="context"></param>
            <param name="filterA"></param>
            <param name="localeCode">Optional localeCode used when a request is for e.g. French fields instead. 
            It would be e.g. "fr" and just matches whatever your Locale.Code is.</param>
        </member>
        <member name="F:Api.Permissions.FilterBase.PageSize">
            <summary>
            Results per page. If 0, there's no limitation.
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterBase.Offset">
            <summary>
            0 based starting offset (In number of records).
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterBase.IncludeTotal">
            <summary>
            True if the total # of results should be included. Results in potentially large scans.
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterBase.SortField">
            <summary>
            The field to sort by. Must be a field (can't be a virtual or property).
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterBase.SortAscending">
            <summary>
            True if this should sort ascending.
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterBase.FirstCollector">
            <summary>
            First IDcollector for filter A. Both chains are stored on filterA as it's user specific.
            </summary>
        </member>
        <member name="P:Api.Permissions.FilterBase.RequiresSetup">
            <summary>
            True if this filter requires Setup() to be called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterBase.Setup">
            <summary>
            Call this to perform any async setup. Must ensure this has been done before attempting Match.
            </summary>
        </member>
        <member name="M:Api.Permissions.FilterBase.NullCheck(System.String)">
            <summary>
            Errors when a null is given for a non-nullable field.
            </summary>
        </member>
        <member name="M:Api.Permissions.FilterBase.Release">
            <summary>
            Return to pool it came from
            </summary>
        </member>
        <member name="M:Api.Permissions.FilterBase.BindUnknown(System.String)">
            <summary>
            Binds the current arg using the given textual representation.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Api.Permissions.FilterBase.BindUnknown(System.Object)">
            <summary>
            Binds the current arg using the given textual representation.
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="M:Api.Permissions.FilterBase.GetArgTypes">
            <summary>
            Gets the set of argument types for this filter. Can be null if there are none.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterBase.BuildOrderLimitQuery(Api.SocketServerLibrary.Writer,System.String)">
            <summary>
            Builds this filter node as a query string, writing it into the given string builder.
            If a variable is outputted then a value reader is pushed in the given arg set.
            </summary>
            <param name="builder"></param>
            <param name="localeCode">Optional localeCode used when a request is for e.g. French fields instead. 
            It would be e.g. "fr" and just matches whatever your Locale.Code is.</param>
        </member>
        <member name="M:Api.Permissions.FilterBase.SetPage(System.Int32,System.Int32)">
            <summary>
            use this to paginate (or restrict result counts) for large filters.
            </summary>
            <param name="pageIndex">0 based page index.</param>
            <param name="pageSize">The amount of results per page, or 50 if not specified. 
            If you specifically set this to 0, pageIndex acts like an offset (i.e. 10 meaning skip the first 10 results).</param>
        </member>
        <member name="M:Api.Permissions.FilterBase.Sort(System.String,System.Boolean)">
            <summary>
            Sort this filter by the given field name from the filters default type.
            </summary>
            <param name="fieldName">Name of field to sort by.</param>
            <param name="ascending">True if should sort in ascending order (true is default).</param>
        </member>
        <member name="M:Api.Permissions.FilterBase.GetField(System.String)">
            <summary>
            Gets a field in the type by its textual name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterBase.Match(Api.Contexts.Context,System.Object,System.Boolean)">
            <summary>
            Test if the given object passes this filter.
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="isIncluded">True if the match is taking place within an inclusion context.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterBase.GetQuery">
            <summary>
            Gets the query for this filter.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Permissions.FilterTreeNode`2">
            <summary>
            Base tree node
            </summary>
            <summary>
            Base tree node
            </summary>
        </member>
        <member name="M:Api.Permissions.FilterTreeNode`2.ToSql(MySql.Data.MySqlClient.MySqlCommand,Api.SocketServerLibrary.Writer,Api.Startup.IDCollector@,System.String,Api.Permissions.Filter{`0,`1},Api.Contexts.Context)">
            <summary>
            Steps through this tree, building an SQL-format where query. Very similar to how it actually starts out.
            Note that if it encounters an array node, it will immediately resolve the value using values stored in the given filter instance.
            </summary>
            <param name="cmd"></param>
            <param name="writer"></param>
            <param name="collectors"></param>
            <param name="localeCode"></param>
            <param name="filter"></param>
            <param name="context"></param>
        </member>
        <member name="M:Api.Permissions.FilterTreeNode`2.HasRootedOnStatement">
            <summary>
            True if the node has an on statement.
            Most nodes return false - only and will accept one as a child.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterTreeNode`2.Emit(System.Reflection.Emit.ILGenerator,Api.Permissions.FilterAst{`0,`1})">
            <summary>
            
            </summary>
            <param name="generator"></param>
            <param name="ast"></param>
        </member>
        <member name="M:Api.Permissions.FilterTreeNode`2.ToString(System.Text.StringBuilder)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.FilterTreeNode`2.GetIndexable">
            <summary>
            If not null, this node is indexable (using the given indices).
            When more than one is returned, it's because it is a union of all the id's in those indices.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Permissions.MappingFilterTreeNode`2">
            <summary>
            A node which is true if a mapping exists. This node is why mappings are cached as it expects to resolve instantly.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
        </member>
        <member name="F:Api.Permissions.MappingFilterTreeNode`2.MappingTableName">
            <summary>
            Mapping table name.
            </summary>
        </member>
        <member name="M:Api.Permissions.MappingFilterTreeNode`2.GetMappingTableName(System.Type,System.Type,System.String)">
            <summary>
            Gets just the table name.
            </summary>
            <param name="src"></param>
            <param name="target"></param>
            <param name="listAs"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.MappingFilterTreeNode`2.ToSql(MySql.Data.MySqlClient.MySqlCommand,Api.SocketServerLibrary.Writer,Api.Startup.IDCollector@,System.String,Api.Permissions.Filter{`0,`1},Api.Contexts.Context)">
            <summary>
            Steps through this tree, building an SQL-format where query. Very similar to how it actually starts out.
            Note that if it encounters an array node, it will immediately resolve the value using values stored in the given filter instance.
            </summary>
            <param name="cmd"></param>
            <param name="writer"></param>
            <param name="collectors"></param>
            <param name="localeCode"></param>
            <param name="filter"></param>
            <param name="context"></param>
        </member>
        <member name="M:Api.Permissions.MappingFilterTreeNode`2.OutputArg(MySql.Data.MySqlClient.MySqlCommand,Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Attempts to output an arg for a particular value. If the value is null, this returns false. You must use "is null" syntax instead.
            </summary>
            <param name="cmd"></param>
            <param name="writer"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="F:Api.Permissions.MappingFilterTreeNode`2.Index">
            <summary>
            Index of this mapping in the Ast.Mappings set.
            </summary>
        </member>
        <member name="F:Api.Permissions.MappingFilterTreeNode`2.SourceMapping">
            <summary>
            True if the thing we are checking for a mapping with is the source object (meaning "this" is a target).
            </summary>
        </member>
        <member name="F:Api.Permissions.MappingFilterTreeNode`2.TypeName">
            <summary>
            The name of the type at the other end of the mapping, e.g. Video
            </summary>
        </member>
        <member name="F:Api.Permissions.MappingFilterTreeNode`2.Id">
            <summary>
            The node where the ID will come from.
            </summary>
        </member>
        <member name="F:Api.Permissions.MappingFilterTreeNode`2.MapName">
            <summary>
            Optional map name. If null, primary map is used.
            </summary>
        </member>
        <member name="F:Api.Permissions.MappingFilterTreeNode`2.ThisService">
            <summary>
            The service for type T.
            </summary>
        </member>
        <member name="F:Api.Permissions.MappingFilterTreeNode`2.OtherService">
            <summary>
            The other service (it'll either be target service, or source service, depending on SourceMapping).
            </summary>
        </member>
        <member name="F:Api.Permissions.MappingFilterTreeNode`2.Binding">
            <summary>
            The mapping binding which stores the resolved map.
            </summary>
        </member>
        <member name="F:Api.Permissions.MappingFilterTreeNode`2.ListAsField">
            <summary>
            The underlying ListAsField to use. Set automatically.
            </summary>
        </member>
        <member name="F:Api.Permissions.MappingFilterTreeNode`2.TargetField">
            <summary>
            Set automatically. Exists if the ListAs field on this pair of types has a field shortcut (null if it is a full mapping).
            </summary>
        </member>
        <member name="F:Api.Permissions.MappingFilterTreeNode`2.IsOn">
            <summary>
            True if this is an On(..) node
            </summary>
        </member>
        <member name="M:Api.Permissions.MappingFilterTreeNode`2.HasRootedOnStatement">
            <summary>
            True if the node has an on statement.
            Most nodes return false - only and will accept one as a child.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.MappingFilterTreeNode`2.Emit(System.Reflection.Emit.ILGenerator,Api.Permissions.FilterAst{`0,`1})">
            <summary>
            
            </summary>
            <param name="generator"></param>
            <param name="ast"></param>
        </member>
        <member name="M:Api.Permissions.MappingFilterTreeNode`2.Add(Api.Permissions.FilterAst{`0,`1})">
            <summary>
            Add this node to the given AST.
            </summary>
            <param name="ast"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.MappingFilterTreeNode`2.ToString(System.Text.StringBuilder)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Api.Permissions.OpFilterTreeNode`2">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.Permissions.OpFilterTreeNode`2._generator">
            <summary>
            A generator for making IN(..) strings for arrays.
            </summary>
        </member>
        <member name="M:Api.Permissions.OpFilterTreeNode`2.ToSql(MySql.Data.MySqlClient.MySqlCommand,Api.SocketServerLibrary.Writer,Api.Startup.IDCollector@,System.String,Api.Permissions.Filter{`0,`1},Api.Contexts.Context)">
            <summary>
            Steps through this tree, building an SQL-format where query. Very similar to how it actually starts out.
            Note that if it encounters an array node, it will immediately resolve the value using values stored in the given filter instance.
            </summary>
            <param name="cmd"></param>
            <param name="writer"></param>
            <param name="collectors"></param>
            <param name="localeCode"></param>
            <param name="filter"></param>
            <param name="context"></param>
        </member>
        <member name="M:Api.Permissions.OpFilterTreeNode`2.OutputArg(MySql.Data.MySqlClient.MySqlCommand,Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Attempts to output an arg for a particular value. If the value is null, this returns false. You must use "is null" syntax instead.
            </summary>
            <param name="cmd"></param>
            <param name="writer"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="F:Api.Permissions.OpFilterTreeNode`2._strEquals">
            <summary>
            string.Equals static method
            </summary>
        </member>
        <member name="F:Api.Permissions.OpFilterTreeNode`2._strStartsWith">
            <summary>
            string.StartsWith(str) static method
            </summary>
        </member>
        <member name="F:Api.Permissions.OpFilterTreeNode`2._strEndsWith">
            <summary>
            string.EndsWith(str) static method
            </summary>
        </member>
        <member name="F:Api.Permissions.OpFilterTreeNode`2._strContains">
            <summary>
            string.Contains(str) method
            </summary>
        </member>
        <member name="F:Api.Permissions.OpFilterTreeNode`2.A">
            <summary>
            Node a
            </summary>
        </member>
        <member name="F:Api.Permissions.OpFilterTreeNode`2.B">
            <summary>
            Node b
            </summary>
        </member>
        <member name="F:Api.Permissions.OpFilterTreeNode`2.Operation">
            <summary>
            The actual operation (lowercase)
            </summary>
        </member>
        <member name="M:Api.Permissions.OpFilterTreeNode`2.IsLogic">
            <summary>
            True if this is a logic operation
            </summary>
        </member>
        <member name="M:Api.Permissions.OpFilterTreeNode`2.HasRootedOnStatement">
            <summary>
            True if the node has an on statement.
            Most nodes return false - only and will accept one as a child.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.OpFilterTreeNode`2.Emit(System.Reflection.Emit.ILGenerator,Api.Permissions.FilterAst{`0,`1})">
            <summary>
            
            </summary>
            <param name="generator"></param>
            <param name="ast"></param>
        </member>
        <member name="M:Api.Permissions.OpFilterTreeNode`2.ToString(System.Text.StringBuilder)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.OpFilterTreeNode`2.GetIndexable">
            <summary>
            If not null, this node is indexable (using the given indices).
            When more than one is returned, it's because it is a union of all the id's in those indices.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Permissions.MemberFilterTreeNode`2">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.MemberFilterTreeNode`2.ToSql(MySql.Data.MySqlClient.MySqlCommand,Api.SocketServerLibrary.Writer,Api.Startup.IDCollector@,System.String,Api.Permissions.Filter{`0,`1},Api.Contexts.Context)">
            <summary>
            Steps through this tree, building an SQL-format where query. Very similar to how it actually starts out.
            Note that if it encounters an array node, it will immediately resolve the value using values stored in the given filter instance.
            </summary>
            <param name="cmd"></param>
            <param name="writer"></param>
            <param name="collectors"></param>
            <param name="localeCode"></param>
            <param name="filter"></param>
            <param name="context"></param>
        </member>
        <member name="F:Api.Permissions.MemberFilterTreeNode`2.Name">
            <summary>
            The member name
            </summary>
        </member>
        <member name="F:Api.Permissions.MemberFilterTreeNode`2.Field">
            <summary>
            The field to use.
            </summary>
        </member>
        <member name="F:Api.Permissions.MemberFilterTreeNode`2.ContextField">
            <summary>
            The field to use (if it's a context one).
            </summary>
        </member>
        <member name="P:Api.Permissions.MemberFilterTreeNode`2.IsMethod">
            <summary>
            True if this is a method call.
            </summary>
        </member>
        <member name="F:Api.Permissions.MemberFilterTreeNode`2.Args">
            <summary>
            If method call, the args
            </summary>
        </member>
        <member name="F:Api.Permissions.MemberFilterTreeNode`2.OnContext">
            <summary>
            True if this is a context field.
            </summary>
        </member>
        <member name="F:Api.Permissions.MemberFilterTreeNode`2.Collect">
            <summary>
            True if this field should be collected with an ID collector.
            </summary>
        </member>
        <member name="M:Api.Permissions.MemberFilterTreeNode`2.ToString(System.Text.StringBuilder)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.MemberFilterTreeNode`2.Parse(Api.Permissions.FilterAst{`0,`1})">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.MemberFilterTreeNode`2.Resolve(Api.Permissions.FilterAst{`0,`1})">
            <summary>
            Resolves the field/ method from the name
            </summary>
            <param name="ast"></param>
        </member>
        <member name="T:Api.Permissions.IsIncludedFilterTreeNode`2">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.IsIncludedFilterTreeNode`2.ToSql(MySql.Data.MySqlClient.MySqlCommand,Api.SocketServerLibrary.Writer,Api.Startup.IDCollector@,System.String,Api.Permissions.Filter{`0,`1},Api.Contexts.Context)">
            <summary>
            Steps through this tree, building an SQL-format where query. Very similar to how it actually starts out.
            Note that if it encounters an array node, it will immediately resolve the value using values stored in the given filter instance.
            </summary>
            <param name="cmd"></param>
            <param name="writer"></param>
            <param name="collectors"></param>
            <param name="localeCode"></param>
            <param name="filter"></param>
            <param name="context"></param>
        </member>
        <member name="M:Api.Permissions.IsIncludedFilterTreeNode`2.ToString(System.Text.StringBuilder)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.IsIncludedFilterTreeNode`2.Emit(System.Reflection.Emit.ILGenerator,Api.Permissions.FilterAst{`0,`1})">
            <summary>
            
            </summary>
            <param name="generator"></param>
            <param name="ast"></param>
        </member>
        <member name="T:Api.Permissions.StringFilterTreeNode`2">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.StringFilterTreeNode`2.ToSql(MySql.Data.MySqlClient.MySqlCommand,Api.SocketServerLibrary.Writer,Api.Startup.IDCollector@,System.String,Api.Permissions.Filter{`0,`1},Api.Contexts.Context)">
            <summary>
            Steps through this tree, building an SQL-format where query. Very similar to how it actually starts out.
            Note that if it encounters an array node, it will immediately resolve the value using values stored in the given filter instance.
            </summary>
            <param name="cmd"></param>
            <param name="writer"></param>
            <param name="collectors"></param>
            <param name="localeCode"></param>
            <param name="filter"></param>
            <param name="context"></param>
        </member>
        <member name="F:Api.Permissions.StringFilterTreeNode`2.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.StringFilterTreeNode`2.AsInt">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.StringFilterTreeNode`2.AsString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.StringFilterTreeNode`2.AsDecimal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.StringFilterTreeNode`2.AsBool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.StringFilterTreeNode`2.ToString(System.Text.StringBuilder)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.StringFilterTreeNode`2.Emit(System.Reflection.Emit.ILGenerator,Api.Permissions.FilterAst{`0,`1})">
            <summary>
            
            </summary>
            <param name="generator"></param>
            <param name="ast"></param>
        </member>
        <member name="T:Api.Permissions.NumberFilterTreeNode`2">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.NumberFilterTreeNode`2.ToSql(MySql.Data.MySqlClient.MySqlCommand,Api.SocketServerLibrary.Writer,Api.Startup.IDCollector@,System.String,Api.Permissions.Filter{`0,`1},Api.Contexts.Context)">
            <summary>
            Steps through this tree, building an SQL-format where query. Very similar to how it actually starts out.
            Note that if it encounters an array node, it will immediately resolve the value using values stored in the given filter instance.
            </summary>
            <param name="cmd"></param>
            <param name="writer"></param>
            <param name="collectors"></param>
            <param name="localeCode"></param>
            <param name="filter"></param>
            <param name="context"></param>
        </member>
        <member name="F:Api.Permissions.NumberFilterTreeNode`2.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.NumberFilterTreeNode`2.AsInt">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.NumberFilterTreeNode`2.AsString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.NumberFilterTreeNode`2.AsDecimal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.NumberFilterTreeNode`2.AsBool">
            <summary>
            
            </summary>
        </member>
        <member name="T:Api.Permissions.DecimalFilterTreeNode`2">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.DecimalFilterTreeNode`2.ToSql(MySql.Data.MySqlClient.MySqlCommand,Api.SocketServerLibrary.Writer,Api.Startup.IDCollector@,System.String,Api.Permissions.Filter{`0,`1},Api.Contexts.Context)">
            <summary>
            Steps through this tree, building an SQL-format where query. Very similar to how it actually starts out.
            Note that if it encounters an array node, it will immediately resolve the value using values stored in the given filter instance.
            </summary>
            <param name="cmd"></param>
            <param name="writer"></param>
            <param name="collectors"></param>
            <param name="localeCode"></param>
            <param name="filter"></param>
            <param name="context"></param>
        </member>
        <member name="F:Api.Permissions.DecimalFilterTreeNode`2.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.DecimalFilterTreeNode`2.AsInt">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.DecimalFilterTreeNode`2.AsString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.DecimalFilterTreeNode`2.AsDecimal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.DecimalFilterTreeNode`2.AsBool">
            <summary>
            
            </summary>
        </member>
        <member name="T:Api.Permissions.BoolFilterTreeNode`2">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.BoolFilterTreeNode`2.ToSql(MySql.Data.MySqlClient.MySqlCommand,Api.SocketServerLibrary.Writer,Api.Startup.IDCollector@,System.String,Api.Permissions.Filter{`0,`1},Api.Contexts.Context)">
            <summary>
            Steps through this tree, building an SQL-format where query. Very similar to how it actually starts out.
            Note that if it encounters an array node, it will immediately resolve the value using values stored in the given filter instance.
            </summary>
            <param name="cmd"></param>
            <param name="writer"></param>
            <param name="collectors"></param>
            <param name="localeCode"></param>
            <param name="filter"></param>
            <param name="context"></param>
        </member>
        <member name="F:Api.Permissions.BoolFilterTreeNode`2.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.BoolFilterTreeNode`2.AsInt">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.BoolFilterTreeNode`2.AsString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.BoolFilterTreeNode`2.AsDecimal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.BoolFilterTreeNode`2.AsBool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.BoolFilterTreeNode`2.ToString(System.Text.StringBuilder)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.BoolFilterTreeNode`2.Emit(System.Reflection.Emit.ILGenerator,Api.Permissions.FilterAst{`0,`1})">
            <summary>
            
            </summary>
            <param name="generator"></param>
            <param name="ast"></param>
        </member>
        <member name="T:Api.Permissions.NullFilterTreeNode`2">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.NullFilterTreeNode`2.ToSql(MySql.Data.MySqlClient.MySqlCommand,Api.SocketServerLibrary.Writer,Api.Startup.IDCollector@,System.String,Api.Permissions.Filter{`0,`1},Api.Contexts.Context)">
            <summary>
            Steps through this tree, building an SQL-format where query. Very similar to how it actually starts out.
            Note that if it encounters an array node, it will immediately resolve the value using values stored in the given filter instance.
            </summary>
            <param name="cmd"></param>
            <param name="writer"></param>
            <param name="collectors"></param>
            <param name="localeCode"></param>
            <param name="filter"></param>
            <param name="context"></param>
        </member>
        <member name="M:Api.Permissions.NullFilterTreeNode`2.AsString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.NullFilterTreeNode`2.ToString(System.Text.StringBuilder)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.NullFilterTreeNode`2.Emit(System.Reflection.Emit.ILGenerator,Api.Permissions.FilterAst{`0,`1})">
            <summary>
            
            </summary>
            <param name="generator"></param>
            <param name="ast"></param>
        </member>
        <member name="T:Api.Permissions.ArgFilterTreeNode`2">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.Permissions.ArgFilterTreeNode`2._generator">
            <summary>
            A generator for making IN(..) strings for arrays.
            </summary>
        </member>
        <member name="M:Api.Permissions.ArgFilterTreeNode`2.ToSql(MySql.Data.MySqlClient.MySqlCommand,Api.SocketServerLibrary.Writer,Api.Startup.IDCollector@,System.String,Api.Permissions.Filter{`0,`1},Api.Contexts.Context)">
            <summary>
            Steps through this tree, building an SQL-format where query. Very similar to how it actually starts out.
            Note that if it encounters an array node, it will immediately resolve the value using values stored in the given filter instance.
            </summary>
            <param name="cmd"></param>
            <param name="writer"></param>
            <param name="collectors"></param>
            <param name="localeCode"></param>
            <param name="filter"></param>
            <param name="context"></param>
        </member>
        <member name="F:Api.Permissions.ArgFilterTreeNode`2.Id">
            <summary>
            Assigned arg ID
            </summary>
        </member>
        <member name="F:Api.Permissions.ArgFilterTreeNode`2.Array">
            <summary>
            True if the user wants to provide a set
            </summary>
        </member>
        <member name="F:Api.Permissions.ArgFilterTreeNode`2.Binding">
            <summary>
            The bound value.
            </summary>
        </member>
        <member name="M:Api.Permissions.ArgFilterTreeNode`2.ToString(System.Text.StringBuilder)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Api.Permissions.InStringGenerator`1">
            <summary>
            Helper for generating IN(..) strings from a wide variety of different IEnumerables, directly into a Writer.
            </summary>
        </member>
        <member name="F:Api.Permissions.InStringGenerator`1.NULL">
            <summary>
            Used to output null for nullable iterators.
            </summary>
        </member>
        <member name="T:Api.Permissions.InStringGenerator">
            <summary>
            Helper for generating IN(..) strings from a wide variety of different IEnumerables, directly into a Writer.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGenerator.Get(System.Type)">
            <summary>
            Gets a generator for the given IEnumerable or IDCollector type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.InStringGenerator.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="M:Api.Permissions.InStringGenerator.GenerateFromCollector(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given collector.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorString">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorString.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorDouble">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorDouble.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorDouble.GenerateFromCollector(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given collector.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorFloat">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorFloat.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorFloat.GenerateFromCollector(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given collector.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorDecimal">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorDecimal.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorDecimal.GenerateFromCollector(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given collector.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorBool">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorBool.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorBool.GenerateFromCollector(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given collector.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorULong">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorULong.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorULong.GenerateFromCollector(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given collector.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorLong">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorLong.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorLong.GenerateFromCollector(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given collector.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorUInt">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorUInt.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorUInt.GenerateFromCollector(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given collector.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorInt">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorInt.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorInt.GenerateFromCollector(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given collector.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorUShort">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorUShort.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorUShort.GenerateFromCollector(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given collector.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorShort">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorShort.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorShort.GenerateFromCollector(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given collector.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorByte">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorByte.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorByte.GenerateFromCollector(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given collector.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorSByte">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorSByte.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorSByte.GenerateFromCollector(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given collector.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorDoubleNullable">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorDoubleNullable.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorFloatNullable">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorFloatNullable.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorDecimalNullable">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorDecimalNullable.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorBoolNullable">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorBoolNullable.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorULongNullable">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorULongNullable.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorLongNullable">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorLongNullable.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorUIntNullable">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorUIntNullable.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorIntNullable">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorIntNullable.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorUShortNullable">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorUShortNullable.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorShortNullable">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorShortNullable.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorByteNullable">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorByteNullable.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.InStringGeneratorSByteNullable">
            <summary>
            An In(..) generator for a particular type of IEnumerable. 
            Use InStringGenerator.Get() instead of constructing these.
            </summary>
        </member>
        <member name="M:Api.Permissions.InStringGeneratorSByteNullable.Generate(Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the series of values for the given enumerable.
            </summary>
            <param name="writer"></param>
            <param name="vals"></param>
        </member>
        <member name="T:Api.Permissions.Capability">
            <summary>
            A particular capability. Functionality asks if capabilities are granted or not.
            Modules can define capabilities via simply extending the Capabilities class.
            </summary>
        </member>
        <member name="F:Api.Permissions.Capability._CurrentId">
            <summary>
            Current max assigned ID.
            </summary>
        </member>
        <member name="P:Api.Permissions.Capability.MaxCapId">
            <summary>
            Current max assigned ID.
            </summary>
        </member>
        <member name="F:Api.Permissions.Capability.Name">
            <summary>
            Capability string name. Of the form "lead_create". Always lowercase.
            </summary>
        </member>
        <member name="F:Api.Permissions.Capability.Feature">
            <summary>
            Just the feature. Of the form "create". Always lowercase.
            </summary>
        </member>
        <member name="F:Api.Permissions.Capability.InternalId">
            <summary>
            An index for high speed capability lookups within roles. 
            Not consistent across runs - don't store in the database. Use Name instead.
            </summary>
        </member>
        <member name="F:Api.Permissions.Capability.ContentType">
            <summary>
            The content type that this cap came from (if any).
            </summary>
        </member>
        <member name="F:Api.Permissions.Capability.Service">
            <summary>
            The service that it's on.
            </summary>
        </member>
        <member name="M:Api.Permissions.Capability.#ctor(AutoService,System.String)">
            <summary>
            Create a new capability.
            </summary>
            <param name ="service"></param>
            <param name="feature">
            Just the feature name, e.g. "List" or "Create".
            </param>
        </member>
        <member name="T:Api.Permissions.ContentIdLookup">
            <summary>
            A collection of content IDs along with an optional content type ID.
            </summary>
        </member>
        <member name="F:Api.Permissions.ContentIdLookup.ContentTypeId">
            <summary>
            The type ID of the content in this lookup.
            </summary>
        </member>
        <member name="F:Api.Permissions.ContentIdLookup.Lookup">
            <summary>
            Used to find content by ID.
            </summary>
        </member>
        <member name="M:Api.Permissions.ContentIdLookup.Contains(System.UInt32)">
            <summary>
            True if given ID is in the lookup.
            </summary>
        </member>
        <member name="M:Api.Permissions.ContentIdLookup.Add(System.UInt32)">
            <summary>
            Add content ID to lookup.
            </summary>
        </member>
        <member name="T:Api.Permissions.FilterFunctions">
            <summary>
            Functions that can be used in a filter. They are invoked during compilation and can output type specific things.
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterFunctions._methods">
            <summary>
            The available methods
            </summary>
        </member>
        <member name="M:Api.Permissions.FilterFunctions.Get``2(System.String)">
            <summary>
            Gets a filter function by its given lowercase name, or null if it wasn't found.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterFunctions.IsIncluded``2(Api.Permissions.MemberFilterTreeNode{``0,``1},Api.Permissions.FilterAst{``0,``1})">
            <summary>
            True if the filter is being executed via an inclusion.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
            <param name="node"></param>
            <param name="ast"></param>
        </member>
        <member name="M:Api.Permissions.FilterFunctions.On``2(Api.Permissions.MemberFilterTreeNode{``0,``1},Api.Permissions.FilterAst{``0,``1})">
            <summary>
            True for rows that have a mapping to the given target object.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
            <param name="node"></param>
            <param name="ast"></param>
        </member>
        <member name="M:Api.Permissions.FilterFunctions.IsSelfRole``2(Api.Permissions.MemberFilterTreeNode{``0,``1},Api.Permissions.FilterAst{``0,``1})">
            <summary>
            True if the given role object is a direct match, or it has a field called Role and matches.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
            <param name="node"></param>
            <param name="ast"></param>
        </member>
        <member name="M:Api.Permissions.FilterFunctions.IsSelf``2(Api.Permissions.MemberFilterTreeNode{``0,``1},Api.Permissions.FilterAst{``0,``1})">
            <summary>
            True if either the object is a User and is a direct match, or if this user is the creator user.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
            <param name="node"></param>
            <param name="ast"></param>
        </member>
        <member name="M:Api.Permissions.FilterFunctions.HasUserPermit``2(Api.Permissions.MemberFilterTreeNode{``0,``1},Api.Permissions.FilterAst{``0,``1})">
            <summary>
            True if the contextual user is the creator, or there is a "UserPermits" mapping of {Thing}->{Context.User}
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
            <param name="node"></param>
            <param name="ast"></param>
        </member>
        <member name="M:Api.Permissions.FilterFunctions.HasRolePermit``2(Api.Permissions.MemberFilterTreeNode{``0,``1},Api.Permissions.FilterAst{``0,``1})">
            <summary>
            True if there is a "RolePermits" mapping of {Thing}->{Context.Role}
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
            <param name="node"></param>
            <param name="ast"></param>
        </member>
        <member name="T:Api.Permissions.FilterAst">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterAst._firstCollector">
            <summary>
            FilterBase.FirstCollector
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterAst._baseNullCheck">
            <summary>
            FilterBase.NullCheck
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterAst._checkParseSuccess">
            <summary>
            FilterBase.CheckParseSuccess
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterAst._tryParseDate">
            <summary>
            FilterAst.TryParseDate
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterAst._collectSignature">
            <summary>
            The Type[] signature for generated Collect methods.
            </summary>
        </member>
        <member name="M:Api.Permissions.FilterAst.GuardedContains(System.String,System.String)">
            <summary>
            Performs a string.contains if both args are not null.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterAst.TryParseDate(System.String,System.DateTime@)">
            <summary>
            Date parsing. Supports numeric tick counts as well as actual date strings.
            </summary>
            <param name="s"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterAst.CheckParseSuccess(System.Boolean)">
            <summary>
            Checks if a TryParse was successful and if not emits a friendly error.
            Consumes a single bool from the stack.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Api.Permissions.FilterAst.Parse``2(AutoService{``0,``1},System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="q"></param>
            <param name="allowConstants"></param>
            <param name="allowArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Permissions.ArgBinding">
            <summary>
            Argument binding
            </summary>
        </member>
        <member name="F:Api.Permissions.ArgBinding.IsNullable">
            <summary>
            True if this arg can be null. Either it is not a valuetype, or it is a generic Nullable
            </summary>
        </member>
        <member name="F:Api.Permissions.ArgBinding.ArgType">
            <summary>
            Field type
            </summary>
        </member>
        <member name="F:Api.Permissions.ArgBinding.Builder">
            <summary>
            Underlying builder
            </summary>
        </member>
        <member name="F:Api.Permissions.ArgBinding.ConstructedField">
            <summary>
            Constructed field on target type
            </summary>
        </member>
        <member name="F:Api.Permissions.ArgBinding.BindMethod">
            <summary>
            The Bind() method for args of this same type.
            </summary>
        </member>
        <member name="F:Api.Permissions.ArgBinding.FirstMethodUser">
            <summary>
            True if this binding was the one that created the bind method. It'll be up to it to add the Ret.
            </summary>
        </member>
        <member name="T:Api.Permissions.MappingBinding`2">
            <summary>
            Raw mapping binding
            </summary>
        </member>
        <member name="F:Api.Permissions.MappingBinding`2.Node">
            <summary>
            The underlying node.
            </summary>
        </member>
        <member name="F:Api.Permissions.MappingBinding`2.Map">
            <summary>
            The mapping service, if there is one. Doesn't exist if this is a field only mapping and really just translates to Field=x.
            </summary>
        </member>
        <member name="M:Api.Permissions.MappingBinding`2.Setup">
            <summary>
            Resolves this node, collecting the mapping service to use.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Permissions.ConstFilterTreeNode`2">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.ConstFilterTreeNode`2.AsInt">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.ConstFilterTreeNode`2.AsString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.ConstFilterTreeNode`2.AsDecimal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.ConstFilterTreeNode`2.AsBool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Permissions.ConstFilterTreeNode`2.ToString(System.Text.StringBuilder)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Api.Permissions.QueryPair`2">
            <summary>
            A non-allocating mechanism for obtaining a list of things from a service.
            </summary>
        </member>
        <member name="F:Api.Permissions.QueryPair`2.QueryA">
            <summary>
            Primary user provided query. Will be effectively AND-ed with QueryB.
            </summary>
        </member>
        <member name="F:Api.Permissions.QueryPair`2.QueryB">
            <summary>
            Secondary query, pre-parsed. Originates from the permission system, and is not null.
            </summary>
        </member>
        <member name="F:Api.Permissions.QueryPair`2.Total">
            <summary>
            Total result count, when available.
            </summary>
        </member>
        <member name="F:Api.Permissions.QueryPair`2.Handled">
            <summary>
            True if anything has handled the request.
            </summary>
        </member>
        <member name="F:Api.Permissions.QueryPair`2.OnResult">
            <summary>
            Callback when the queries get a result
            </summary>
        </member>
        <member name="F:Api.Permissions.QueryPair`2.SrcA">
            <summary>
            Source a object.
            </summary>
        </member>
        <member name="F:Api.Permissions.QueryPair`2.SrcB">
            <summary>
            Source b object.
            </summary>
        </member>
        <member name="T:Api.Permissions.FilterMeta`2">
            <summary>
            Fast filter metadata.
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterMeta`2.Service">
            <summary>
            The service this filter is for
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterMeta`2._constructedType">
            <summary>
            The constructed filter type to use.
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterMeta`2.Ast">
            <summary>
            The AST for this filter.
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterMeta`2.CollectorMeta">
            <summary>
            Used when the filter has virtual field lists e.g. Tags=[?].
            The execution plan will first collect all the IDs of content that has the given tag(s) into one of these collectors.
            As this is just the metadata, this stores information about how to rent the collectors, rather than the collectors themselves.
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterMeta`2.HasRootedOn">
            <summary>
            True if the filter has a rooted On(..) statement. It can only be a child of an AND statement.
            </summary>
        </member>
        <member name="M:Api.Permissions.FilterMeta`2.#ctor(AutoService{`0,`1},System.String,System.Boolean)">
            <summary>
            Creates filter metadata for the given query pair.
            </summary>
        </member>
        <member name="P:Api.Permissions.FilterMeta`2.Query">
            <summary>
            The original query string.
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterMeta`2.ArgTypes">
            <summary>
            Type info for the args.
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterMeta`2.MappingBindings">
            <summary>
            Underlying mapping bindings (if any).
            </summary>
        </member>
        <member name="F:Api.Permissions.FilterMeta`2.MappingBindingsLoaded">
            <summary>
            True if the mapping bindings have been setup.
            </summary>
        </member>
        <member name="M:Api.Permissions.FilterMeta`2.SetupMappingBindingsRawTask">
            <summary>
            Underlying loop setting up each one
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterMeta`2.SetupMappingBindings">
            <summary>
            Ensures the mapping bindings are setup and ready to go. Essentially makes sure the actual mapping services are loaded and their cache is warm.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.FilterMeta`2.SetupCollectors(AutoService)">
            <summary>
            Sets up collectors and their mappings.
            </summary>
        </member>
        <member name="M:Api.Permissions.FilterMeta`2.Construct">
            <summary>
            Parses the queries and constructs the filters now.
            </summary>
        </member>
        <member name="M:Api.Permissions.FilterMeta`2.GetPooled">
            <summary>
            Get a pooled filter instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Permissions.Init">
            <summary>
            Instances capabilities during the very earliest phases of startup.
            </summary>
        </member>
        <member name="M:Api.Permissions.Init.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="M:Api.Permissions.Init.SetupForType``2(AutoService{``0,``1})">
            <summary>
            Sets up for the given type with its event group.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
            <param name="service"></param>
        </member>
        <member name="M:Api.Permissions.Init.SetupForListEvent``2(Api.Eventing.EventHandler{Api.Permissions.QueryPair{``0,``1}},Api.Permissions.Capability)">
            <summary>
            Sets up a particular Before*List event handler with permissions
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
            <param name="handler"></param>
            <param name="capability"></param>
        </member>
        <member name="M:Api.Permissions.Init.SetupForStandardEvent``1(Api.Eventing.EventHandler{``0},Api.Permissions.Capability,System.Reflection.FieldInfo)">
            <summary>
            Sets up a particular non-list event handler with permissions
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler"></param>
            <param name="capability"></param>
            <param name="field"></param>
        </member>
        <member name="M:Api.Permissions.Init.SetupForStandardDoubleEvent``1(Api.Eventing.EventHandler{``0,``0},Api.Permissions.Capability,System.Reflection.FieldInfo)">
            <summary>
            Sets up a particular non-list event handler with permissions, for handlers of the 2 type variety. This (currently) means only Update handlers.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler"></param>
            <param name="capability"></param>
            <param name="field"></param>
        </member>
        <member name="T:Api.Permissions.PermissionController">
            <summary>
            Handles an endpoint which describes the permissions on each role.
            </summary>
        </member>
        <member name="M:Api.Permissions.PermissionController.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="F:Api.Permissions.PermissionController._allPermissionInfo">
            <summary>
            The cached permission meta.
            </summary>
        </member>
        <member name="M:Api.Permissions.PermissionController.List">
            <summary>
            GET /v1/permission/list
            Returns meta about the list of available roles and their permission set.
            </summary>
        </member>
        <member name="T:Api.Permissions.PermissionInformation">
            <summary>
            Information about the available permissions.
            </summary>
        </member>
        <member name="F:Api.Permissions.PermissionInformation.Capabilities">
            <summary>
            Information about the available capabilities.
            </summary>
        </member>
        <member name="F:Api.Permissions.PermissionInformation.Roles">
            <summary>
            The set of available roles.
            </summary>
        </member>
        <member name="T:Api.Permissions.RoleMeta">
            <summary>
            Meta for a particular role.
            </summary>
        </member>
        <member name="F:Api.Permissions.RoleMeta.Role">
            <summary>
            The role itself.
            </summary>
        </member>
        <member name="F:Api.Permissions.RoleMeta.Capabilities">
            <summary>
            The list of capabilities that are granted in this role.
            </summary>
        </member>
        <member name="T:Api.Permissions.CapabilityMeta">
            <summary>
            Meta for a particular capability.
            </summary>
        </member>
        <member name="F:Api.Permissions.CapabilityMeta.Name">
            <summary>
            The name of the capability, e.g. "user_create".
            </summary>
        </member>
        <member name="T:Api.Permissions.GrantMeta">
            <summary>
            Information about a particular grant.
            </summary>
        </member>
        <member name="F:Api.Permissions.GrantMeta.RuleDescription">
            <summary>The filter description which describes the grant rule as it would appear as an SQL query.</summary>
        </member>
        <member name="F:Api.Permissions.GrantMeta.Role">
            <summary>The role that the grant is on.</summary>
        </member>
        <member name="T:Api.Permissions.PermissionMeta">
            <summary>
            Information for a particular capability, such as which roles have been granted it.
            </summary>
        </member>
        <member name="F:Api.Permissions.PermissionMeta.Key">
            <summary>
            The key of the capability.
            </summary>
        </member>
        <member name="F:Api.Permissions.PermissionMeta.Description">
            <summary>
            The description of the capability.
            </summary>
        </member>
        <member name="F:Api.Permissions.PermissionMeta.Grants">
            <summary>The list of roles which handle this permission in some way.</summary>
        </member>
        <member name="T:Api.Permissions.PermissionException">
            <summary>
            The requested resource is not accessible
            </summary>
        </member>
        <member name="M:Api.Permissions.PermissionException.Create(System.String,Api.Contexts.Context,System.String)">
            <summary>
            Creates a new permission exception.
            </summary>
            <param name="capability"></param>
            <param name="context"></param>
            <param name="notes">Optional notes</param>
            <returns></returns>
        </member>
        <member name="F:Api.Permissions.PermissionException.Capability">
            <summary>
            The capability this occurred for.
            </summary>
        </member>
        <member name="F:Api.Permissions.PermissionException.Context">
            <summary>
            The context this occurred in.
            </summary>
        </member>
        <member name="M:Api.Permissions.PermissionException.#ctor(System.String,Api.Contexts.Context,System.String)">
            <summary>
            Use Create instead.
            </summary>
            <param name="capability"></param>
            <param name="context"></param>
            <param name="msg"></param>
        </member>
        <member name="T:Api.Permissions.PermissionsAttribute">
            <summary>
            Add Permissions(IsManual=true) to declare that you'll test the capability when you dispatch the event.
            You can get the capability from your event handler - use eventHandler.TestCapability to actually run the capability check.
            </summary>
        </member>
        <member name="F:Api.Permissions.PermissionsAttribute.IsManual">
            <summary>
            True to indicate manual handling of permissions during event dispatch.
            </summary>
        </member>
        <member name="F:Api.Permissions.PermissionsAttribute.HideFieldByDefault">
            <summary>
            True to indicate a field (or when on a class, all of the class fields unless they reverse it) are hidden during serialisation by default.
            "Default" is overridable per role by the permission system. Note that field visibility doesn't vary beyond role.
            </summary>
        </member>
        <member name="T:Api.Permissions.Role">
            <summary>
            A role which defines a set of capabilities to a user who is granted this particular role.
            </summary>
        </member>
        <member name="F:Api.Permissions.Role.Name">
            <summary>
            The nice name of the role, usually in the site default language.
            </summary>
        </member>
        <member name="F:Api.Permissions.Role.Key">
            <summary>
             The role key - usually the lowercase, underscores instead of spaces variant of the first set name.
             This shouldn't change after it has been set.
            </summary>
        </member>
        <member name="F:Api.Permissions.Role.CanViewAdmin">
            <summary>
            True if this role can view the admin panel.
            </summary>
        </member>
        <member name="F:Api.Permissions.Role.IsComposite">
            <summary>
            True if this role is composed from other roles. The child roles are in the composite set.
            </summary>
        </member>
        <member name="F:Api.Permissions.Role.AdminDashboardJson">
            <summary>
            Admin dashboard JSON. Only sent to roles which can view the admin panel.
            </summary>
        </member>
        <member name="F:Api.Permissions.Role.GrantRuleJson">
            <summary>
            The raw grant rules for this user role.
            </summary>
        </member>
        <member name="F:Api.Permissions.Role.InheritedRoleId">
            <summary>
            A role that this one inherits from. If non-zero, a GrantTheSameAs grant is applied.
            </summary>
        </member>
        <member name="P:Api.Permissions.Role.GrantRules">
            <summary>
            The raw grant rules, sorted by priority (weakest first). Evaluated against only when new capabilities are added.
            </summary>
        </member>
        <member name="P:Api.Permissions.Role.CapabilityLookup">
            <summary>
            Indexed by capability InternalId.
            </summary>
        </member>
        <member name="M:Api.Permissions.Role.GrantImportant(System.String[])">
            <summary>
            Grants the given capabilities unconditionally.
            </summary>
            <param name="capabilityNames"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Role.Grant(System.String[])">
            <summary>
            Grants the given capabilities unconditionally.
            </summary>
            <param name="capabilityNames"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Role.GrantFeature(System.String[])">
            <summary>
            Grants the given features unconditionally. Any capability that uses this feature will be granted.
            For example, GrantFeature("Load") will permit User Load, ForumReply Load etc.
            </summary>
            <param name="features"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Role.If(System.String)">
            <summary>
            Start conditional grants. For example, theRole.If("IsSelf()").ThenGrant("user_update") - 
            this means if the current user is the user being edited then the permission is granted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Role.RevokeImportant(System.String[])">
            <summary>
            Revokes the named capabilities. Often used when merging or copying from roles.
            </summary>
            <param name="capabilityNames"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Role.Revoke(System.String[])">
            <summary>
            Revokes the named capabilities. Often used when merging or copying from roles.
            </summary>
            <param name="capabilityNames"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Role.GrantEverything">
            <summary>
            Grants every capability. You can revoke certain ones afterwards.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Role.RevokeEverything">
            <summary>
            Revokes every capability. You can grant certain ones afterwards.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Role.GrantEverythingImportant">
            <summary>
            Grants every capability. You can revoke certain ones afterwards.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Role.RevokeEverythingImportant">
            <summary>
            Revokes every capability. You can grant certain ones afterwards.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Role.AddRule(Api.Permissions.RoleGrantRule,System.Boolean)">
            <summary>
            Adds the given rule to the grant set.
            </summary>
            <param name="rule"></param>
            <param name="addToStart"></param>
        </member>
        <member name="M:Api.Permissions.Role.ClearImportantRules">
            <summary>
            Removes all important marked rules from the role.
            </summary>
        </member>
        <member name="M:Api.Permissions.Role.RevokeFeature(System.String[])">
            <summary>
            Revokes all caps which are for the given feature.
            </summary>
            <param name="features"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Role.GrantTheSameAs(Api.Permissions.Role)">
            <summary>
            Grants the same perms as the given role. 
            If no other rules apply, the given role will be used.
            </summary>
            <param name="copyFrom"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Role.GrantTheSameAsImportant(Api.Permissions.Role,System.Boolean)">
            <summary>
            Grants the same perms as the given role. 
            If no other rules apply, the given role will be used.
            </summary>
            <param name="copyFrom"></param>
            <param name="addToStart"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Role.GetGrantRule(Api.Permissions.Capability)">
            <summary>Gets the raw grant rule for the given capability. This is readonly. If it's null, it's not granted.</summary>
        </member>
        <member name="M:Api.Permissions.Role.IsGranted(Api.Permissions.Capability,Api.Contexts.Context,System.Object,System.Boolean)">
            <summary>
            Is the given capability granted to this role?
            </summary>
            <param name="capability">The capability to check for. This is required.</param>
            <param name="context">The requesting context.</param>
            <param name="extraArg">
            E.g. the Forum object to check if access is granted for.
            </param>
            <param name="isIncluded">True if we're currently evaluating from within an included context.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.Role.AddCapability(Api.Permissions.Capability)">
            <summary>
            Adds the given new capability to the role
            </summary>
            <param name="capability"></param>
        </member>
        <member name="M:Api.Permissions.Role.GetActiveRule(Api.Permissions.Capability)">
            <summary>
            Gets the active grant rule on this role for the given capability. 
            Null if there isn't one and the grant is the base default (false).
            </summary>
            <param name="capability"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Permissions.RoleIfResolver">
            <summary>
            Resolves If() statements on roles.
            </summary>
        </member>
        <member name="F:Api.Permissions.RoleIfResolver.Role">
            <summary>
            The role that this is for.
            </summary>
        </member>
        <member name="F:Api.Permissions.RoleIfResolver.FilterQuery">
            <summary>
            The underlying filter query.
            </summary>
        </member>
        <member name="M:Api.Permissions.RoleIfResolver.ThenGrantImportant(System.String[])">
            <summary>
            If the previous chain resolves to true, then all the given capabilities will be granted.
            </summary>
            <param name="capabilityNames"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.RoleIfResolver.ThenGrant(System.String[])">
            <summary>
            If the previous chain resolves to true, then all the given capabilities will be granted.
            </summary>
            <param name="capabilityNames"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Permissions.RoleIfResolver.ThenGrantFeature(System.String[])">
            <summary>
            If the previous chain resolves to true, then all the given capabilities will be granted.
            </summary>
            <param name="features"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Permissions.IsGrantedHandler">
            <summary>
            Used to define a method which returns true/ false depending on if a capability should be granted.
            </summary>
            <param name="capability"></param>
            <param name="token"></param>
            <param name="extraObjectsToCheck"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Permissions.RoleGrantRule">
            <summary>
            A raw role grant rule. Capabilities are tested against these rules when a cap or role is added.
            </summary>
        </member>
        <member name="F:Api.Permissions.RoleGrantRule.RuleType">
            <summary>
            The base type of this grant rule, defining the scope of the patterns. Rules are sorted by the numeric version of this.
            </summary>
        </member>
        <member name="F:Api.Permissions.RoleGrantRule.FilterQuery">
            <summary>
            A filter query string.
            </summary>
        </member>
        <member name="F:Api.Permissions.RoleGrantRule.Patterns">
            <summary>
            The raw pattern set inside this rule. Evaluating against these is relatively slow, 
            however, it is only evaluated once when a capability is seen for the first time.
            </summary>
        </member>
        <member name="F:Api.Permissions.RoleGrantRule.SameAsRole">
            <summary>
            Grant the same as this named role. Defines a base inheritence rule, which is the weakest of all rules.
            </summary>
        </member>
        <member name="M:Api.Permissions.RoleGrantRule.AsAppliedTo(Api.Permissions.Capability)">
            <summary>
            Returns a rule as applied to the given capability. Essentially if this rule does not apply, it returns null.
            It can inherit from other roles, thus the actual rule returned is not necessarily this one.
            </summary>
            <param name="cap"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Permissions.RoleGrantRuleType">
            <summary>
            The type of a role grant rule.
            </summary>
        </member>
        <member name="F:Api.Permissions.RoleGrantRuleType.Role">
            <summary>
            Grant the same as the given role. Revoke is not valid with this.
            </summary> 
        </member>
        <member name="F:Api.Permissions.RoleGrantRuleType.All">
            <summary>
            All capabilities will be affected by the rule.
            </summary>
        </member>
        <member name="F:Api.Permissions.RoleGrantRuleType.Feature">
            <summary>
            Any capability declaring a particular feature will be affected by the rule.
            </summary>
        </member>
        <member name="F:Api.Permissions.RoleGrantRuleType.Single">
            <summary>
            A single, specific capability is affected by the rule.
            </summary>
        </member>
        <member name="F:Api.Permissions.RoleGrantRuleType.Revoke">
            <summary>
            Revoke can be combined with any of the other options. Declares that this rule clears the current grant, if there is one.
            For example, revoke all is resolved before revoke single is, but after a permit all.
            </summary>
        </member>
        <member name="F:Api.Permissions.RoleGrantRuleType.Important">
            <summary>
            Inspired by how CSS selectivity works.
            In this case an important rule is one which is defined by the admin panel, and overrides any of the rules that originate from code.
            </summary>
        </member>
        <member name="T:Api.Permissions.RoleController">
            <summary>Handles user role endpoints.</summary>
        </member>
        <member name="T:Api.Permissions.Roles">
            <summary>
            Available roles.
            </summary>
        </member>
        <member name="F:Api.Permissions.Roles.Developer">
            <summary>
            The developer role. Can do everything.
            </summary>
        </member>
        <member name="F:Api.Permissions.Roles.Admin">
            <summary>
            The main administrative role. 
            Can do most things in the admin panel except e.g. change site configuration.
            </summary>
        </member>
        <member name="F:Api.Permissions.Roles.Guest">
            <summary>
            A role used when a user account has been created but not yet activated.
            </summary>
        </member>
        <member name="F:Api.Permissions.Roles.Member">
            <summary>
            The default role used when a user is created.
            </summary>
        </member>
        <member name="F:Api.Permissions.Roles.Banned">
            <summary>
            The role used by users that have been marked as banned.
            </summary>
        </member>
        <member name="F:Api.Permissions.Roles.Public">
            <summary>
            The role used by users who aren't logged in.
            </summary>
        </member>
        <member name="P:Api.Permissions.Roles.SuperAdmin">
            <summary>
            The developer role. Can do everything.
            </summary>
        </member>
        <member name="T:Api.Permissions.RoleService">
            <summary>
            Manages user roles.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Permissions.RoleService.#ctor">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Permissions.RoleService.SetupGrants(Api.Permissions.Role,Api.Permissions.Role)">
            <summary>
            Loads the grant rules from the roles custom JSON.
            </summary>
            <param name="role"></param>
            <param name="grantSameAs"></param>
        </member>
        <member name="M:Api.Permissions.RoleService.Install(Api.Permissions.Role[])">
            <summary>
            Installs the given role(s). It checks if they exist by their key or ID, and if not, creates them.
            </summary>
            <param name="roles"></param>
        </member>
        <member name="M:Api.Permissions.RoleService.InstallNow(System.Collections.Generic.IEnumerable{Api.Permissions.Role})">
            <summary>
            Installs the given role(s). It checks if they exist by their key or ID, and if not, creates them.
            </summary>
            <param name="roles"></param>
        </member>
        <member name="T:Api.CanvasRenderer.CanvasGenerator">
            <summary>
            Converts one canvas in to another performing just-in-time substitutions which are context aware.
            These substitutions include handling any templates plus also execution of content nodes in graphs.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasGenerator._canvas">
            <summary>
            The source canvas.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasGenerator._plan">
            <summary>
            Execution plan - a list of generation nodes which are order optimised and can sometimes be bundled together.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasGenerator._graphNodeLoader">
            <summary>
            Canvas wide graph node loader.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasGenerator._stateType">
            <summary>
            The GraphContext state type to instance when generating canvases with this generator.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasGenerator.DataMap">
            <summary>
            Assigned datamap entries.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasGenerator.GetState">
            <summary>
            Instance (or get from a pool) a graphContext to use when executing this generator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasGenerator.#ctor(System.String,System.Type)">
            <summary>
            Creates a generator with the given input canvas and primary content type.
            </summary>
            <param name="canvas"></param>
            <param name="primaryContentType"></param>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasGenerator.IsConstant">
            <summary>
            True if the execution plan has a constant output.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasGenerator.GetDataMapEntry(Api.CanvasRenderer.Executor,System.String)">
            <summary>
            Get or create a datamap entry for a field in a graph node.
            </summary>
            <param name="node"></param>
            <param name="outputField"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasGenerator.CreateExecutionPlan">
            <summary>
            Establishes an "execution plan" of sorts - this is where it figures out e.g. which content it can load in parallel, plus their dependent content bundles.
            If multiple nodes in a graph are for the same thing then they will be loaded once by the plan.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasGenerator.Generate(Api.Contexts.Context,Api.SocketServerLibrary.Writer,System.Object)">
            <summary>
            Generate the target canvas. Puts the result in to the given writer.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.CanvasGeneratorMapEntry">
            <summary>
            A datamap entry in a canvas generator.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasGeneratorMapEntry.Id">
            <summary>
            The ID of this entry. Used by pointers.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasGeneratorMapEntry.GraphNode">
            <summary>
            The graph node that will ultimately generate this data.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasGeneratorMapEntry.Field">
            <summary>
            Output field from the graph node.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.CanvasGeneratorNode">
            <summary>
            A node in a canvas execution plan.
            It can load one or more pieces of content, emit raw bytes, execute a graph etc.
            A canvas execution plan is just a list of generator nodes.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasGeneratorNode.Generate(Api.CanvasRenderer.GraphContext)">
            <summary>
            Runs this node now, generating contextual canvas output into the writer specified by the context.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:Api.CanvasRenderer.CanvasGeneratorGraphTranche">
            <summary>
            Runs a tranche of graph nodes simultaneously (stacks of nodes which do not have to wait on the DB for data will run sequentially).
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasGeneratorGraphTranche.Nodes">
            <summary>
            The nodes in this tranche.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasGeneratorGraphTranche.Execute(Api.CanvasRenderer.GraphContext)">
            <summary>
            Overriden by generated methods.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasGeneratorGraphTranche.Output(Api.CanvasRenderer.GraphContext,Api.SocketServerLibrary.Writer)">
            <summary>
            Overriden by generated methods.
            </summary>
            <param name="state"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasGeneratorGraphTranche.Generate(Api.CanvasRenderer.GraphContext)">
            <summary>
            Runs this generator now.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:Api.CanvasRenderer.CanvasGeneratorBytes">
            <summary>
            A canvas generator node which simply emits constant bytes.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasGeneratorBytes.#ctor(System.Byte[])">
            <summary>
            A node which just outputs some bytes
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasGeneratorBytes.Generate(Api.CanvasRenderer.GraphContext)">
            <summary>
            Runs this node now, generating contextual canvas output into the writer.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:Api.CanvasRenderer.CanvasNode">
            <summary>
            Particular node in the canvas tree.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasNode.#ctor(System.String)">
            <summary>
            Create a canvas node with optional module name.
            </summary>
            <param name="module"></param>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasNode.Graph">
            <summary>
            A graph if there is one.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasNode.Data">
            <summary>
            The data (attributes) for the node as raw JSON tokens.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasNode.Roots">
            <summary>
            The roots for the node, if any.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasNode.Pointer">
            <summary>
            Pointer (p) to an entry in a datamap (m).
            If it is a non-zero number, then this whole node is to be read from the datamap.
            If it is an object, then particular data values are to be read from the datamap.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasNode.Pointers">
            <summary>
            Pointer (p) to an entry in a datamap (m).
            If it is a non-zero number, then this whole node is to be read from the datamap.
            If it is an object, then particular data values are to be read from the datamap.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasNode.Content">
            <summary>
            Any child nodes of a particular canvas node.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasNode.Module">
            <summary>
            The module to use. Null if it is a string node.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasNode.StringContent">
            <summary>
            Set if this is a text node.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasNode.ToJson(System.Boolean)">
            <summary>
            Converts canvas to JSON.
            </summary>
            <param name="leaveOpen">If true, does not write the closing curly bracket</param>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasNode.ToJsonBytes(System.Boolean)">
            <summary>
            Converts canvas to JSON as bytes.
            </summary>
            <param name="leaveOpen">If true, does not write the closing curly bracket</param>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasNode.ToJson(Api.SocketServerLibrary.Writer,System.Boolean)">
            <summary>
            Converts canvas node to JSON.
            </summary>
            <param name="writer"></param>
            <param name="leaveOpen">If true, does not write the closing curly bracket</param>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasNode.AppendChild(Api.CanvasRenderer.CanvasNode)">
            <summary>
            Chainable append child.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasNode.jsonSettings">
            <summary>
            Json serialization settings for canvases
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasNode.With(System.String,System.Object)">
            <summary>
            Sets an attribute of the given name to an optional value in a chainable way.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.CanvasRendererServiceConfig">
            <summary>
            Config for the canvas renderer service.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.CanvasRendererServiceConfig.Modules">
            <summary>
            The module set to use when rendering canvases. Either "Admin", "Email" or "UI". 
            The default is "Admin" as it always includes the modules from the other 2 sets.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.CanvasRendererServiceConfig.DebugToConsole">
            <summary>
            Debug render info to console?
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.CanvasRendererServiceConfig.EnableJsDebugger">
            <summary>
            Turns on the JS debugger. Connect to it with Chrome devtools on port 8118. Enabled remotely too, i.e. you can debug a remote server as well.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.CanvasRendererService">
            <summary>
            Handles rendering canvases server side. Particularly useful for e.g. sending emails.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasRendererService.#ctor(Api.CanvasRenderer.FrontendCodeService,Api.Contexts.ContextService,Api.Configuration.ConfigurationService)">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasRendererService.ClearEngineCaches">
            <summary>
            Clears out the engine caches
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasRendererService.IsCanvasField(Api.Startup.ContentField)">
            <summary>
            True if the given field is a canvas field.
            </summary>
            <param name="contentField"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasRendererService.CanvasToComponentXml(System.String)">
            <summary>
            Converts canvas JSON into a html-like string which will still contain component usage in there.
            This may be useful for sending canvas JSON to translators as it will be much more familiar for them.
            </summary>
            <param name="canvas"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasRendererService.Render(Api.Contexts.Context,System.String,System.String,Api.CanvasRenderer.RenderMode,System.Boolean)">
            <summary>
            Renders the named canvas. This invokes the `socialstack renderui` command if it's not already running
            then passes the body JSON and JSON serialized context to it.
            </summary>
            <param name="context">The context that the json will be rendered as. Any data requests are made as this user.</param>
            <param name="bodyJson">The JSON for the canvas.</param>
            <param name="pageState">Optional page state, JSON formatted. Is the same as pgState in JS - contains the URL, tokens and so on.</param>
            <param name="mode">Html only, text only, both or search.</param>
            <param name="absoluteUrls">Whether to prefix URLs into an absolute path.</param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasRendererService.Render(System.UInt32,System.String,System.String,System.String,Api.CanvasRenderer.RenderMode,System.Boolean)">
            <summary>
            Renders the named canvas. This invokes the `socialstack renderui` command if it's not already running
            then passes the body JSON and JSON serialized context to it.
            </summary>
            <param name="localeId">The locale to render in.</param>
            <param name="context">The context that the json will be rendered as as a JSON string.</param>
            <param name="bodyJson">The JSON for the canvas.</param>
            <param name="pageState">Optional page state, JSON formatted. Is the same as pgState in JS - contains the URL, tokens and so on.</param>
            <param name="mode">Html only, text only, both or search.</param>
            <param name="absoluteUrls">Whether to prefix URLs into an absolute path.</param>
            <returns></returns>
        </member>
        <member name="F:Api.CanvasRenderer.CanvasRendererService._engines">
            <summary>
            Engines per locale.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.CanvasRendererService.GetEngine(System.UInt32)">
            <summary>
            Gets the script engine for the given locale by its locale.
            Also see GetEngineSearch
            </summary>
            <param name="localeId">The locale in use.</param>
            <returns></returns>
        </member>
        <member name="T:Api.CanvasRenderer.PageState">
            <summary>
            Representation of page state data.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.PageState.None">
            <summary>
            No page state.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.PageState.Tokens">
            <summary>
            Raw direct list of url tokens.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.PageState.TokenNames">
            <summary>
            Raw direct list of url token names.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.PageState.PrimaryObject">
            <summary>
            The primary object. The Id and Type are read from this, if it exists.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.PageState.PrimaryObjectService">
            <summary>
            The AutoService that provided the primary object, if there is one.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.PageState.PrimaryObjectType">
            <summary>
            The type of the primary object, if there is one. Same as PrimaryObject.GetType()
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.V8.Location">
            <summary>
            The window.location object.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.V8.Location.href">
            <summary>
            Location href.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.V8.Location.origin">
            <summary>
            Location href.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.V8.Console">
            <summary>
            js console.* methods.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.V8.Console.DoDebug">
            <summary>
            Do print debug information to the console
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.V8.Console.#ctor">
            <summary>
            Creates a new Console
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.V8.Console.#ctor(System.Boolean)">
            <summary>
            Creates a new Console
            </summary>
            <param name="doDebug"></param>
        </member>
        <member name="M:Api.CanvasRenderer.V8.Console.log(System.Object[])">
            <summary>
            console.log serverside
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.V8.Console.error(System.Object[])">
            <summary>
            console.error serverside
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.V8.CanvasRendererEngine">
            <summary>
            A canvas renderer engine.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.V8.CanvasRendererEngine.V8Engine">
            <summary>
            The V8 JS engine.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.V8.Navigator">
            <summary>
            The window.navigator object.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.V8.Navigator.userAgent">
            <summary>
            User agent.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.V8.ServiceHelper">
            <summary>
            The window.document object.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.V8.ServiceHelper.getService(System.String)">
            <summary>
            Gets a service by the given content type name.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Api.CanvasRenderer.EventListener">
            <summary>
            Listens for events to setup the development pack directory.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.EventListener.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.FrontendCodeController">
            <summary>
            Handles requests to /pack/* for frontend code files.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeController.#ctor(Api.CanvasRenderer.FrontendCodeService)">
            <summary>
            Instanced automatically per request.
            </summary>
            <param name="codeService"></param>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeController.Reload">
            <summary>
            Reloads a prebuilt UI
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeController.GetStaticFileList">
            <summary>
            Lists all available static files.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeController.GetEmailMainJs">
            <summary>
            Gets the email main.js file (site locale 1). The URL should be of the form /pack/email-static/main.js?loc=1&amp;v=123123123123&amp;h=ma83md83jd7hdur8
            Where loc is the locale ID, v is the original code build timestamp in ms, and h is the hash of the file.
            For convenience, ask FrontendCodeService for the url via GetMainJsUrl(Context context).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeController.GetGlobalScss(System.String)">
            <summary>
            Gets global scss (debug dev builds only) so it can be seen. Bundle is e.g. "ui" or "admin".
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeController.GetMainJs">
            <summary>
            Gets the main.js file (site locale 1). The URL should be of the form /pack/main.js?loc=1&amp;v=123123123123&amp;h=ma83md83jd7hdur8
            Where loc is the locale ID, v is the original code build timestamp in ms, and h is the hash of the file.
            For convenience, ask FrontendCodeService for the url via GetMainJsUrl(Context context).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeController.GetAdminMainJs">
            <summary>
            Gets the main.js file for the admin area (site locale 1). The URL should be of the form /en-admin/pack/main.js?loc=1&amp;v=123123123123&amp;h=ma83md83jd7hdur8
            Where loc is the locale ID, v is the original code build timestamp in ms, and h is the hash of the file.
            For convenience, ask FrontendCodeService for the url via GetMainJsUrl(Context context).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeController.GetMainCss">
            <summary>
            Gets the main.css file for the ui (site locale 1). The URL should be of the form /pack/main.css?loc=1&amp;v=123123123123&amp;h=ma83md83jd7hdur8
            Where loc is the locale ID (currently unused), v is the original code build timestamp in ms, and h is the hash of the file.
            For convenience, ask FrontendCodeService for the url via GetMainJsUrl(Context context).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeController.GetAdminMainCss">
            <summary>
            Gets the main.css file for the admin area (site locale 1). The URL should be of the form /en-admin/pack/main.css?loc=1&amp;v=123123123123&amp;h=ma83md83jd7hdur8
            Where loc is the locale ID (currently unused), v is the original code build timestamp in ms, and h is the hash of the file.
            For convenience, ask FrontendCodeService for the url via GetMainJsUrl(Context context).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.CanvasRenderer.FrontendCodeService">
            <summary>
            This service manages and generates (for devs) the frontend code.
            It does it by using either precompiled (as much as possible) bundles with metadata, or by compiling in-memory for devs using V8.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.FrontendCodeService.InlineJavascriptHeader">
            <summary>
            The inline header. This should be served inline in the html. It includes preact, preact hooks and the ss module require function, totalling 13kb.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.FrontendCodeService.Prebuilt">
            <summary>
            True if we're in prebuilt mode.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.GetPublicUrl(System.UInt32)">
            <summary>
            The site public URL. Never ends with a path - always just the origin and scheme, e.g. https://www.example.com
            </summary>
            <param name="localeId">The locale you want the public URL for. If no contextual locale is available, use locale #1.</param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.GetContentUrl(System.UInt32)">
            <summary>
            The host of the /content/ and /content-private/ paths.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.SetContentUrl(System.String)">
            <summary>
            Sets the contentSource. Null is valid.
            </summary>
            <param name="contentUrl"></param>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.GetServiceUrls(System.UInt32)">
            <summary>
            Gets service URLs, such as the content source and websocket one, as a javascript variable set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.GenerateServiceUrlsForLocale(System.UInt32)">
            <summary>
            Generates service URLs, such as the content source and websocket one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.ClearCaches">
            <summary>
            Clears the JS caches such that the output js is reconstructed.
            Similar to ReloadFromFilesystem except runs on the assumption that the filesystem itself has not changed.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.ReloadFromFilesystem">
            <summary>
            Reloads a prebuilt UI from the filesystem. Use this for zero downtime UI only deployments.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.#ctor(Api.Translate.LocaleService,Api.Translate.TranslationService,Api.Themes.ThemeService,Api.ContentSync.ContentSyncService)">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.FrontendCodeService.Version">
            <summary>
            Frontend version. This is the same as the version of the main frontend css/js build.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.FrontendCodeService.VersionString">
            <summary>
            Frontend version as a string. This is the same as the version of the main frontend css/js build.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.GetStaticFiles">
            <summary>
            Gets the set of static files. Only used during an app build process as it needs to collect all static files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.BuildTypescriptAliases">
            <summary>
            Dev watcher mode only. Outputs a tsconfig.json file which lists all available JS/ JSX/ TS/ TSX files.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.GetLastBuildErrors">
            <summary>
            Gets the build errors from the last build of the CSS/ JS that happened. If the initial build run is happening, this waits for it to complete.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.GetGlobalScss(System.String)">
            <summary>
            Gets the global scss for a named bundle.
            </summary>
            <param name="bundle"></param>
            <returns></returns>
        </member>
        <member name="F:Api.CanvasRenderer.FrontendCodeService.SourceBuilders">
            <summary>
            Each source builder currently running (if there are any - can be null on production systems).
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.AddBuilder(Api.CanvasRenderer.UIBundle)">
            <summary>
            Adds the given builder. This primarily hooks up global file events.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.GetMainJs(System.UInt32)">
            <summary>
            Gets the main JS file as a raw, always from memory file. Note that although the initial generation of the response is dynamic, 
            virtually all requests that land here are responded to from RAM without allocating.
            </summary>
            <param name="localeId">The locale you want the JS for.</param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.GetMainCss(System.UInt32)">
            <summary>
            Gets the main CSS file as a raw, always from memory file. Note that although the initial generation of the response is dynamic, 
            virtually all requests that land here are responded to from RAM without allocating.
            </summary>
            <param name="localeId">The locale you want the JS for.</param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.GetAdminMainCss(System.UInt32)">
            <summary>
            Gets the main CSS file (for admin bundle) as a raw, always from memory file. Note that although the initial generation of the response is dynamic, 
            virtually all requests that land here are responded to from RAM without allocating.
            </summary>
            <param name="localeId">The locale you want the JS for.</param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.GetAdminMainJs(System.UInt32)">
            <summary>
            Gets the main JS file (for admin bundle) as a raw, always from memory file. Note that although the initial generation of the response is dynamic, 
            virtually all requests that land here are responded to from RAM without allocating.
            </summary>
            <param name="localeId">The locale you want the JS for.</param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.GetEmailMainJs(System.UInt32)">
            <summary>
            Gets the main JS file (for admin bundle) as a raw, always from memory file. Note that although the initial generation of the response is dynamic, 
            virtually all requests that land here are responded to from RAM without allocating.
            </summary>
            <param name="localeId">The locale you want the JS for.</param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.FrontendCodeService.GetBuildEngine">
            <summary>
            Gets a V8 engine used to host Babel, node-sass and other parts of the build chain. This is used for primarily development instances.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.CanvasRenderer.FrontendFile">
            <summary>
            A file as a raw byte[] along with a hash of the content.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.FrontendFile.Empty">
            <summary>
            An empty file.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.FrontendFile.FileContent">
            <summary>
            The file content.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.FrontendFile.Precompressed">
            <summary>
            The file content, gzipped.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.FrontendFile.Etag">
            <summary>
            The file's E-Tag.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.FrontendFile.LastModifiedUtc">
            <summary>
            The last modified date.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.FrontendFile.Hash">
            <summary>
            The hash of the file.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.FrontendFile.PublicUrl">
            <summary>
            The public URL of this file.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.FrontendFile.FqPublicUrl">
            <summary>
            The fully qualified public URL of this file. It's the PublicUrl prepended to the PublicUrl.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.FrontendCodeServiceConfig">
            <summary>
            Config for HtmlService
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.FrontendCodeServiceConfig.Prebuilt">
            <summary>
            True if it should load the prebuilt UI. This is implied as true if no Source directory is found (i.e. you can force a true by just not deploying your UI/Source directory).
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.FrontendCodeServiceConfig.AutoReload">
            <summary>
            Developer instances will automatically reload the UI whenever it updates (UI files are saved) if this is set true.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.FrontendCodeServiceConfig.Minified">
            <summary>
            True if the watcher mode should run minified JS.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.FrontendCodeServiceConfig.React">
            <summary>
            True to use React instead of Preact (Preact is the default).
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.FrontendCodeServiceConfig.WebSocketUrl">
            <summary>
            Custom websocket URL. Use this to customise where the websocket is. It can contain a token - ${server.id} - to allow a cluster to have direct WS connectivity.
            e.g. wss://node${server.id}.mysite.com/live-websocket/
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.FrontendCodeServiceConfig.DisableWebSocket">
            <summary>
            Set this to true to entirely disable the websocket.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.Component">
            <summary>
            A React component.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.Component.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Create a react component entry from the given token.
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Component.Compile(Api.CanvasRenderer.NodeLoader)">
            <summary>
            Compile this node. It must read inputs from and write outputs to the graph state.
            </summary>
            <param name="compileEngine"></param>
        </member>
        <member name="T:Api.CanvasRenderer.Constant">
            <summary>
            A constant value.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Constant.Value">
            <summary>
            The underlying constant.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.Constant.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Create a new constant from the given JSON token.
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Constant.Compile(Api.CanvasRenderer.NodeLoader)">
            <summary>
            Compiles this node with the given engine.
            </summary>
            <param name="compileEngine"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Api.CanvasRenderer.SetGeneratedField">
            <summary>
            Used for generated content field setters.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.Content">
            <summary>
            A content loader node
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Content._svc">
            <summary>
            The service being loaded from
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Content._isPrimary">
            <summary>
            True if we're using the primary type of the pg
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Content._contentType">
            <summary>
            The content type being loaded
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Content._fields">
            <summary>
            All fields available on the type
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Content._outputWriterFld">
            <summary>
            A writer field into which the JSON with includes is written
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Content._typeReadWrite">
            <summary>
            Used to serialise a complete object. Is a TypeReaderWriter[T].
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Content._includes">
            <summary>
            IncludesSet
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.Content.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates a new content loader node
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Content.Compile(Api.CanvasRenderer.NodeLoader)">
            <summary>
            Compile this node. It must read inputs from and write outputs to the graph state.
            </summary>
            <param name="compileEngine"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Content.SetupWriter``2(Api.CanvasRenderer.NodeLoader,AutoService{``0,``1})">
            <summary>
            Sets up the JSON writer for a specific identified service during the compile pass.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
            <param name="compileEngine"></param>
            <param name="svc"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.Content.GetUsedIncludes(Api.Startup.ContentFields)">
            <summary>
            For nodes that want the includes system. Includes must be constant. This returns the string of includes to use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.Content.EmitOutputJson(Api.CanvasRenderer.NodeLoader,System.String)">
            <summary>
            Emits JSON in to the datamap for an outputted field.
            </summary>
            <param name="compileEngine"></param>
            <param name="field"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Content.EmitOutputRead(Api.CanvasRenderer.NodeLoader,System.String)">
            <summary>
            
            </summary>
            <param name="compileEngine"></param>
            <param name="field"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="F:Api.CanvasRenderer.Content._setWriter">
            <summary>
            Sets an output writer field for includes.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Content._setContent">
            <summary>
            Sets the output content field.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.Content.LoadContent``2(Api.CanvasRenderer.GraphContext,``1)">
            <summary>
            Loads the content in to the given graph context now. Called via generated code.
            </summary>
            <param name="state"></param>
            <param name="id"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Content.LoadPrimaryIncludes``2(Api.CanvasRenderer.GraphContext)">
            <summary>
            Loads the includes for a primary object in to the given graph context now. Called via generated code.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Api.CanvasRenderer.ContentList">
            <summary>
            A content loader node
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.ContentList._svc">
            <summary>
            The service being loaded from
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.ContentList._outputWriterFld">
            <summary>
            A writer field into which the JSON with includes is written
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.ContentList._includesStr">
            <summary>
            IncludesSet
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.ContentList._filterStr">
            <summary>
            Filter string
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.ContentList.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates a new content loader node
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Api.CanvasRenderer.ContentList.Compile(Api.CanvasRenderer.NodeLoader)">
            <summary>
            Compile this node. It must read inputs from and write outputs to the graph state.
            </summary>
            <param name="compileEngine"></param>
        </member>
        <member name="M:Api.CanvasRenderer.ContentList.GetUsedIncludes">
            <summary>
            For nodes that want the includes system. Includes must be constant. This returns the string of includes to use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.ContentList.EmitOutputJson(Api.CanvasRenderer.NodeLoader,System.String)">
            <summary>
            Emits JSON in to the datamap for an outputted field.
            </summary>
            <param name="compileEngine"></param>
            <param name="field"></param>
        </member>
        <member name="M:Api.CanvasRenderer.ContentList.EmitOutputRead(Api.CanvasRenderer.NodeLoader,System.String)">
            <summary>
            
            </summary>
            <param name="compileEngine"></param>
            <param name="field"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="F:Api.CanvasRenderer.ContentList._setWriter">
            <summary>
            Sets an output writer field which holds the JSON list and any includes.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.ContentList.LoadContent``2(Api.CanvasRenderer.GraphContext)">
            <summary>
            Loads the content in to the given graph context now. Called via generated code.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Api.CanvasRenderer.Count">
            <summary>
            A counter.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Count._targetField">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.Count.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Create a new counter node from the given JSON token.
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Count.Compile(Api.CanvasRenderer.NodeLoader)">
            <summary>
            
            </summary>
            <param name="compileEngine"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Count.EmitOutputRead(Api.CanvasRenderer.NodeLoader,System.String)">
            <summary>
            
            </summary>
            <param name="compileEngine"></param>
            <param name="field"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Api.CanvasRenderer.Count.EmitOutputJson(Api.CanvasRenderer.NodeLoader,System.String)">
            <summary>
            Emits JSON in to the datamap for an outputted field.
            </summary>
            <param name="compileEngine"></param>
            <param name="field"></param>
        </member>
        <member name="T:Api.CanvasRenderer.Executor">
            <summary>
            A node of a graph
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.Executor.GraphNode">
            <summary>
            The original graph node.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Executor.Links">
            <summary>
            Inbound links - other nodes that this node is pulling values from.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Executor.ConstantData">
            <summary>
            Raw constant data.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Executor.DataMapOutputs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Executor.ReverseLinks">
            <summary>
            Outbound links - that's other nodes using this executor's output. Excludes any used by DataMapOutputs.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.Executor.Outputs">
            <summary>
            The output set.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.Executor.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates a new graph node.
            </summary>
            <param name="graphNode"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Executor.GetConstString(System.String,System.String@)">
            <summary>
            Gets a constant value.
            </summary>
            <param name="fieldName"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.Executor.GetConstNumber(System.String,System.Int64@)">
            <summary>
            Gets a constant long.
            </summary>
            <param name="fieldName"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.Executor.AddDataMapOutput(Api.CanvasRenderer.CanvasGeneratorMapEntry)">
            <summary>
            Adds a datamap output that this node must populate when it executes.
            </summary>
            <param name="cgm"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Executor.GetLinkedInputType(System.String)">
            <summary>
            Gets input type of named input field.
            </summary>
            <param name="field"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Api.CanvasRenderer.Executor.EmitOutputRead(Api.CanvasRenderer.NodeLoader,System.String)">
            <summary>
            Emits an output read for the given output field in to the given compile engine.
            Nodes can use the reverse map to only output fields that they know will be used or alternatively output one thing and use field readers.
            </summary>
            <param name="compileEngine"></param>
            <param name="field"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Executor.GetOutputType(System.String)">
            <summary>
            Returns type of a named output field.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Executor.EmitOutputJson(Api.CanvasRenderer.NodeLoader,System.String)">
            <summary>
            Emits an output read for the given output field in to the given compile engine.
            Nodes can use the reverse map to only output fields that they know will be used or alternatively output one thing and use field readers.
            </summary>
            <param name="compileEngine"></param>
            <param name="field"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Executor.Compile(Api.CanvasRenderer.NodeLoader)">
            <summary>
            Compile this node. It must read inputs from and write outputs to the graph state (arg 1).
            </summary>
            <param name="compileEngine"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Executor.CompileOutput(Api.CanvasRenderer.NodeLoader)">
            <summary>
            Compile this nodes output. This can only read from the graph state (arg 1) and then write in to the provided writer (arg 1.writer).
            </summary>
            <param name="compileEngine"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Executor.IsSame(Api.CanvasRenderer.Executor)">
            <summary>
            True if this node is the same as the given one.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="P:Api.CanvasRenderer.Executor.AddedAs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Executor.Order">
            <summary>
            The node order. Indicates how "deep" a node is in the load tree. Set when adding the node to the loader.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.Executor.AddToLoader(Api.CanvasRenderer.NodeLoader)">
            <summary>
            Add this node to the given loader.
            </summary>
            <param name="loader"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.Executor.AddLinksToLoader(Api.CanvasRenderer.NodeLoader)">
            <summary>
            Add linked nodes to the given loader.
            </summary>
            <param name="loader"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Executor.LoadData(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Loads the data from the given graph node token.
            </summary>
            <param name="graphNode"></param>
        </member>
        <member name="T:Api.CanvasRenderer.ExecutorTranche">
            <summary>
            A collection of nodes which can execute in parallel.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.ExecutorTranche.Nodes">
            <summary>
            The nodes in this tranche.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.ExecutorTranche._loader">
            <summary>
            The loader that created this tranche.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.ExecutorTranche.TypeBuilder">
            <summary>
            Used during tranche compilation - the custom CanvasGeneratorNode.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.ExecutorTranche.#ctor(Api.CanvasRenderer.NodeLoader)">
            <summary>
            Creates a new tranche
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.ExecutorTranche.BakeCompiledType">
            <summary>
            Bakes the compiled tranche to a type, which inherits CanvasGeneratorGraphTranche, 
            and then instances it to ensure it is populated with the node info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.ExecutorTranche.Add(Api.CanvasRenderer.Executor)">
            <summary>
            Adds a node to this tranche.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.Fields">
            <summary>
            A set of fields.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Fields._typeReadWrite">
            <summary>
            Used to serialise a complete object. Is a TypeReaderWriter[T].
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.Fields.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates a set of fields from the info in the given JSON token.
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Fields.Compile(Api.CanvasRenderer.NodeLoader)">
            <summary>
            
            </summary>
            <param name="compileEngine"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Fields.SetupWriter``2(AutoService{``0,``1})">
            <summary>
            Sets up the JSON writer for a specific identified service during the compile pass.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
            <param name="svc"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.Fields.GetOutputType(System.String)">
            <summary>
            Returns type of a named output field.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Fields.EmitOutputJson(Api.CanvasRenderer.NodeLoader,System.String)">
            <summary>
            Emits JSON in to the datamap for an outputted field.
            </summary>
            <param name="compileEngine"></param>
            <param name="field"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Fields.EmitOutputRead(Api.CanvasRenderer.NodeLoader,System.String)">
            <summary>
            
            </summary>
            <param name="compileEngine"></param>
            <param name="field"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Api.CanvasRenderer.FromList">
            <summary>
            A list of fields from an object.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.FromList.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates a new list using data in the given JSON token.
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Api.CanvasRenderer.FromList.Compile(Api.CanvasRenderer.NodeLoader)">
            <summary>
            
            </summary>
            <param name="compileEngine"></param>
        </member>
        <member name="M:Api.CanvasRenderer.FromList.EmitOutputRead(Api.CanvasRenderer.NodeLoader,System.String)">
            <summary>
            
            </summary>
            <param name="compileEngine"></param>
            <param name="field"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Api.CanvasRenderer.Graph">
            <summary>
            A graph found in the page json
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Graph.Nodes">
            <summary>
            All nodes in the graph.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Graph.Root">
            <summary>
            Root of the graph
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.Graph.#ctor(Newtonsoft.Json.Linq.JToken,Api.CanvasRenderer.NodeLoader)">
            <summary>
            Create graph from json node
            </summary>
            <param name="graph"></param>
            <param name="nodeLoader"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Graph.ToJson(Api.SocketServerLibrary.Writer)">
            <summary>
            Converts graph data to JSON.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Api.CanvasRenderer.GraphContext">
            <summary>
            A user specific context for storing state whilst a graph is running. 
            Originate from a pool which contains IL generated classes which derive from this one.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.GraphContext.Context">
            <summary>
            User context.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.GraphContext.PrimaryObject">
            <summary>
            The PO of the page, if there is one.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.GraphContext.Writer">
            <summary>
            The writer into which the JSON is written.
            If writing in a Task or callback, you MUST lock this as there can be more than one such task writing to it simultaneously.
            Otherwise, directly writing to it during the Generate(state) call is permitted.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.GraphContext._waitingFor">
            <summary>
            Total number of async tasks that we are currently waiting for before we can proceed.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.GraphContext.#ctor">
            <summary>
            Creates a default graph context. This is usually the base class of an IL generated context object.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.GraphContext.ReleaseBuffers">
            <summary>
            Overriden in generated types. Releases any writers in this context object after a graph is done generating.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.GraphContext.IsCompleted">
            <summary>
            True if there is nothing we are waiting for in the current context.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.GraphContext.ResetWaiter">
            <summary>
            Reset the waiting mechanism.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.GraphContext.GetResult">
            <summary>
            Async await.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.GraphContext.OnCompleted(System.Action)">
            <summary>
            Async await.
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:Api.CanvasRenderer.GraphContext.GetAwaiter">
            <summary>
            await async.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.GraphContext.AddWaiter">
            <summary>
            Adds a waiter.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.GraphContext.RemoveWaiter">
            <summary>
            Removes a waiter. If it becomes 0 then the continuation is permitted.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.If">
            <summary>
            A conditional "if" node.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.If.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Create a new conditional "if" node using data in the given JSON token.
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Api.CanvasRenderer.If.EmitOutputJson(Api.CanvasRenderer.NodeLoader,System.String)">
            <summary>
            Emits JSON in to the datamap for an outputted field.
            </summary>
            <param name="compileEngine"></param>
            <param name="field"></param>
        </member>
        <member name="M:Api.CanvasRenderer.If.Compile(Api.CanvasRenderer.NodeLoader)">
            <summary>
            
            </summary>
            <param name="compileEngine"></param>
        </member>
        <member name="M:Api.CanvasRenderer.If.EmitOutputRead(Api.CanvasRenderer.NodeLoader,System.String)">
            <summary>
            
            </summary>
            <param name="compileEngine"></param>
            <param name="field"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Api.CanvasRenderer.IncludesExecutor`2">
            <summary>
            An executor which also has some code for handling includes - both functional includes and regular listed includes.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.IncludesExecutor`2._svc">
            <summary>
            The service this include is related to
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.IncludesExecutor`2._fields">
            <summary>
            The full fields
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.IncludesExecutor`2.includeSet">
            <summary>
            The include set this is part of
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.IncludesExecutor`2.jsonWriter">
            <summary>
            JSON writer for this type.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.IncludesExecutor`2.functionalIncludes">
            <summary>
            Any functional includes.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.IncludesExecutor`2.#ctor(AutoService{`0,`1},Api.Startup.ContentFields,Api.Startup.TypeReaderWriter{`0})">
            <summary>
            An executor which runs includes.
            </summary>
            <param name="svc"></param>
            <param name="fields"></param>
            <param name="jsonWriter"></param>
        </member>
        <member name="F:Api.CanvasRenderer.IncludesExecutor`2.IncludesHeader">
            <summary>
            ,"includes":[ 
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.IncludesExecutor`2.ResultHeader">
            <summary>
            {"result": 
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.IncludesExecutor`2.NullText">
            <summary>
            "null"
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.IncludesExecutor`2.WriteJson(Api.Contexts.Context,`0,Api.SocketServerLibrary.Writer)">
            <summary>
            Invoked by generated code. Emits in to a temporary writer which then MUST be copied over to the main writer synchronously.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.IncludesExecutor`2.Setup(System.String,Api.CanvasRenderer.NodeLoader)">
            <summary>
            Sets up the JSON writer for a specific identified service during the compile pass.
            </summary>
            <param name="incl"></param>
            <param name="compileEngine"></param>
            <returns></returns>
        </member>
        <member name="T:Api.CanvasRenderer.Link">
            <summary>
            A link that can be found in a graph
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Link.n">
            <summary>
            The index of the node in the graph this links to
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.Link.f">
            <summary>
            The field in the node this links to
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.Loop">
            <summary>
            A node which loops over an input set.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.Loop.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Create a new loop node for the given JSON token.
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Loop.Compile(Api.CanvasRenderer.NodeLoader)">
            <summary>
            
            </summary>
            <param name="compileEngine"></param>
        </member>
        <member name="T:Api.CanvasRenderer.NodeLoader">
            <summary>
            Node loader. Has the role of ensuring nodes duplicated across multiple graphs are loaded just once.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.NodeLoader.Nodes">
            <summary>
            All nodes formed by the loader.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.GetMaxOrder">
            <summary>
            Returns the maximum order value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.CreateTranches">
            <summary>
            Arranges global graph nodes in to tranches. These are groups of nodes which can be safely executed in parallel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.#ctor(System.Type)">
            <summary>
            Creates a node loader for a graph set using the specified primary content type.
            </summary>
            <param name="primaryType"></param>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.Add(Api.CanvasRenderer.Executor)">
            <summary>
            Adds the given node. If any of them already existed in this loader then they will be substituted.
            </summary>
            <param name="node"></param>
        </member>
        <member name="F:Api.CanvasRenderer.NodeLoader.Method">
            <summary>
            Current tranche method being constructed.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.NodeLoader.CodeBody">
            <summary>
            Body of the tranche method currently being constructed.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.EmitWriter">
            <summary>
            Emits an output writer ref to the stack.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.EmitWriteByte(System.Byte)">
            <summary>
            Emits an output writer ref to the stack.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.EmitWriteASCII(System.String)">
            <summary>
            Emits a WriteASCII call.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.EmitWriteSCall">
            <summary>
            Emits a WriteS(int) call using the stack value as the source. You MUST emit the writer as well as your value.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.EmitLoadPrimary">
            <summary>
            Loads the primary object from graph state on to the evaluation stack.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.EmitLoadState">
            <summary>
            Loads the primary object from graph state on to the evaluation stack.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.EmitLoadUserContext">
            <summary>
            Loads the user context from graph state on to the evaluation stack.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.NodeLoader._writerFields">
            <summary>
            A list of all internal json writer fields.
            This is important to ensure that after a graph is done executing, all internal json writers are released back to the pool.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.AddWriterField(System.Reflection.Emit.FieldBuilder)">
            <summary>
            Adds a writer field to the writer field list.
            </summary>
            <param name="fld"></param>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.DefineSetter(System.Reflection.Emit.FieldBuilder)">
            <summary>
            Defines a set delegate for the given field.
            </summary>
            <param name="fld"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.CompileTranches(Api.CanvasRenderer.ExecutorTranche[])">
            <summary>
            Starts the compilation process of all the given tranches, plus the GraphContext state object.
            Call BakeCompiledType on each tranche afterwards when all state fields are added.
            </summary>
            <param name="tranches"></param>
        </member>
        <member name="F:Api.CanvasRenderer.NodeLoader.DmIsFirst">
            <summary>
            True if the next encountered DataMapLoader is the first one. It does not emit a comma.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.DefineStateField(System.Type)">
            <summary>
            Defines a field in the state class (the instance of GraphContext).
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.BakeCompiledTypes">
            <summary>
            Bakes all the compiled types, indicating that compilation has completed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.CompileTranche(System.Reflection.Emit.ModuleBuilder,System.Int32,Api.CanvasRenderer.ExecutorTranche)">
            <summary>
            Starts compiling a tranche.
            </summary>
            <param name="moduleBuilder"></param>
            <param name="trancheIndex"></param>
            <param name="tranche"></param>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.EmitCurrentNode">
            <summary>
            Emits a reference on to the stack to the current canvas node.
            Note that it is not the "this" (arg0) ref as multiple nodes are generated into 1 tranche method.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.EmitLoadInput(System.String,Api.CanvasRenderer.Executor,System.Boolean)">
            <summary>
            Reads from linked input fields.
            </summary>
            <param name="field"></param>
            <param name="node"></param>
            <param name="defaultPermitted"></param>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLoader.GetPrimaryType">
            <summary>
            Gets the current primary content type for the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.CanvasRenderer.NodeLink">
            <summary>
            A link between nodes on a graph.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.NodeLink.SourceNode">
            <summary>
            The node being linked to
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.NodeLink.Field">
            <summary>
            The outputted field from the linked node to read
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.NodeLink.#ctor(Api.CanvasRenderer.Executor,System.String)">
            <summary>
            Creates a new node link
            </summary>
            <param name="srcNode"></param>
            <param name="field"></param>
        </member>
        <member name="T:Api.CanvasRenderer.NodeLinkSet">
            <summary>
            Node links using the same output field from the same object.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.NodeLinkSet.Field">
            <summary>
            A common output field.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.NodeLinkSet.Links">
            <summary>
            The links.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.Tokens">
            <summary>
            A token resolver in a graph.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.Tokens.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Create a new token resolver from the info in the given JSON object.
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Api.CanvasRenderer.Tokens.Compile(Api.CanvasRenderer.NodeLoader)">
            <summary>
            
            </summary>
            <param name="compileEngine"></param>
        </member>
        <member name="T:Api.CanvasRenderer.ToList">
            <summary>
            A graph node which converts inputs to a singular list.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.ToList.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Create a new ToList graph node using info in the given JSON token.
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Api.CanvasRenderer.ToList.Compile(Api.CanvasRenderer.NodeLoader)">
            <summary>
            
            </summary>
            <param name="compileEngine"></param>
        </member>
        <member name="T:Api.CanvasRenderer.PrebuiltMeta">
            <summary>
            When any of these exist the frontend will very clearly display them.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.PrebuiltMeta.Starter">
            <summary>
            True if this bundle needs the starter line.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.PrebuiltMeta.BuildTime">
            <summary>
            Timestamp in ms that the file was built at.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.PrebuiltMeta.Templates">
            <summary>
            List of meta template literals.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.PrebuiltTemplateLiteralMeta">
            <summary>
            Template literal metadata stored in meta.json when in prebuilt UI mode.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.PrebuiltTemplateLiteralMeta.Module">
            <summary>
            Original module.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.PrebuiltTemplateLiteralMeta.Original">
            <summary>
            Original template literal contents. Differs from target only when minified.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.PrebuiltTemplateLiteralMeta.Target">
            <summary>
            The target template literal. Differs from original only when minified.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.PrebuiltTemplateLiteralMeta.VariableMap">
            <summary>
            Map of any expressions (specifically, simple variable form ones only).
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.PrebuiltTemplateLiteralMeta.Start">
            <summary>
            Start of the template literal, excluding the `.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.PrebuiltTemplateLiteralMeta.End">
            <summary>
            End of the template literal, excluding the `.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.RenderedCanvas">
            <summary>
            A rendered canvas.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.RenderedCanvas.Failed">
            <summary>
            True if it failed to render. This only happens when the .js files containing the components doesn't exist or can't be read by the API process.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.RenderedCanvas.Body">
            <summary>
            The HTML that was generated (unless you asked for text only).
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.RenderedCanvas.Text">
            <summary>
            If you asked for text, the text that was generated.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.RenderedCanvas.Data">
            <summary>
            Javascript string which reconstructs the state used by the renderer. This is an empty string if you turned tracking it off.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.RenderMode">
            <summary>
            Available canvas rendering modes.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.RenderMode.None">
            <summary>
            State only - no actual html or text output.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.RenderMode.Html">
            <summary>
            Html output.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.RenderMode.Text">
            <summary>
            Text only output.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.RenderMode.Both">
            <summary>
            Both text and html output.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.StaticFileInfo">
            <summary>
            Info about a static file.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.StaticFileInfo.Size">
            <summary>
            File size.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.StaticFileInfo.ModifiedUtc">
            <summary>
            Last modified date, in terms of Ticks/10000.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.StaticFileInfo.Ref">
            <summary>
            The ref for the file. Of the form s:/...
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.TransformOptions">
            <summary>
            Used when transforming JS.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.TransformOptions.minified">
            <summary>
            True if minified.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.TransformOptions.commonJs">
            <summary>
            True if commonJS mode.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.UIBuildError">
            <summary>
            When any of these exist the frontend will very clearly display them.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBuildError.Title">
            <summary>
            Pretty title
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBuildError.File">
            <summary>
            File path of the file that failed to build.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBuildError.Description">
            <summary>
            Description if there is one.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.UIBundle">
            <summary>
            A UI bundle such as admin UI or the frontend one. Includes source watcher on dev which watches for changes in the source code in a particular directory.
            Source watchers for each directory are not quite independent - they are independent for everything except for "global" SCSS, such as theme variables and mixins.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.Minified">
            <summary>
            True if builds from the watcher should be minified.
            Generally recommended to leave it off, but try at least once as there are a collection of known bugs in the Babel minifier.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.RootPath">
            <summary>
            Filesystem path. e.g. "C:\\Projects\\UI".
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.RootName">
            <summary>
            Filesystem root name. e.g. "UI".
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.SourcePath">
            <summary>
            Filesystem path. e.g. "C:\\Projects\\UI\\Source".
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.PackDir">
            <summary>
            The public pack directory.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.FilePathOverride">
            <summary>
            Overrides PackDir for the actual file during prebuilt load.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.FileMap">
            <summary>
            Map of path (relative to Path) -> a particular source file.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.GlobalFileMap">
            <summary>
            Map of path (relative to Path) -> a particular *global* source file.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.BuildEngine">
            <summary>
            The build engine which does compilation for us.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.BuildTimestampMs">
            <summary>
            UTC timestamp in milliseconds of last build. This regularly changes on a dev instance, but is constant on prod as it comes from a file.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.BuildTimestampMsString">
            <summary>
            The build timestamp as a string.
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.UIBundle.BuildTimestamp">
            <summary>
            UTC timestamp in milliseconds of last build. 
            </summary>
        </member>
        <member name="P:Api.CanvasRenderer.UIBundle.BuildTimestampString">
            <summary>
            UTC timestamp in milliseconds of last build as a string.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.OnMapChange">
            <summary>
            Invoked when the map changes.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.Prebuilt">
            <summary>
            True if using prebuilt UI.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.HasTypeScript">
            <summary>
            (Dev mode only). True if there is at least one .ts or .tsx file that is not a .d. defs file.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.TransformOptions">
            <summary>
            Options when transforming the JS.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.GetBuildErrors">
            <summary>
            A list of UI build errors. Only exists on dev mode.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.#ctor(System.String,System.String,Api.Translate.TranslationService,Api.Translate.LocaleService,Api.CanvasRenderer.FrontendCodeService,Microsoft.ClearScript.V8.V8ScriptEngine,Api.CanvasRenderer.GlobalSourceFileMap,System.Boolean)">
            <summary>
            Creates a new bundle for the given filesystem path.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.#ctor(System.String,System.String,Api.Translate.TranslationService,Api.Translate.LocaleService,Api.CanvasRenderer.FrontendCodeService)">
            <summary>
            Creates a new bundle for the given filesystem path.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.ClearCaches">
            <summary>
            Clears the JS locale caches.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.ReloadPrebuilt">
            <summary>
            Reloads a prebuilt UI bundle from the filesystem.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.CssPrepend">
            <summary>
            Prepend text to add to the CSS. Use SetCssPrepend except during construction.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.SetCssPrepend(System.String)">
            <summary>
            Sets the given CSS to be prepended to any CSS this outputs.
            </summary>
            <param name="css"></param>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.DetermineFileType(System.String,System.String)">
            <summary>
            Determines the given file name + type as a particular useful source file type. "None" if it didn't.
            </summary>
            <param name="fileType"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.ContainsStarterModule">
            <summary>
            True if this bundle contains UI/Start.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle._localeToMainJs">
            <summary>
            Cached localeId -> JS file bytes. Locale IDs are always intended to be low range (as all locale lookups work this way, rather than introducing a dictionary).
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.GetHash(System.Byte[])">
            <summary>
            Gets an md5 lowercase hash for the given content.
            </summary>
            <param name="fileContent"></param>
            <returns></returns>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.CssFile">
            <summary>
            The built frontend file. This is a byte[] in memory for fast return speeds.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.GetCss(System.UInt32)">
            <summary>
            Gets the main CSS file for this bundle as a raw, always from memory file. Note that although the initial generation of the response is dynamic, 
            virtually all requests that land here are responded to from RAM without allocating.
            </summary>
            <param name="localeId">The locale you want the JS for.</param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.GetJs(System.UInt32)">
            <summary>
            Gets the main JS file for this bundle as a raw, always from memory file. Note that although the initial generation of the response is dynamic, 
            virtually all requests that land here are responded to from RAM without allocating.
            </summary>
            <param name="localeId">The locale you want the JS for.</param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.PopulateDefaultTranslations(System.UInt32)">
            <summary>
            Extracts any module text and ensures that we have entries in the translation tables 
            </summary>
            <param name="localeId">The locale you want to process translations for</param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.Compress(System.Byte[])">
            <summary>
            Compresses the given array of bytes.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.RemapTemplateLiteralVariables(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Remaps the variables in a template literal using the given mapping.
            Template literals here MUST use simple variable substitution only, rather than potentially complex expressions.
            </summary>
            <param name="templateLiteralContents"></param>
            <param name="variableMap"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.GetTypeMeta(System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Get filetype meta for the given path.
            </summary>
            <param name="filePath"></param>
            <param name="fileName"></param>
            <param name="fileNameNoType"></param>
            <param name="fileType"></param>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.AddToMap(System.String)">
            <summary>
            Adds the file at the given source-relative path to the map.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.Start">
            <summary>
            Starts the watcher and loads files ready for first build.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.watcher">
            <summary>
            The watcher for this bundle
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.ConstructJs">
            <summary>
            Updates the main js.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.GetSegments">
            <summary>
            Extract the segments from javascript source files
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.ConstructCss">
            <summary>
            Updates the main css.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.MapUrl(System.String,System.String[])">
            <summary>
            Maps a source URL for CSS files. Don't use this for outputting JS because urls there are not relative to the JS file location (whereas CSS is).
            </summary>
            <param name="sourcePath">E.g. "./images/test.jpg"</param>
            <param name="filePathParts">The filesystem path of the module the source file is in relative to the bundle Source folder.</param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.PeekString(System.String,System.Int32)">
            <summary>
            Peek char at index. If it is out of range, a nul byte is returned.
            </summary>
            <param name="str"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.RemapUrlsInCssAndRemoveComments(System.String,System.String)">
            <summary>
            Remap the url() calls in the given css string.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle._publicPath">
            <summary>
            Public URL of the site. Originates from PublicUrl config setting.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.FullyQualify(System.String,System.UInt32)">
            <summary>
            Fully qualifies the given url. It MUST always be absolute, i.e. starting with a /.
            </summary>
            <param name="url"></param>
            <param name="localeId"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.UpdateBuildTimestamp">
            <summary>
            Updates the build timestamp. Only happens on dev instances whenever css/js file is updated. On production builds, this originates from the meta.json file in the output.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.BuiltJavascriptSegments">
            <summary>
            The output JS segments. It's in segments such that translations can be quickly swapped in on demand.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.BuiltCss">
            <summary>
            The output CSS.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.ScssHeader">
            <summary>
            The SCSS prefix - constructed of global files plus any bundle specific ones as well (e.g. functions or mixins exclusively for admin modules).
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle.ScssHeaderLineCount">
            <summary>
            Approx line count in the scss header.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.GetScssGlobals">
            <summary>
            Gets the SCSS globals.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.BuildScssFile(Api.CanvasRenderer.SourceFile)">
            <summary>
            Builds the given SCSS file.
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.BuildJsFile(Api.CanvasRenderer.SourceFile)">
            <summary>
            Builds the given JS file.
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.BuildAllCss">
            <summary>
            A full compile of all the CSS.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.LoadModuleTranslations(Api.Translate.Locale)">
            <summary>
            Load default module translations
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.BuildEverything">
            <summary>
            A full compile of everything.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle._pendingChanges">
            <summary>
            Pending filesys changes.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.UIBundle._fileSystemTimer">
            <summary>
            A timer for debouncing filesystem watch events.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.UIBundle.FilesystemRequestUpdate(Api.CanvasRenderer.FilesystemChange)">
            <summary>
            Requests an update. The filesystem will spam events for a moment 
            (particularly when code editors are storing a backup of every file they write out), so this method performs a debounce.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.SourceFileChangeType">
            <summary>
            Tracks a change on a source file. We don't specifically separate changed from 
            created as they can often be actually triggered at the same time by code IDE's.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFileChangeType.Changed">
            <summary>
            File changed or created
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFileChangeType.Deleted">
            <summary>
            File removed
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.SourceFileType">
            <summary>
            Source file type.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFileType.None">
            <summary>
            Not a source file we care about.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFileType.Javascript">
            <summary>
            JS source.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFileType.Scss">
            <summary>
            Scss source.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFileType.ModuleMeta">
            <summary>
            module.json meta file.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFileType.LocaleTemplate">
            <summary>
            locale.json - the localisation template.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFileType.Locale">
            <summary>
            Locale for a particular country.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFileType.Directory">
            <summary>
            Not a source file we care about.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.GlobalSourceFileMap">
            <summary>
            Global source file map.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.GlobalSourceFileMap.FileMap">
            <summary>
            The file map of global files.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.GlobalSourceFileMap.SortedGlobalFiles">
            <summary>
            Global files sorted by order of priority.
            </summary>
        </member>
        <member name="E:Api.CanvasRenderer.GlobalSourceFileMap.OnUpdated">
            <summary>
            Called when the GSM has been updated.
            </summary>
        </member>
        <member name="M:Api.CanvasRenderer.GlobalSourceFileMap.HasChanged">
            <summary>
            Indicate the GSM has changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CanvasRenderer.GlobalSourceFileMap.Sort">
            <summary>
            Reconstructs sorted global files based on the map.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.SourceFile">
            <summary>
            A particular src file.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFile.Priority">
            <summary>
            Sort order of SCSS files.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFile.Path">
            <summary>
            Same as the key in the FileMap.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFile.FileName">
            <summary>
            Name of file incl type.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFile.ModulePath">
            <summary>
            Module path for this file. It's essentially the path but always uses / and never contains "ThirdParty" or bundles.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFile.FullModulePath">
            <summary>
            Module path for this file. It's essentially the path but always uses /. This one does contain ThirdParty and bundles, however.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFile.FileType">
            <summary>
            Tidy file type.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFile.IsGlobal">
            <summary>
            True if this file is a "global" one. Only true for SCSS files with .global. in their filename.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFile.RawFileType">
            <summary>
            Lowercase filetype. "js", "jsx" etc.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFile.RelativePath">
            <summary>
            Relative to the Source directory in the parent builder.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFile.ThirdParty">
            <summary>
            True if this file is a ThirdParty one.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFile.Content">
            <summary>
            Raw file content, set once loaded.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFile.TranspiledContent">
            <summary>
            The contents of this file, transpiled. If it's a format that doesn't require transpiling, then this is null.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFile.Failure">
            <summary>
            Set if this file failed to build.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.SourceFile.Templates">
            <summary>
            Any template literals in this JS file.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.FilesystemChange">
            <summary>
            A change to the filesystem.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.FilesystemChange.AbsolutePath">
            <summary>
            The file path.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.FilesystemChange.ChangeType">
            <summary>
            Deleted or updated.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.TemplateLiteral">
            <summary>
            Information about a template literal.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.TemplateLiteral.Module">
            <summary>
            Module name for this template literal. E.g. "UI/Thing".
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.TemplateLiteral.Original">
            <summary>
            Original template literal.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.TemplateLiteral.Target">
            <summary>
            The target template literal. This is only different from original if the file was minified.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.TemplateLiteral.Start">
            <summary>
            Start index.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.TemplateLiteral.End">
            <summary>
            End index.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.TemplateLiteral.VariableMap">
            <summary>
            If the template literal has variables in it, this maps original variables to target ones. It's null otherwise.
            This exists whenever a template literal has variables in it, even if it maps a->a (non-minified source), 
            because it verifies if the variables even exist to avoid outputting JS with syntax errors in the event that a translator typoed.
            </summary>
        </member>
        <member name="T:Api.CanvasRenderer.JavascriptFileSegment">
            <summary>
            A segment of the javascript file.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.JavascriptFileSegment.Source">
            <summary>
            If not null, this is just a raw source string. It's added to output as-is.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.JavascriptFileSegment.Module">
            <summary>
            Module that this template literal is from.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.JavascriptFileSegment.TemplateLiteralToSearch">
            <summary>
            The raw source of the template literal to use, if this is a template literal substitution segment.
            Look up this template literal in the list of translations.
            Once a match is found, check if VariableMap is set.
            If so, you MUST remap variables using the map before outputting.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.JavascriptFileSegment.TemplateLiteralSource">
            <summary>
            The raw template literal in the source. May be minified. Output this if no match was found.
            </summary>
        </member>
        <member name="F:Api.CanvasRenderer.JavascriptFileSegment.VariableMap">
            <summary>
            If the template literal has variables in it, this maps original variables to target ones.
            This exists whenever a template literal has variables in it, even if it maps a->a (non-minified source), 
            because it verifies if the variables even exist to avoid outputting JS with syntax errors in the event that a translator typoed.
            </summary>
        </member>
        <member name="T:Api.Themes.CssLexer">
            <summary>
            A simple CSS lexer with the duty of identifying selectors and the properties applied to them.
            </summary>
        </member>
        <member name="F:Api.Themes.CssLexer.Text">
            <summary>
            Raw CSS
            </summary>
        </member>
        <member name="F:Api.Themes.CssLexer.Index">
            <summary>
            Current index in the lexer.
            </summary>
        </member>
        <member name="M:Api.Themes.CssLexer.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Api.Themes.CssLexer.Skip">
            <summary>
            Skips 1 char.
            </summary>
        </member>
        <member name="M:Api.Themes.CssLexer.More">
            <summary>
            True if there's more in this lexer.
            </summary>
        </member>
        <member name="M:Api.Themes.CssLexer.SkipJunk(System.Boolean)">
            <summary>
            Skips junk such as spaces or newlines (don't use this when inside a "string" scope).
            </summary>
        </member>
        <member name="P:Api.Themes.CssLexer.Current">
            <summary>
            Current char. Reading this advances by 1.
            </summary>
        </member>
        <member name="M:Api.Themes.CssLexer.Peek(System.Int32)">
            <summary>
            Peeks the next character, optionally n in the distance. Returns a nul byte if it is beyond the EOS.
            </summary>
        </member>
        <member name="T:Api.Themes.Color">
            <summary>
            Used to map colour name to colour value.
            </summary>
        </member>
        <member name="F:Api.Themes.Color.Black">
            <summary>
            Black
            </summary>
        </member>
        <member name="F:Api.Themes.Color.White">
            <summary>
            White
            </summary>
        </member>
        <member name="M:Api.Themes.Color.GetContrastColor">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Themes.Color.FromHsl(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            HSL->RGB color. All hsl values must be normalised to 0-1.
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="l"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="F:Api.Themes.Color.R">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:Api.Themes.Color.G">
            <summary>
            Green
            </summary>
        </member>
        <member name="F:Api.Themes.Color.B">
            <summary>
            Blue
            </summary>
        </member>
        <member name="F:Api.Themes.Color.A">
            <summary>
            Alpha
            </summary>
        </member>
        <member name="M:Api.Themes.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a color initialised to the given rgb(a) values.
            </summary>
        </member>
        <member name="M:Api.Themes.Color.ToCss">
            <summary>
            Writes this color out as a CSS value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Themes.Color.ToCss(System.Text.StringBuilder)">
            <summary>
            Writes this color out as a CSS value into the given builder.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Api.Themes.Color.ToHsl(System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets this colour as HSL.
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="l"></param>
        </member>
        <member name="M:Api.Themes.Color.Lighten(System.Single)">
            <summary>
            
            </summary>
            <param name="amount">0-1 scaled percentage</param>
            <returns></returns>
        </member>
        <member name="M:Api.Themes.Color.DarkenColor(System.Single)">
            <summary>
            
            </summary>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Themes.Color.Mix(Api.Themes.Color,System.Single)">
            <summary>
            Mixes this color with the given one.
            </summary>
            <param name="color2"></param>
            <param name="weightScale"></param>
            <returns></returns>
        </member>
        <member name="P:Api.Themes.Color.IsWhite">
            <summary>
            True if this is white.
            </summary>
        </member>
        <member name="M:Api.Themes.Color.TintColor(System.Single)">
            <summary>
            
            </summary>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Themes.Color.ShadeColor(System.Single)">
            <summary>
            
            </summary>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Themes.ColorMap">
            <summary>
            Used to map colour name to colour value.
            </summary>
        </member>
        <member name="F:Api.Themes.ColorMap.Map">
            <summary>A map from colour name to hex value.</summary>
        </member>
        <member name="M:Api.Themes.ColorMap.FromCss(System.String)">
            <summary>
            Loads a colour from a CSS value using a simplistic parsing technique which only supports the color values in the spec.
            </summary>
        </member>
        <member name="M:Api.Themes.ColorMap.ReadNumericValue(System.String,System.Int32@)">
            <summary>
            Reads a numeric CSS value.
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Themes.ColorMap.LoadHexFromPart(System.String,System.Int32,System.Int32)">
            <summary>Loads a hex value from the given 'any' string. Non-hex chars are treated as 0.
            (Normally, non-hex chars invalidate the whole thing).</summary>
        </member>
        <member name="M:Api.Themes.ColorMap.GetColorByName(System.String,System.Boolean@)">
            <summary>Maps colour name, e.g. aqua, to colour. Must be lowercase.</summary>
            <returns>An uppercase hex string or null if not found.</returns>
        </member>
        <member name="M:Api.Themes.ColorMap.DoubleNibble(System.Int32)">
            <summary>Duplicates the given nibble (4 bit number) and places the result alongside in the same byte.
            E.g. c in hex becomes cc.</summary>
            <param name="nibble">The nibble to duplicate.</param>
        </member>
        <member name="M:Api.Themes.ColorMap.GetHexColor(System.String)">
            <summary>Gets a colour from a hex HTML string.</summary>
        </member>
        <member name="M:Api.Themes.ColorMap.GetHexColor(System.String,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>Gets a colour from a hex HTML string.</summary>
        </member>
        <member name="M:Api.Themes.ColorMap.GetHexColor(System.String,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>Gets a colour from a hex HTML string.</summary>
        </member>
        <member name="M:Api.Themes.ColorMap.ToSpecialColor(System.String)">
            <summary>Converts any random string into a colour. This is a strange part of the specs
            that rarely gets used now, but it makes for some interesting colours ("grass" is green!).
            For example, body bgcolor uses this.</summary>
        </member>
        <member name="T:Api.Themes.CssNumericValue">
            <summary>
            Represents a numeric value - either an int or %.
            </summary>
        </member>
        <member name="F:Api.Themes.CssNumericValue.None">
            <summary>
            not defined.
            </summary>
        </member>
        <member name="F:Api.Themes.CssNumericValue.Value">
            <summary>
            The underlying value
            </summary>
        </member>
        <member name="F:Api.Themes.CssNumericValue.IsPercent">
            <summary>
            True if the value is a percent.
            </summary>
        </member>
        <member name="M:Api.Themes.CssNumericValue.#ctor(System.Single,System.Boolean)">
            <summary>
            Creates a numeric value, optionally marked as a %.
            </summary>
        </member>
        <member name="M:Api.Themes.CssNumericValue.ToPercent(System.Single)">
            <summary>
            Gets this numeric value as a percent.
            </summary>
            <param name="divisor"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Themes.CssNumericValue.Equals(System.Object)">
            <summary>
            True if this value equals another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Themes.CssNumericValue.Equals(Api.Themes.CssNumericValue)">
            <summary>
            Equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Themes.CssNumericValue.GetHashCode">
            <summary>
            Gets the value hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Themes.CssNumericValue.op_Equality(Api.Themes.CssNumericValue,Api.Themes.CssNumericValue)">
            <summary>
            Equals
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Themes.CssNumericValue.op_Inequality(Api.Themes.CssNumericValue,Api.Themes.CssNumericValue)">
            <summary>
            Not equals
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Themes.GlobalThemeConfig">
            <summary>
            Global theme configuration values, such as the site logo. Use themeService.GetConfig to access the current instance of this.
            </summary>
        </member>
        <member name="P:Api.Themes.GlobalThemeConfig.LogoRef">
            <summary>
            Site logo ref.
            </summary>
        </member>
        <member name="P:Api.Themes.GlobalThemeConfig.AdminLogoRef">
            <summary>
            Site logo ref (admin area). Typically a white version of the logo.
            </summary>
        </member>
        <member name="P:Api.Themes.GlobalThemeConfig.DefaultThemeId">
            <summary>
            Default theme key. This is applied to the body if it is not null.
            </summary>
        </member>
        <member name="P:Api.Themes.GlobalThemeConfig.DefaultAdminThemeId">
            <summary>
            Default theme ID. This is applied to the body if it is non-zero.
            </summary>
        </member>
        <member name="T:Api.Themes.ThemeConfig">
            <summary>
            Config for themes.
            The properties on this object directly influences the available fields in the admin panel. So, if you'd like additional theme config options, 
            just extend this class with additional properties - either via a partial class in a separate module, or right here.
            </summary>
        </member>
        <member name="P:Api.Themes.ThemeConfig.Key">
            <summary>
            A key used to reference this particular theme config.
            </summary>
        </member>
        <member name="P:Api.Themes.ThemeConfig.DarkModeOfThemeId">
            <summary>
            Set this if the current theme config is the dark mode variant of another theme config with the given ID/ key.
            For example, let's say theme #1 is "Admin (light)" and theme #2 is "Admin (dark)"
            Theme #2 would have this field set to 1, indicating that it is the dark mode version of theme #1.
            </summary>
        </member>
        <member name="P:Api.Themes.ThemeConfig.Variables">
            <summary>
            List of variables and their values.
            </summary>
        </member>
        <member name="P:Api.Themes.ThemeConfig.Css">
            <summary>
            The CSS in this theme. Typically uses the variable values.
            </summary>
        </member>
        <member name="T:Api.Themes.ThemeService">
            <summary>
            This service manages and generates (for devs) the frontend code.
            It does it by using either precompiled (as much as possible) bundles with metadata, or by compiling in-memory for devs using V8.
            </summary>
        </member>
        <member name="F:Api.Themes.ThemeService.bootstrapVariants">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Themes.ThemeService.#ctor(Api.Configuration.ConfigurationService)">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="M:Api.Themes.ThemeService.GetConfig">
            <summary>
            Gets the current latest global config. Use this for e.g. the site logo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Themes.ThemeService.GetAllConfig">
            <summary>
            Gets all the available theme config.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.Themes.ThemeService._current">
            <summary>
            Current configured themes.
            </summary>
        </member>
        <member name="F:Api.Themes.ThemeService._globalCfg">
            <summary>
            Current global config.
            </summary>
        </member>
        <member name="M:Api.Themes.ThemeService.OutputCssBlock(Api.Themes.ThemeConfig,System.String,System.String,System.Boolean,System.Text.StringBuilder@)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <param name="selector"></param>
            <param name="id"></param>
            <param name="html"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Themes.ThemeService.OutputCss(Api.Configuration.ConfigSet{Api.Themes.ThemeConfig})">
            <summary>
            Builds the given set of configs out to the CSS rules.
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.StdOutController">
            <summary>
            </summary>
            <summary>
            A convenience controller for defining common endpoints like create, list, delete etc. Requires an AutoService of the same type to function.
            Not required to use these - you can also just directly use ControllerBase if you want.
            Like AutoService this isn't in a namespace due to the frequency it's used.
            </summary>
            <summary>
            </summary>
            <summary>
            </summary>
            <summary>
            A convenience controller for defining common endpoints like create, list, delete etc. Requires an AutoService of the same type to function.
            Not required to use these - you can also just directly use ControllerBase if you want.
            Like AutoService this isn't in a namespace due to the frequency it's used.
            </summary>
            <summary>
            A convenience controller for defining common endpoints like create, list, delete etc. Requires an AutoService of the same type to function.
            Not required to use these - you can also just directly use ControllerBase if you want.
            Like AutoService this isn't in a namespace due to the frequency it's used.
            </summary>
        </member>
        <member name="M:Api.Startup.StdOutController.V8Status">
            <summary>
            V8 status.
            </summary>
        </member>
        <member name="M:Api.Startup.StdOutController.V8Clear">
            <summary>
            Attempts to purge V8 engines from the canvas renderer service.
            </summary>
        </member>
        <member name="M:Api.Startup.StdOutController.UpdateCerts">
            <summary>
            Triggers a certificate update (admin only).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.StdOutController.UpdateWebserverConfig">
            <summary>
            Triggers a webserver config file update (admin only).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.StdOutController.WhoAmI">
            <summary>
            Forces a GC run. Convenience for testing for memory leaks.
            </summary>
        </member>
        <member name="M:Api.Startup.StdOutController.RunQuery(Api.Startup.MonitoringQueryModel)">
            <summary>
            Runs a query, returning the result set(s) as streaming JSON.
            Note that this will currently only work for MySQL database engines.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.StdOutController.GetStdOut">
            <summary>
            Gets the latest block of text from the stdout.
            </summary>
        </member>
        <member name="M:Api.Startup.StdOutController.GetLog(Api.Startup.LogFilteringModel)">
            <summary>
            Gets the latest block of text from the stdout.
            </summary>
        </member>
        <member name="M:Api.Startup.StdOutController.HtmlCache">
            <summary>
            Page cache status.
            </summary>
        </member>
        <member name="M:Api.Startup.StdOutController.PlainTextBenchmark">
            <summary>
            Plaintext benchmark.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.StdOutController.BufferPoolStatus">
            <summary>
            V8 status.
            </summary>
        </member>
        <member name="M:Api.Startup.StdOutController.BufferPoolClear">
            <summary>
            Attempts to purge V8 engines from the canvas renderer service.
            </summary>
        </member>
        <member name="F:Api.Startup.StdOutController._applicationJson">
            <summary>
            Json header
            </summary>
        </member>
        <member name="M:Api.Startup.StdOutController.GC">
            <summary>
            Forces a GC run. Convenience for testing for memory leaks.
            </summary>
        </member>
        <member name="M:Api.Startup.StdOutController.Execute(Api.Startup.MonitoringExecModel)">
            <summary>
            Runs something on the command line. Super admin only (naturally).
            </summary>
        </member>
        <member name="M:Api.Startup.StdOutController.Halt">
            <summary>
            Forces an application halt.
            </summary>
        </member>
        <member name="M:Api.Startup.StdOutController.GetWsClientCount">
            <summary>
            Gets the latest number of websocket clients.
            </summary>
        </member>
        <member name="T:Api.Startup.IpSet">
            <summary>
            Extensions to ip set for contentSync.
            </summary>
            <summary>
            A group of 4 IP addresses. Some can be null.
            </summary>
        </member>
        <member name="M:Api.Startup.IpSet.CopyTo(Api.ContentSync.ClusteredServer)">
            <summary>
            Copies the IPs into the given server.
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.IpSet.ChangedSince(Api.ContentSync.ClusteredServer)">
            <summary>
            True if the IPs in this set have changed from the ones in the given server.
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="F:Api.Startup.IpSet.PublicIPv4">
            <summary>Public IPv4</summary>
        </member>
        <member name="F:Api.Startup.IpSet.PublicIPv6">
            <summary>Public IPV6</summary>
        </member>
        <member name="F:Api.Startup.IpSet.PrivateIPv4">
            <summary>First "most appropriate" private IPv4</summary>
        </member>
        <member name="F:Api.Startup.IpSet.PrivateIPv6">
            <summary>First "most appropriate" private IPv6</summary>
        </member>
        <member name="M:Api.Startup.IpSet.Match(System.Byte[],System.Net.IPAddress)">
            <summary>True if any IP matches the given one.</summary>
        </member>
        <member name="T:Api.Startup.ExceptionMiddleware">
            <summary>
            Handles exceptions being logged to a log service.
            </summary>
        </member>
        <member name="M:Api.Startup.ExceptionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Instanced automatically.
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Api.Startup.ExceptionMiddleware.HandleError(System.Exception,Microsoft.AspNetCore.Http.HttpContext,System.Int32)">
            <summary>
            Logs an exception and responds to the original requester.
            </summary>
        </member>
        <member name="M:Api.Startup.ExceptionMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Runs during each request.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.LogFilteringModel">
            <summary>
            A filtering model used by the /monitoring/log endpoint.
            </summary>
        </member>
        <member name="F:Api.Startup.LogFilteringModel.NewerThan">
            <summary>
            Will only return results with a timestamp greater than the specified one.
            Use this to get results created since a previous request.
            </summary>
        </member>
        <member name="F:Api.Startup.LogFilteringModel.Offset">
            <summary>
            Starting offset (from the tail of the file).
            </summary>
        </member>
        <member name="F:Api.Startup.LogFilteringModel.PageSize">
            <summary>
            # of log entries to obtain.
            </summary>
        </member>
        <member name="F:Api.Startup.LogFilteringModel.LocalOnly">
            <summary>
            This node only.
            </summary>
        </member>
        <member name="F:Api.Startup.LogFilteringModel.Tag">
            <summary>
            Basic filter by tag for the moment.
            </summary>
        </member>
        <member name="T:Api.Startup.BufferPoolStatus">
            <summary>
            The buffer pool status
            </summary>
        </member>
        <member name="F:Api.Startup.BufferPoolStatus.WriterCount">
            <summary>
            The number of writers
            </summary>
        </member>
        <member name="F:Api.Startup.BufferPoolStatus.BufferCount">
            <summary>
            The number of buffers
            </summary>
        </member>
        <member name="F:Api.Startup.BufferPoolStatus.ByteSize">
            <summary>
            The number of bytes
            </summary>
        </member>
        <member name="T:Api.Startup.Utf8Helpers.Rune">
            <summary>
            A Rune represents a Unicode CodePoint storing the contents in a 32-bit value
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Rune.Error">
            <summary>
            The "error" Rune or "Unicode replacement character"
            </summary>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Rune.MaxRune">
            <summary>
            Maximum valid Unicode code point.
            </summary>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Rune.RuneSelf">
            <summary>
            Characters below RuneSelf are represented as themselves in a single byte
            </summary>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Rune.ReplacementChar">
            <summary>
            Represents invalid code points.
            </summary>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Rune.Utf8Max">
            <summary>
            Maximum number of bytes required to encode every unicode code point.
            </summary>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Rune"/> from a unsigned integer.
            </summary>
            <param name="rune">Unsigned integer.</param>
            <remarks>
            The value does not have to be a valid Unicode code point, this API
            will create an instance of Rune regardless of the whether it is in 
            range or not.
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Rune"/> from a character value.
            </summary>
            <param name="ch">C# characters.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Rune"/> from a surrogate pair value.
            </summary>
            <param name="sgateMin">The high surrogate code points minimum value.</param>
            <param name="sgateMax">The low surrogate code points maximum value.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.DecodeSurrogatePair(System.UInt32,System.UInt32)">
            <summary>
            Gets a value indicating whether this <see cref="T:System.Rune"/> can be encoded as UTF-8 from a surrogate pair or zero otherwise.
            </summary>
            <param name="sgateMin">The high surrogate code points minimum value.</param>
            <param name="sgateMax">The low surrogate code points maximum value.</param>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Rune.IsValid">
            <summary>
            Gets a value indicating whether this <see cref="T:System.Rune"/> can be encoded as UTF-8
            </summary>
            <value><c>true</c> if is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.FullRune(System.Byte[])">
            <summary>
            FullRune reports whether the bytes in p begin with a full UTF-8 encoding of a rune.
            An invalid encoding is considered a full Rune since it will convert as a width-1 error rune.
            </summary>
            <returns><c>true</c>, if the bytes in p begin with a full UTF-8 encoding of a rune, <c>false</c> otherwise.</returns>
            <param name="p">byte array.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.DecodeRune(System.Byte[],System.Int32,System.Int32)">
            <summary>
            DecodeRune unpacks the first UTF-8 encoding in p and returns the rune and
            its width in bytes. 
            </summary>
            <returns>If p is empty it returns (RuneError, 0). Otherwise, if
            the encoding is invalid, it returns (RuneError, 1). Both are impossible
            results for correct, non-empty UTF-8.
            </returns>
            <param name="buffer">Byte buffer containing the utf8 string.</param>
            <param name="start">Starting offset to look into..</param>
            <param name="n">Number of bytes valid in the buffer, or -1 to make it the length of the buffer.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.DecodeLastRune(System.Byte[],System.Int32)">
            <summary>
            DecodeLastRune unpacks the last UTF-8 encoding in buffer
            </summary>
            <returns>The last rune and its width in bytes.</returns>
            <param name="buffer">Buffer to decode rune from;   if it is empty,
            it returns (RuneError, 0). Otherwise, if
            the encoding is invalid, it returns (RuneError, 1). Both are impossible
            results for correct, non-empty UTF-8.</param>
            <param name="end">Scan up to that point, if the value is -1, it sets the value to the length of the buffer.</param>
            <remarks>
            An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
            out of range, or is not the shortest possible UTF-8 encoding for the
            value. No other validation is performed.</remarks> 
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.RuneLen(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            number of bytes required to encode the rune.
            </summary>
            <returns>The length, or -1 if the rune is not a valid value to encode in UTF-8.</returns>
            <param name="rune">Rune to probe.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.EncodeRune(Api.Startup.Utf8Helpers.Rune,System.Byte[],System.Int32)">
            <summary>
            Writes into the destination buffer starting at offset the UTF8 encoded version of the rune
            </summary>
            <returns>The number of bytes written into the destination buffer.</returns>
            <param name="rune">Rune to encode.</param>
            <param name="dest">Destination buffer.</param>
            <param name="offset">Offset into the destination buffer.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.RuneCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns the number of runes in a utf8 encoded buffer
            </summary>
            <returns>Number of runes.</returns>
            <param name="buffer">Byte buffer containing a utf8 string.</param>
            <param name="offset">Starting offset in the buffer.</param>
            <param name="count">Number of bytes to process in buffer, or -1 to process until the end of the buffer.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.Valid(System.Byte[])">
            <summary>
            Reports whether p consists entirely of valid UTF-8-encoded runes.
            </summary>
            <param name="buffer">Byte buffer containing a utf8 string.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.InvalidIndex(System.Byte[])">
            <summary>
            Use to find the index of the first invalid utf8 byte sequence in a buffer
            </summary>
            <returns>The index of the first invalid byte sequence or -1 if the entire buffer is valid.</returns>
            <param name="buffer">Buffer containing the utf8 buffer.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.ValidRune(Api.Startup.Utf8Helpers.Rune)">
            <summary>
             ValidRune reports whether a rune can be legally encoded as UTF-8.
            </summary>
            <returns><c>true</c>, if rune was validated, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.IsDigit(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            IsDigit reports whether the rune is a decimal digit.
            </summary>
            <returns><c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.IsGraphic(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            IsGraphic reports whether the rune is defined as a Graphic by Unicode.
            </summary>
            <returns><c>true</c>, if the rune is a lower case letter, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            Such characters include letters, marks, numbers, punctuation, symbols, and
            spaces, from categories L, M, N, P, S, Zs.
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.IsPrint(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            IsPrint reports whether the rune is defined as printable.
            </summary>
            <returns><c>true</c>, if the rune is a lower case letter, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            Such characters include letters, marks, numbers, punctuation, symbols, and the
            ASCII space character, from categories L, M, N, P, S and the ASCII space
            character. This categorization is the same as IsGraphic except that the
            only spacing character is ASCII space, U+0020.
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.IsControl(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            IsControl reports whether the rune is a control character.
            </summary>
            <returns><c>true</c>, if the rune is a lower case letter, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            The C (Other) Unicode category includes more code points such as surrogates; use C.InRange (r) to test for them.
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.IsLetter(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            IsLetter reports whether the rune is a letter (category L).
            </summary>
            <returns><c>true</c>, if the rune is a letter, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.IsLetterOrDigit(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            IsLetterOrDigit reports whether the rune is a letter (category L) or a digit.
            </summary>
            <returns><c>true</c>, if the rune is a letter or digit, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.IsLetterOrNumber(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            IsLetterOrDigit reports whether the rune is a letter (category L) or a number (category N).
            </summary>
            <returns><c>true</c>, if the rune is a letter or number, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.IsMark(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            IsMark reports whether the rune is a letter (category M).
            </summary>
            <returns><c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            Reports whether the rune is a mark character (category M).
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.IsNumber(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            IsNumber reports whether the rune is a letter (category N).
            </summary>
            <returns><c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            Reports whether the rune is a mark character (category N).
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.IsPunctuation(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            IsPunct reports whether the rune is a letter (category P).
            </summary>
            <returns><c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            Reports whether the rune is a mark character (category P).
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.IsWhiteSpace(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            IsSpace reports whether the rune is a space character as defined by Unicode's White Space property.
            </summary>
            <returns><c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            In the Latin-1 space, white space includes '\t', '\n', '\v', '\f', '\r', ' ', 
            U+0085 (NEL), U+00A0 (NBSP).
            Other definitions of spacing characters are set by category  Z and property Pattern_White_Space.
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.IsSymbol(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            IsSymbol reports whether the rune is a symbolic character.
            </summary>
            <returns><c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.IsUpper(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            Reports whether the rune is an upper case letter.
            </summary>
            <returns><c>true</c>, if the rune is an upper case letter, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.IsLower(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            Reports whether the rune is a lower case letter.
            </summary>
            <returns><c>true</c>, if the rune is a lower case letter, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.IsTitle(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            Reports whether the rune is a title case letter.
            </summary>
            <returns><c>true</c>, if the rune is a lower case letter, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
        </member>
        <member name="T:Api.Startup.Utf8Helpers.Rune.Case">
            <summary>
            The types of cases supported.
            </summary>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Rune.Case.Upper">
            <summary>
            Upper case
            </summary>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Rune.Case.Lower">
            <summary>
            Lower case
            </summary>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Rune.Case.Title">
            <summary>
            Title case capitalizes the first letter, and keeps the rest in lowercase.
            Sometimes it is not as straight forward as the uppercase, some characters require special handling, like
            certain ligatures and Greek characters.
            </summary>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.To(Api.Startup.Utf8Helpers.Rune.Case,Api.Startup.Utf8Helpers.Rune)">
            <summary>
            To maps the rune to the specified case: Case.Upper, Case.Lower, or Case.Title
            </summary>
            <returns>The cased character.</returns>
            <param name="toCase">The destination case.</param>
            <param name="rune">Rune to convert.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.ToUpper(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            ToUpper maps the rune to upper case.
            </summary>
            <returns>The upper cased rune if it can be.</returns>
            <param name="rune">Rune.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.ToLower(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            ToLower maps the rune to lower case.
            </summary>
            <returns>The lower cased rune if it can be.</returns>
            <param name="rune">Rune.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.ToTitle(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            ToLower maps the rune to title case.
            </summary>
            <returns>The lower cased rune if it can be.</returns>
            <param name="rune">Rune.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.SimpleFold(Api.Startup.Utf8Helpers.Rune)">
             <summary>
             SimpleFold iterates over Unicode code points equivalent under
             the Unicode-defined simple case folding.
             </summary>
             <returns>The simple-case folded rune.</returns>
             <param name="rune">Rune.</param>
             <remarks>
             SimpleFold iterates over Unicode code points equivalent under
             the Unicode-defined simple case folding. Among the code points
             equivalent to rune (including rune itself), SimpleFold returns the
             smallest rune > r if one exists, or else the smallest rune >= 0.
             If r is not a valid Unicode code point, SimpleFold(r) returns r.
            
             For example:
             <code>
                  SimpleFold('A') = 'a'
                  SimpleFold('a') = 'A'
            
                  SimpleFold('K') = 'k'
                  SimpleFold('k') = '\u212A' (Kelvin symbol, K)
                  SimpleFold('\u212A') = 'K'
            
                  SimpleFold('1') = '1'
            
                  SimpleFold(-2) = -2
             </code>
             </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.op_Implicit(Api.Startup.Utf8Helpers.Rune)~System.UInt32">
            <summary>
            Implicit operator conversion from a rune to an unsigned integer
            </summary>
            <returns>The unsigned integer representation.</returns>
            <param name="rune">Rune.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.op_Implicit(System.Char)~Api.Startup.Utf8Helpers.Rune">
            <summary>
            Implicit operator conversion from a C# char into a rune.
            </summary>
            <returns>Rune representing the C# character</returns>
            <param name="ch">16-bit Character.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.op_Implicit(System.UInt32)~Api.Startup.Utf8Helpers.Rune">
            <summary>
            Implicit operator conversion from an unsigned integer into a rune.
            </summary>
            <returns>Rune representing the C# character</returns>
            <param name="value">32-bit unsigned integer.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:System.Rune"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Rune"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Rune"/>.</returns>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Rune"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Rune"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Rune"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.ColumnWidth(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            Number of column positions of a wide-character code.   This is used to measure runes as displayed by text-based terminals.
            </summary>
            <returns>The width in columns, 0 if the argument is the null character, -1 if the value is not printable, otherwise the number of columns that the rune occupies.</returns>
            <param name="rune">The rune.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.FullRune(ustring)">
            <summary>
            FullRune reports whether the ustring begins with a full UTF-8 encoding of a rune.
            An invalid encoding is considered a full Rune since it will convert as a width-1 error rune.
            </summary>
            <returns><c>true</c>, if the bytes in p begin with a full UTF-8 encoding of a rune, <c>false</c> otherwise.</returns>
            <param name="str">The string to check.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.DecodeRune(ustring,System.Int32,System.Int32)">
            <summary>
            DecodeRune unpacks the first UTF-8 encoding in the ustring returns the rune and
            its width in bytes. 
            </summary>
            <returns>If p is empty it returns (RuneError, 0). Otherwise, if
            the encoding is invalid, it returns (RuneError, 1). Both are impossible
            results for correct, non-empty UTF-8.
            </returns>
            <param name="str">ustring to decode.</param>
            <param name="start">Starting offset to look into..</param>
            <param name="n">Number of bytes valid in the buffer, or -1 to make it the length of the buffer.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.DecodeLastRune(ustring,System.Int32)">
            <summary>
            DecodeLastRune unpacks the last UTF-8 encoding in the ustring.
            </summary>
            <returns>The last rune and its width in bytes.</returns>
            <param name="str">String to decode rune from;   if it is empty,
            it returns (RuneError, 0). Otherwise, if
            the encoding is invalid, it returns (RuneError, 1). Both are impossible
            results for correct, non-empty UTF-8.</param>
            <param name="end">Scan up to that point, if the value is -1, it sets the value to the length of the buffer.</param>
            <remarks>
            An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
            out of range, or is not the shortest possible UTF-8 encoding for the
            value. No other validation is performed.</remarks> 
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.RuneCount(ustring)">
            <summary>
            Returns the number of runes in a ustring.
            </summary>
            <returns>Number of runes.</returns>
            <param name="str">utf8 string.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.InvalidIndex(ustring)">
            <summary>
            Use to find the index of the first invalid utf8 byte sequence in a buffer
            </summary>
            <returns>The index of the first invalid byte sequence or -1 if the entire buffer is valid.</returns>
            <param name="str">String containing the utf8 buffer.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.Valid(ustring)">
            <summary>
            Reports whether the ustring consists entirely of valid UTF-8-encoded runes.
            </summary>
            <param name="str">String to validate.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Rune.ExpectedSizeFromFirstByte(System.Byte)">
            <summary>
            Given one byte from a utf8 string, return the number of expected bytes that make up the sequence.
            </summary>
            <returns>The number of UTF8 bytes expected given the first prefix.</returns>
            <param name="firstByte">Is the first byte of a UTF8 sequence.</param>
        </member>
        <member name="T:Api.Startup.Utf8Helpers.Unicode">
            <summary>
            Unicode class contains helper methods to support Unicode encoding.
            </summary>
            <remarks>
            <para>
               Generally the Unicode class provided methods that can help you classify and
               convert Unicode code points.  The word codepoint is considered a mouthful so in
               this class, the word "rune" is used instead and is represented by the
               uint value type.  
            </para>
            <para>
               Unicode code points can be produced by combining independent characters,
               so the rune for a character can be produced by combining one character and
               other elements of it.  Runes on the other hand correspond to a specific
               character.
            </para>
            <para>
               This class surfaces various methods to classify case of a Rune, like
               <see cref="M:Unicode.IsUpper"/>, <see cref="M:Unicode.IsLower"/>, <see cref="M:Unicode.IsDigit"/>,
               <see cref="M:Unicode.IsGraphic"/> to convert runes from one case to another using the <see cref="M:Unicode.ToUpper"/>,
               <see cref="M:Unicode.ToLower"/>, <see cref="M:Unicode.ToTitle"/> as well as various constants
               that are useful when working with Unicode runes.
            </para>  
            <para>
               Unicode defines various character classes which are surfaced as RangeTables
               as static properties in this class.   You can probe whether a rune belongs
               to a specific range table
            </para>
            </remarks>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Unicode.Version">
            <summary>
             Version is the Unicode edition from which the tables are derived.
            </summary>
        </member>
        <member name="T:Api.Startup.Utf8Helpers.Unicode.Category">
            <summary>Static class containing the various Unicode category range tables</summary>
            <remarks><para>There are static properties that can be used to fetch a specific category, or you can use the <see cref="M:Unicode.Category.Get"/> method this class to retrieve the RangeTable by its Unicode category table name</para></remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.Category.Get(System.String)">
            <summary>Retrieves the specified RangeTable from the Unicode category name</summary>
            <param name="categoryName">The unicode character category name</param>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Cc">
            <summary>Cc is the set of Unicode characters in category Cc.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Cf">
            <summary>Cf is the set of Unicode characters in category Cf.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Co">
            <summary>Co is the set of Unicode characters in category Co.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Cs">
            <summary>Cs is the set of Unicode characters in category Cs.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Digit">
            <summary>Digit is the set of Unicode characters with the "decimal digit" property.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Nd">
            <summary>Nd is the set of Unicode characters in category Nd.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Letter">
            <summary>Letter/L is the set of Unicode letters, category L.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.L">
            <summary>Letter/L is the set of Unicode letters, category L.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Lm">
            <summary>Lm is the set of Unicode characters in category Lm.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Lo">
            <summary>Lo is the set of Unicode characters in category Lo.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Lower">
            <summary>Lower is the set of Unicode lower case letters.</summary>;
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Ll">
            <summary>Ll is the set of Unicode characters in category Ll.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Mark">
            <summary>Mark/M is the set of Unicode mark characters, category M.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.M">
            <summary>Mark/M is the set of Unicode mark characters, category M.</summary>;
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Mc">
            <summary>Mc is the set of Unicode characters in category Mc.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Me">
            <summary>Me is the set of Unicode characters in category Me.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Mn">
            <summary>Mn is the set of Unicode characters in category Mn.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Nl">
            <summary>Nl is the set of Unicode characters in category Nl.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.No">
            <summary>No is the set of Unicode characters in category No.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Number">
            <summary>Number/N is the set of Unicode number characters, category N.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.N">
            <summary>Number/N is the set of Unicode number characters, category N.</summary>;
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Other">
            <summary>Other/C is the set of Unicode control and special characters, category C.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.C">
            <summary>Other/C is the set of Unicode control and special characters, category C.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Pc">
            <summary>Pc is the set of Unicode characters in category Pc.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Pd">
            <summary>Pd is the set of Unicode characters in category Pd.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Pe">
            <summary>Pe is the set of Unicode characters in category Pe.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Pf">
            <summary>Pf is the set of Unicode characters in category Pf.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Pi">
            <summary>Pi is the set of Unicode characters in category Pi.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Po">
            <summary>Po is the set of Unicode characters in category Po.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Ps">
            <summary>Ps is the set of Unicode characters in category Ps.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Punct">
            <summary>Punct/P is the set of Unicode punctuation characters, category P.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.P">
            <summary>Punct/P is the set of Unicode punctuation characters, category P.</summary>;
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Sc">
            <summary>Sc is the set of Unicode characters in category Sc.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Sk">
            <summary>Sk is the set of Unicode characters in category Sk.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Sm">
            <summary>Sm is the set of Unicode characters in category Sm.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.So">
            <summary>So is the set of Unicode characters in category So.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Space">
            <summary>Space/Z is the set of Unicode space characters, category Z.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Z">
            <summary>Space/Z is the set of Unicode space characters, category Z.</summary>;
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Symbol">
            <summary>Symbol/S is the set of Unicode symbol characters, category S.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.S">
            <summary>Symbol/S is the set of Unicode symbol characters, category S.</summary>;
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Title">
            <summary>Title is the set of Unicode title case letters.</summary>;
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Lt">
            <summary>Lt is the set of Unicode characters in category Lt.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Upper">
            <summary>Upper is the set of Unicode upper case letters.</summary>;
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Lu">
            <summary>Lu is the set of Unicode characters in category Lu.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Zl">
            <summary>Zl is the set of Unicode characters in category Zl.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Zp">
            <summary>Zp is the set of Unicode characters in category Zp.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Category.Zs">
            <summary>Zs is the set of Unicode characters in category Zs.</summary>
        </member>
        <member name="T:Api.Startup.Utf8Helpers.Unicode.Script">
            <summary>Static class containing the Unicode script tables.</summary>
            <remarks><para>There are static properties that can be used to fetch a specific category, or you can use the <see cref="T:Unicode.Script.Get"/> method in this class to retrieve the range table by its script name</para></remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.Script.Get(System.String)">
            <summary>Retrieves the specified RangeTable from the Unicode script name.</summary>
            <param name="scriptName">The unicode script name</param>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Adlam">
            <summary>Adlam is the set of Unicode characters in script Adlam.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Ahom">
            <summary>Ahom is the set of Unicode characters in script Ahom.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Anatolian_Hieroglyphs">
            <summary>Anatolian_Hieroglyphs is the set of Unicode characters in script Anatolian_Hieroglyphs.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Arabic">
            <summary>Arabic is the set of Unicode characters in script Arabic.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Armenian">
            <summary>Armenian is the set of Unicode characters in script Armenian.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Avestan">
            <summary>Avestan is the set of Unicode characters in script Avestan.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Balinese">
            <summary>Balinese is the set of Unicode characters in script Balinese.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Bamum">
            <summary>Bamum is the set of Unicode characters in script Bamum.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Bassa_Vah">
            <summary>Bassa_Vah is the set of Unicode characters in script Bassa_Vah.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Batak">
            <summary>Batak is the set of Unicode characters in script Batak.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Bengali">
            <summary>Bengali is the set of Unicode characters in script Bengali.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Bhaiksuki">
            <summary>Bhaiksuki is the set of Unicode characters in script Bhaiksuki.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Bopomofo">
            <summary>Bopomofo is the set of Unicode characters in script Bopomofo.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Brahmi">
            <summary>Brahmi is the set of Unicode characters in script Brahmi.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Braille">
            <summary>Braille is the set of Unicode characters in script Braille.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Buginese">
            <summary>Buginese is the set of Unicode characters in script Buginese.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Buhid">
            <summary>Buhid is the set of Unicode characters in script Buhid.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Canadian_Aboriginal">
            <summary>Canadian_Aboriginal is the set of Unicode characters in script Canadian_Aboriginal.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Carian">
            <summary>Carian is the set of Unicode characters in script Carian.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Caucasian_Albanian">
            <summary>Caucasian_Albanian is the set of Unicode characters in script Caucasian_Albanian.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Chakma">
            <summary>Chakma is the set of Unicode characters in script Chakma.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Cham">
            <summary>Cham is the set of Unicode characters in script Cham.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Cherokee">
            <summary>Cherokee is the set of Unicode characters in script Cherokee.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Chorasmian">
            <summary>Chorasmian is the set of Unicode characters in script Chorasmian.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Common">
            <summary>Common is the set of Unicode characters in script Common.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Coptic">
            <summary>Coptic is the set of Unicode characters in script Coptic.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Cuneiform">
            <summary>Cuneiform is the set of Unicode characters in script Cuneiform.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Cypriot">
            <summary>Cypriot is the set of Unicode characters in script Cypriot.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Cyrillic">
            <summary>Cyrillic is the set of Unicode characters in script Cyrillic.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Deseret">
            <summary>Deseret is the set of Unicode characters in script Deseret.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Devanagari">
            <summary>Devanagari is the set of Unicode characters in script Devanagari.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Dives_Akuru">
            <summary>Dives_Akuru is the set of Unicode characters in script Dives_Akuru.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Dogra">
            <summary>Dogra is the set of Unicode characters in script Dogra.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Duployan">
            <summary>Duployan is the set of Unicode characters in script Duployan.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Egyptian_Hieroglyphs">
            <summary>Egyptian_Hieroglyphs is the set of Unicode characters in script Egyptian_Hieroglyphs.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Elbasan">
            <summary>Elbasan is the set of Unicode characters in script Elbasan.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Elymaic">
            <summary>Elymaic is the set of Unicode characters in script Elymaic.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Ethiopic">
            <summary>Ethiopic is the set of Unicode characters in script Ethiopic.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Georgian">
            <summary>Georgian is the set of Unicode characters in script Georgian.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Glagolitic">
            <summary>Glagolitic is the set of Unicode characters in script Glagolitic.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Gothic">
            <summary>Gothic is the set of Unicode characters in script Gothic.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Grantha">
            <summary>Grantha is the set of Unicode characters in script Grantha.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Greek">
            <summary>Greek is the set of Unicode characters in script Greek.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Gujarati">
            <summary>Gujarati is the set of Unicode characters in script Gujarati.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Gunjala_Gondi">
            <summary>Gunjala_Gondi is the set of Unicode characters in script Gunjala_Gondi.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Gurmukhi">
            <summary>Gurmukhi is the set of Unicode characters in script Gurmukhi.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Han">
            <summary>Han is the set of Unicode characters in script Han.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Hangul">
            <summary>Hangul is the set of Unicode characters in script Hangul.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Hanifi_Rohingya">
            <summary>Hanifi_Rohingya is the set of Unicode characters in script Hanifi_Rohingya.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Hanunoo">
            <summary>Hanunoo is the set of Unicode characters in script Hanunoo.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Hatran">
            <summary>Hatran is the set of Unicode characters in script Hatran.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Hebrew">
            <summary>Hebrew is the set of Unicode characters in script Hebrew.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Hiragana">
            <summary>Hiragana is the set of Unicode characters in script Hiragana.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Imperial_Aramaic">
            <summary>Imperial_Aramaic is the set of Unicode characters in script Imperial_Aramaic.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Inherited">
            <summary>Inherited is the set of Unicode characters in script Inherited.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Inscriptional_Pahlavi">
            <summary>Inscriptional_Pahlavi is the set of Unicode characters in script Inscriptional_Pahlavi.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Inscriptional_Parthian">
            <summary>Inscriptional_Parthian is the set of Unicode characters in script Inscriptional_Parthian.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Javanese">
            <summary>Javanese is the set of Unicode characters in script Javanese.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Kaithi">
            <summary>Kaithi is the set of Unicode characters in script Kaithi.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Kannada">
            <summary>Kannada is the set of Unicode characters in script Kannada.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Katakana">
            <summary>Katakana is the set of Unicode characters in script Katakana.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Kayah_Li">
            <summary>Kayah_Li is the set of Unicode characters in script Kayah_Li.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Kharoshthi">
            <summary>Kharoshthi is the set of Unicode characters in script Kharoshthi.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Khitan_Small_Script">
            <summary>Khitan_Small_Script is the set of Unicode characters in script Khitan_Small_Script.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Khmer">
            <summary>Khmer is the set of Unicode characters in script Khmer.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Khojki">
            <summary>Khojki is the set of Unicode characters in script Khojki.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Khudawadi">
            <summary>Khudawadi is the set of Unicode characters in script Khudawadi.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Lao">
            <summary>Lao is the set of Unicode characters in script Lao.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Latin">
            <summary>Latin is the set of Unicode characters in script Latin.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Lepcha">
            <summary>Lepcha is the set of Unicode characters in script Lepcha.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Limbu">
            <summary>Limbu is the set of Unicode characters in script Limbu.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Linear_A">
            <summary>Linear_A is the set of Unicode characters in script Linear_A.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Linear_B">
            <summary>Linear_B is the set of Unicode characters in script Linear_B.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Lisu">
            <summary>Lisu is the set of Unicode characters in script Lisu.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Lycian">
            <summary>Lycian is the set of Unicode characters in script Lycian.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Lydian">
            <summary>Lydian is the set of Unicode characters in script Lydian.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Mahajani">
            <summary>Mahajani is the set of Unicode characters in script Mahajani.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Makasar">
            <summary>Makasar is the set of Unicode characters in script Makasar.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Malayalam">
            <summary>Malayalam is the set of Unicode characters in script Malayalam.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Mandaic">
            <summary>Mandaic is the set of Unicode characters in script Mandaic.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Manichaean">
            <summary>Manichaean is the set of Unicode characters in script Manichaean.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Marchen">
            <summary>Marchen is the set of Unicode characters in script Marchen.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Masaram_Gondi">
            <summary>Masaram_Gondi is the set of Unicode characters in script Masaram_Gondi.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Medefaidrin">
            <summary>Medefaidrin is the set of Unicode characters in script Medefaidrin.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Meetei_Mayek">
            <summary>Meetei_Mayek is the set of Unicode characters in script Meetei_Mayek.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Mende_Kikakui">
            <summary>Mende_Kikakui is the set of Unicode characters in script Mende_Kikakui.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Meroitic_Cursive">
            <summary>Meroitic_Cursive is the set of Unicode characters in script Meroitic_Cursive.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Meroitic_Hieroglyphs">
            <summary>Meroitic_Hieroglyphs is the set of Unicode characters in script Meroitic_Hieroglyphs.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Miao">
            <summary>Miao is the set of Unicode characters in script Miao.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Modi">
            <summary>Modi is the set of Unicode characters in script Modi.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Mongolian">
            <summary>Mongolian is the set of Unicode characters in script Mongolian.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Mro">
            <summary>Mro is the set of Unicode characters in script Mro.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Multani">
            <summary>Multani is the set of Unicode characters in script Multani.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Myanmar">
            <summary>Myanmar is the set of Unicode characters in script Myanmar.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Nabataean">
            <summary>Nabataean is the set of Unicode characters in script Nabataean.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Nandinagari">
            <summary>Nandinagari is the set of Unicode characters in script Nandinagari.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.New_Tai_Lue">
            <summary>New_Tai_Lue is the set of Unicode characters in script New_Tai_Lue.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Newa">
            <summary>Newa is the set of Unicode characters in script Newa.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Nko">
            <summary>Nko is the set of Unicode characters in script Nko.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Nushu">
            <summary>Nushu is the set of Unicode characters in script Nushu.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Nyiakeng_Puachue_Hmong">
            <summary>Nyiakeng_Puachue_Hmong is the set of Unicode characters in script Nyiakeng_Puachue_Hmong.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Ogham">
            <summary>Ogham is the set of Unicode characters in script Ogham.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Ol_Chiki">
            <summary>Ol_Chiki is the set of Unicode characters in script Ol_Chiki.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Old_Hungarian">
            <summary>Old_Hungarian is the set of Unicode characters in script Old_Hungarian.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Old_Italic">
            <summary>Old_Italic is the set of Unicode characters in script Old_Italic.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Old_North_Arabian">
            <summary>Old_North_Arabian is the set of Unicode characters in script Old_North_Arabian.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Old_Permic">
            <summary>Old_Permic is the set of Unicode characters in script Old_Permic.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Old_Persian">
            <summary>Old_Persian is the set of Unicode characters in script Old_Persian.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Old_Sogdian">
            <summary>Old_Sogdian is the set of Unicode characters in script Old_Sogdian.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Old_South_Arabian">
            <summary>Old_South_Arabian is the set of Unicode characters in script Old_South_Arabian.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Old_Turkic">
            <summary>Old_Turkic is the set of Unicode characters in script Old_Turkic.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Oriya">
            <summary>Oriya is the set of Unicode characters in script Oriya.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Osage">
            <summary>Osage is the set of Unicode characters in script Osage.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Osmanya">
            <summary>Osmanya is the set of Unicode characters in script Osmanya.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Pahawh_Hmong">
            <summary>Pahawh_Hmong is the set of Unicode characters in script Pahawh_Hmong.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Palmyrene">
            <summary>Palmyrene is the set of Unicode characters in script Palmyrene.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Pau_Cin_Hau">
            <summary>Pau_Cin_Hau is the set of Unicode characters in script Pau_Cin_Hau.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Phags_Pa">
            <summary>Phags_Pa is the set of Unicode characters in script Phags_Pa.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Phoenician">
            <summary>Phoenician is the set of Unicode characters in script Phoenician.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Psalter_Pahlavi">
            <summary>Psalter_Pahlavi is the set of Unicode characters in script Psalter_Pahlavi.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Rejang">
            <summary>Rejang is the set of Unicode characters in script Rejang.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Runic">
            <summary>Runic is the set of Unicode characters in script Runic.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Samaritan">
            <summary>Samaritan is the set of Unicode characters in script Samaritan.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Saurashtra">
            <summary>Saurashtra is the set of Unicode characters in script Saurashtra.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Sharada">
            <summary>Sharada is the set of Unicode characters in script Sharada.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Shavian">
            <summary>Shavian is the set of Unicode characters in script Shavian.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Siddham">
            <summary>Siddham is the set of Unicode characters in script Siddham.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.SignWriting">
            <summary>SignWriting is the set of Unicode characters in script SignWriting.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Sinhala">
            <summary>Sinhala is the set of Unicode characters in script Sinhala.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Sogdian">
            <summary>Sogdian is the set of Unicode characters in script Sogdian.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Sora_Sompeng">
            <summary>Sora_Sompeng is the set of Unicode characters in script Sora_Sompeng.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Soyombo">
            <summary>Soyombo is the set of Unicode characters in script Soyombo.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Sundanese">
            <summary>Sundanese is the set of Unicode characters in script Sundanese.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Syloti_Nagri">
            <summary>Syloti_Nagri is the set of Unicode characters in script Syloti_Nagri.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Syriac">
            <summary>Syriac is the set of Unicode characters in script Syriac.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Tagalog">
            <summary>Tagalog is the set of Unicode characters in script Tagalog.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Tagbanwa">
            <summary>Tagbanwa is the set of Unicode characters in script Tagbanwa.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Tai_Le">
            <summary>Tai_Le is the set of Unicode characters in script Tai_Le.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Tai_Tham">
            <summary>Tai_Tham is the set of Unicode characters in script Tai_Tham.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Tai_Viet">
            <summary>Tai_Viet is the set of Unicode characters in script Tai_Viet.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Takri">
            <summary>Takri is the set of Unicode characters in script Takri.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Tamil">
            <summary>Tamil is the set of Unicode characters in script Tamil.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Tangut">
            <summary>Tangut is the set of Unicode characters in script Tangut.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Telugu">
            <summary>Telugu is the set of Unicode characters in script Telugu.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Thaana">
            <summary>Thaana is the set of Unicode characters in script Thaana.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Thai">
            <summary>Thai is the set of Unicode characters in script Thai.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Tibetan">
            <summary>Tibetan is the set of Unicode characters in script Tibetan.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Tifinagh">
            <summary>Tifinagh is the set of Unicode characters in script Tifinagh.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Tirhuta">
            <summary>Tirhuta is the set of Unicode characters in script Tirhuta.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Ugaritic">
            <summary>Ugaritic is the set of Unicode characters in script Ugaritic.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Vai">
            <summary>Vai is the set of Unicode characters in script Vai.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Wancho">
            <summary>Wancho is the set of Unicode characters in script Wancho.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Warang_Citi">
            <summary>Warang_Citi is the set of Unicode characters in script Warang_Citi.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Yezidi">
            <summary>Yezidi is the set of Unicode characters in script Yezidi.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Yi">
            <summary>Yi is the set of Unicode characters in script Yi.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Script.Zanabazar_Square">
            <summary>Zanabazar_Square is the set of Unicode characters in script Zanabazar_Square.</summary>
        </member>
        <member name="T:Api.Startup.Utf8Helpers.Unicode.Property">
            <summary>Static class containing the proeprty-based tables.</summary>
            <remarks><para>There are static properties that can be used to fetch RangeTables that identify characters that have a specific property, or you can use the <see cref="T:Unicode.Property.Get"/> method in this class to retrieve the range table by the property name</para></remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.Property.Get(System.String)">
            <summary>Retrieves the specified RangeTable having that property.</summary>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.ASCII_Hex_Digit">
            <summary>ASCII_Hex_Digit is the set of Unicode characters with property ASCII_Hex_Digit.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Bidi_Control">
            <summary>Bidi_Control is the set of Unicode characters with property Bidi_Control.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Dash">
            <summary>Dash is the set of Unicode characters with property Dash.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Deprecated">
            <summary>Deprecated is the set of Unicode characters with property Deprecated.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Diacritic">
            <summary>Diacritic is the set of Unicode characters with property Diacritic.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Extender">
            <summary>Extender is the set of Unicode characters with property Extender.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Hex_Digit">
            <summary>Hex_Digit is the set of Unicode characters with property Hex_Digit.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Hyphen">
            <summary>Hyphen is the set of Unicode characters with property Hyphen.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.IDS_Binary_Operator">
            <summary>IDS_Binary_Operator is the set of Unicode characters with property IDS_Binary_Operator.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.IDS_Trinary_Operator">
            <summary>IDS_Trinary_Operator is the set of Unicode characters with property IDS_Trinary_Operator.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Ideographic">
            <summary>Ideographic is the set of Unicode characters with property Ideographic.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Join_Control">
            <summary>Join_Control is the set of Unicode characters with property Join_Control.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Logical_Order_Exception">
            <summary>Logical_Order_Exception is the set of Unicode characters with property Logical_Order_Exception.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Noncharacter_Code_Point">
            <summary>Noncharacter_Code_Point is the set of Unicode characters with property Noncharacter_Code_Point.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Other_Alphabetic">
            <summary>Other_Alphabetic is the set of Unicode characters with property Other_Alphabetic.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Other_Default_Ignorable_Code_Point">
            <summary>Other_Default_Ignorable_Code_Point is the set of Unicode characters with property Other_Default_Ignorable_Code_Point.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Other_Grapheme_Extend">
            <summary>Other_Grapheme_Extend is the set of Unicode characters with property Other_Grapheme_Extend.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Other_ID_Continue">
            <summary>Other_ID_Continue is the set of Unicode characters with property Other_ID_Continue.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Other_ID_Start">
            <summary>Other_ID_Start is the set of Unicode characters with property Other_ID_Start.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Other_Lowercase">
            <summary>Other_Lowercase is the set of Unicode characters with property Other_Lowercase.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Other_Math">
            <summary>Other_Math is the set of Unicode characters with property Other_Math.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Other_Uppercase">
            <summary>Other_Uppercase is the set of Unicode characters with property Other_Uppercase.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Pattern_Syntax">
            <summary>Pattern_Syntax is the set of Unicode characters with property Pattern_Syntax.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Pattern_White_Space">
            <summary>Pattern_White_Space is the set of Unicode characters with property Pattern_White_Space.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Prepended_Concatenation_Mark">
            <summary>Prepended_Concatenation_Mark is the set of Unicode characters with property Prepended_Concatenation_Mark.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Quotation_Mark">
            <summary>Quotation_Mark is the set of Unicode characters with property Quotation_Mark.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Radical">
            <summary>Radical is the set of Unicode characters with property Radical.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Regional_Indicator">
            <summary>Regional_Indicator is the set of Unicode characters with property Regional_Indicator.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.STerm">
            <summary>STerm is an alias for Sentence_Terminal.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Sentence_Terminal">
            <summary>Sentence_Terminal is the set of Unicode characters with property Sentence_Terminal.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Soft_Dotted">
            <summary>Soft_Dotted is the set of Unicode characters with property Soft_Dotted.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Terminal_Punctuation">
            <summary>Terminal_Punctuation is the set of Unicode characters with property Terminal_Punctuation.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Unified_Ideograph">
            <summary>Unified_Ideograph is the set of Unicode characters with property Unified_Ideograph.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.Variation_Selector">
            <summary>Variation_Selector is the set of Unicode characters with property Variation_Selector.</summary>
        </member>
        <member name="P:Api.Startup.Utf8Helpers.Unicode.Property.White_Space">
            <summary>White_Space is the set of Unicode characters with property White_Space.</summary>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Unicode.TurkishCase">
            <summary>
            Special casing rules for Turkish.
            </summary>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.IsDigit(System.UInt32)">
            <summary>
            IsDigit reports whether the rune is a decimal digit.
            </summary>
            <returns><c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Unicode.GraphicRanges">
            <summary>
            The range tables for graphics
            </summary>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Unicode.PrintRanges">
            <summary>
            The range tables for print
            </summary>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.IsRuneInRanges(System.UInt32,Api.Startup.Utf8Helpers.Unicode.RangeTable[])">
            <summary>
            Determines if a rune is on a set of ranges.
            </summary>
            <returns><c>true</c>, if rune in ranges was used, <c>false</c> otherwise.</returns>
            <param name="rune">Rune.</param>
            <param name="inRanges">In ranges.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.IsGraphic(System.UInt32)">
            <summary>
            IsGraphic reports whether the rune is defined as a Graphic by Unicode.
            </summary>
            <returns><c>true</c>, if the rune is a lower case letter, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            Such characters include letters, marks, numbers, punctuation, symbols, and
            spaces, from categories L, M, N, P, S, Zs.
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.IsPrint(System.UInt32)">
            <summary>
            IsPrint reports whether the rune is defined as printable.
            </summary>
            <returns><c>true</c>, if the rune is a lower case letter, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            Such characters include letters, marks, numbers, punctuation, symbols, and the
            ASCII space character, from categories L, M, N, P, S and the ASCII space
            character. This categorization is the same as IsGraphic except that the
            only spacing character is ASCII space, U+0020.
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.IsControl(System.UInt32)">
            <summary>
            IsControl reports whether the rune is a control character.
            </summary>
            <returns><c>true</c>, if the rune is a lower case letter, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            The C (Other) Unicode category includes more code points such as surrogates; use C.InRange (r) to test for them.
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.IsLetter(System.UInt32)">
            <summary>
            IsLetter reports whether the rune is a letter (category L).
            </summary>
            <returns><c>true</c>, if the rune is a letter, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.IsMark(System.UInt32)">
            <summary>
            IsMark reports whether the rune is a letter (category M).
            </summary>
            <returns><c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            Reports whether the rune is a mark character (category M).
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.IsNumber(System.UInt32)">
            <summary>
            IsNumber reports whether the rune is a letter (category N).
            </summary>
            <returns><c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            Reports whether the rune is a mark character (category N).
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.IsPunct(System.UInt32)">
            <summary>
            IsPunct reports whether the rune is a letter (category P).
            </summary>
            <returns><c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            Reports whether the rune is a mark character (category P).
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.IsSpace(System.UInt32)">
            <summary>
            IsSpace reports whether the rune is a space character as defined by Unicode's White Space property.
            </summary>
            <returns><c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
            <remarks>
            In the Latin-1 space, white space includes '\t', '\n', '\v', '\f', '\r', ' ', 
            U+0085 (NEL), U+00A0 (NBSP).
            Other definitions of spacing characters are set by category  Z and property Pattern_White_Space.
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.IsSymbol(System.UInt32)">
            <summary>
            IsSymbol reports whether the rune is a symbolic character.
            </summary>
            <returns><c>true</c>, if the rune is a mark, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Unicode.MaxRune">
            <summary>
            Maximum valid Unicode code point.
            </summary> 
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Unicode.ReplacementChar">
            <summary>
            Represents invalid code points.
            </summary>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Unicode.MaxAscii">
            <summary>
            The maximum ASCII value.
            </summary>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Unicode.MaxLatin1">
            <summary>
            The maximum latin1 value.
            </summary>
        </member>
        <member name="T:Api.Startup.Utf8Helpers.Unicode.RangeTable">
            <summary>
            Range tables describe classes of unicode code points.
            </summary>
            
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Unicode.RangeTable.LatinOffset">
            <summary>
            The number of entries in the short range table (R16) with with Hi being less than MaxLatin1
            </summary>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.RangeTable.InRange(System.UInt32)">
            <summary>
            Used to determine if a given rune is in the range of this RangeTable.
            </summary>
            <returns><c>true</c>, if the rune is in this RangeTable, <c>false</c> otherwise.</returns>
            <param name="rune">Rune.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.RangeTable.IsExcludingLatin(System.UInt32)">
            <summary>
            Used to determine if a given rune is in the range of this RangeTable, excluding latin1 characters.
            </summary>
            <returns><c>true</c>, if the rune is part of the range (not including latin), <c>false</c> otherwise.</returns>
            <param name="rune">Rune.</param>
        </member>
        <member name="T:Api.Startup.Utf8Helpers.Unicode.Case">
            <summary>
            The types of cases supported.
            </summary>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Unicode.Case.Upper">
            <summary>
            Upper case
            </summary>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Unicode.Case.Lower">
            <summary>
            Lower case
            </summary>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Unicode.Case.Title">
            <summary>
            Titlecase capitalizes the first letter, and keeps the rest in lowercase.
            Sometimes it is not as straight forward as the uppercase, some characters require special handling, like
            certain ligatures and greek characters.
            </summary>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.IsUpper(System.UInt32)">
            <summary>
            Reports whether the rune is an upper case letter.
            </summary>
            <returns><c>true</c>, if the rune is an upper case lette, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.IsLower(System.UInt32)">
            <summary>
            Reports whether the rune is a lower case letter.
            </summary>
            <returns><c>true</c>, if the rune is a lower case lette, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.IsTitle(System.UInt32)">
            <summary>
            Reports whether the rune is a title case letter.
            </summary>
            <returns><c>true</c>, if the rune is a lower case lette, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test for.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.To(Api.Startup.Utf8Helpers.Unicode.Case,System.UInt32)">
            <summary>
            To maps the rune to the specified case: Case.Upper, Case.Lower, or Case.Title
            </summary>
            <returns>The cased character.</returns>
            <param name="toCase">The destination case.</param>
            <param name="rune">Rune to convert.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.ToUpper(System.UInt32)">
            <summary>
            ToUpper maps the rune to upper case.
            </summary>
            <returns>The upper cased rune if it can be.</returns>
            <param name="rune">Rune.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.ToLower(System.UInt32)">
            <summary>
            ToLower maps the rune to lower case.
            </summary>
            <returns>The lower cased rune if it can be.</returns>
            <param name="rune">Rune.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.ToTitle(System.UInt32)">
            <summary>
            ToLower maps the rune to title case.
            </summary>
            <returns>The lower cased rune if it can be.</returns>
            <param name="rune">Rune.</param>
        </member>
        <member name="T:Api.Startup.Utf8Helpers.Unicode.SpecialCase">
            <summary>
            SpecialCase represents language-specific case mappings such as Turkish.
            </summary>
            <remarks>
            Methods of SpecialCase customize (by overriding) the standard mappings.
            </remarks>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.SpecialCase.ToUpper(System.UInt32)">
            <summary>
            ToUpper maps the rune to upper case giving priority to the special mapping.
            </summary>
            <returns>The upper cased rune if it can be.</returns>
            <param name="rune">Rune.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.SpecialCase.ToTitle(System.UInt32)">
            <summary>
            ToTitle maps the rune to title case giving priority to the special mapping.
            </summary>
            <returns>The title cased rune if it can be.</returns>
            <param name="rune">Rune.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.SpecialCase.ToLower(System.UInt32)">
            <summary>
            ToLower maps the rune to lower case giving priority to the special mapping.
            </summary>
            <returns>The lower cased rune if it can be.</returns>
            <param name="rune">Rune.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Unicode.SimpleFold(System.UInt32)">
             <summary>
             SimpleFold iterates over Unicode code points equivalent under
             the Unicode-defined simple case folding.
             </summary>
             <returns>The simple-case folded rune.</returns>
             <param name="rune">Rune.</param>
             <remarks>
             SimpleFold iterates over Unicode code points equivalent under
             the Unicode-defined simple case folding. Among the code points
             equivalent to rune (including rune itself), SimpleFold returns the
             smallest rune > r if one exists, or else the smallest rune >= 0.
             If r is not a valid Unicode code point, SimpleFold(r) returns r.
            
             For example:
             <code>
                  SimpleFold('A') = 'a'
                  SimpleFold('a') = 'A'
            
                  SimpleFold('K') = 'k'
                  SimpleFold('k') = '\u212A' (Kelvin symbol, K)
                  SimpleFold('\u212A') = 'K'
            
                  SimpleFold('1') = '1'
            
                  SimpleFold(-2) = -2
             </code>
             </remarks>
        </member>
        <member name="T:Api.Startup.Utf8Helpers.Utf8">
            <summary>
            UTF8 Helper methods and routines.
            </summary>
            <remarks>
            The term "rune" is used to represent a Unicode code point merely because it is a shorter way of talking about it.
            </remarks>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Utf8.RuneError">
            <summary>
            The "error" Rune or "Unicode replacement character"
            </summary>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Utf8.RuneSelf">
            <summary>
            Characters below RuneSelf are represented as themselves in a single byte
            </summary>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Utf8.Utf8Max">
            <summary>
            Maximum number of bytes required to encode every unicode code point.
            </summary>
        </member>
        <member name="F:Api.Startup.Utf8Helpers.Utf8.MaxRune">
            <summary>
            Maximum valid Unicode code point.
            </summary>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Utf8.FullRune(System.Byte[])">
            <summary>
            FullRune reports whether the bytes in p begin with a full UTF-8 encoding of a rune.
            An invalid encoding is considered a full Rune since it will convert as a width-1 error rune.
            </summary>
            <returns><c>true</c>, if the bytes in p begin with a full UTF-8 encoding of a rune, <c>false</c> otherwise.</returns>
            <param name="p">byte array.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Utf8.FullRune(ustring)">
            <summary>
            FullRune reports whether the ustring begins with a full UTF-8 encoding of a rune.
            An invalid encoding is considered a full Rune since it will convert as a width-1 error rune.
            </summary>
            <returns><c>true</c>, if the bytes in p begin with a full UTF-8 encoding of a rune, <c>false</c> otherwise.</returns>
            <param name="str">The string to check.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Utf8.DecodeRune(System.Byte[],System.Int32,System.Int32)">
            <summary>
            DecodeRune unpacks the first UTF-8 encoding in p and returns the rune and
            its width in bytes. 
            </summary>
            <returns>If p is empty it returns (RuneError, 0). Otherwise, if
            the encoding is invalid, it returns (RuneError, 1). Both are impossible
            results for correct, non-empty UTF-8.
            </returns>
            <param name="buffer">Byte buffer containing the utf8 string.</param>
            <param name="start">Starting offset to look into..</param>
            <param name="n">Number of bytes valid in the buffer, or -1 to make it the lenght of the buffer.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Utf8.DecodeRune(ustring,System.Int32,System.Int32)">
            <summary>
            DecodeRune unpacks the first UTF-8 encoding in the ustring returns the rune and
            its width in bytes. 
            </summary>
            <returns>If p is empty it returns (RuneError, 0). Otherwise, if
            the encoding is invalid, it returns (RuneError, 1). Both are impossible
            results for correct, non-empty UTF-8.
            </returns>
            <param name="str">ustring to decode.</param>
            <param name="start">Starting offset to look into..</param>
            <param name="n">Number of bytes valid in the buffer, or -1 to make it the lenght of the buffer.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Utf8.DecodeLastRune(System.Byte[],System.Int32)">
            <summary>
            DecodeLastRune unpacks the last UTF-8 encoding in buffer
            </summary>
            <returns>The last rune and its width in bytes.</returns>
            <param name="buffer">Buffer to decode rune from;   if it is empty,
            it returns (RuneError, 0). Otherwise, if
            the encoding is invalid, it returns (RuneError, 1). Both are impossible
            results for correct, non-empty UTF-8.</param>
            <param name="end">Scan up to that point, if the value is -1, it sets the value to the lenght of the buffer.</param>
            <remarks>
            An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
            out of range, or is not the shortest possible UTF-8 encoding for the
            value. No other validation is performed.</remarks> 
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Utf8.DecodeLastRune(ustring,System.Int32)">
            <summary>
            DecodeLastRune unpacks the last UTF-8 encoding in the ustring.
            </summary>
            <returns>The last rune and its width in bytes.</returns>
            <param name="str">String to decode rune from;   if it is empty,
            it returns (RuneError, 0). Otherwise, if
            the encoding is invalid, it returns (RuneError, 1). Both are impossible
            results for correct, non-empty UTF-8.</param>
            <param name="end">Scan up to that point, if the value is -1, it sets the value to the lenght of the buffer.</param>
            <remarks>
            An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
            out of range, or is not the shortest possible UTF-8 encoding for the
            value. No other validation is performed.</remarks> 
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Utf8.RuneLen(System.UInt32)">
            <summary>
            number of bytes required to encode the rune.
            </summary>
            <returns>The length, or -1 if the rune is not a valid value to encode in UTF-8.</returns>
            <param name="rune">Rune to probe.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Utf8.EncodeRune(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Writes into the destination buffer starting at offset the UTF8 encoded version of the rune
            </summary>
            <returns>The number of bytes written into the destination buffer.</returns>
            <param name="rune">Rune to encode.</param>
            <param name="dest">Destination buffer.</param>
            <param name="offset">Offset into the destination buffer.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Utf8.RuneCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns the number of runes in a utf8 encoded buffer
            </summary>
            <returns>Numnber of runes.</returns>
            <param name="buffer">Byte buffer containing a utf8 string.</param>
            <param name="offset">Starting offset in the buffer.</param>
            <param name="count">Number of bytes to process in buffer, or -1 to process until the end of the buffer.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Utf8.RuneCount(ustring)">
            <summary>
            Returns the number of runes in a ustring.
            </summary>
            <returns>Numnber of runes.</returns>
            <param name="str">utf8 string.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Utf8.Valid(System.Byte[])">
            <summary>
            Reports whether p consists entirely of valid UTF-8-encoded runes.
            </summary>
            <param name="buffer">Byte buffer containing a utf8 string.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Utf8.Valid(ustring)">
            <summary>
            Reports whether the ustring consists entirely of valid UTF-8-encoded runes.
            </summary>
            <param name="str">String to validate.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Utf8.InvalidIndex(System.Byte[])">
            <summary>
            Use to find the index of the first invalid utf8 byte sequence in a buffer
            </summary>
            <returns>The index of the first insvalid byte sequence or -1 if the entire buffer is valid.</returns>
            <param name="buffer">Buffer containing the utf8 buffer.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Utf8.InvalidIndex(ustring)">
            <summary>
            Use to find the index of the first invalid utf8 byte sequence in a buffer
            </summary>
            <returns>The index of the first insvalid byte sequence or -1 if the entire buffer is valid.</returns>
            <param name="str">String containing the utf8 buffer.</param>
        </member>
        <member name="M:Api.Startup.Utf8Helpers.Utf8.ValidRune(System.UInt32)">
            <summary>
             ValidRune reports whether a rune can be legally encoded as UTF-8.
            </summary>
            <returns><c>true</c>, if rune was valided, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test.</param>
        </member>
        <member name="T:Api.Startup.CacheConfig`1">
            <summary>
            Config indicating how a service should cache its content.
            </summary>
        </member>
        <member name="F:Api.Startup.CacheConfig`1.OnChange">
            <summary>
            Runs when an item has been updated.
            If the first object is null and the second is not null, this is a first time add.
            If they're both set, it's an update.
            If the first is not null and the second is set, it's a removal of some kind.
            Note that you may wish to check if the object change is for a particular locale (via the given context object).
            An object with the same ID can pass through repeatedly, but with different translations.
            </summary>
        </member>
        <member name="T:Api.Startup.CacheConfig">
            <summary>
            Config indicating how a service should cache its content.
            </summary>
        </member>
        <member name="P:Api.Startup.CacheConfig.Preload">
            <summary>
            True if all content should be preloaded in the cache.
            </summary>
        </member>
        <member name="P:Api.Startup.CacheConfig.Retain">
            <summary>
            True if all content should be retained in the cache.
            I.e. creates/ updates/ deletes are reflected in the cache across a cluster, 
            instead of those things just deleting the cache entry.
            </summary>
        </member>
        <member name="P:Api.Startup.CacheConfig.PreloadPriority">
            <summary>
            If preloading, this is the event handler priority
            </summary>
        </member>
        <member name="F:Api.Startup.CacheConfig.OnCacheLoaded">
            <summary>
            An action which is triggered when the cache is loaded, if Preload is true.
            </summary>
        </member>
        <member name="M:Api.Startup.CacheConfig.#ctor">
            <summary>
            A new cache config with default settings.
            </summary>
        </member>
        <member name="T:Api.Startup.CacheOnlyAttribute">
            <summary>
            Indicates that your Content type is a cache only one.
            </summary>
        </member>
        <member name="F:Api.Startup.CacheOnlyAttribute.GenerateIds">
            <summary>
            True if IDs should be generated.
            This requires ContentSync as it uses its ID allocator. 
            Note that IDs are globally unique (i.e. two servers won't allocate the same ID) when this is active.
            </summary>
        </member>
        <member name="T:Api.Startup.CacheSetupEventListener">
            <summary>
            Listens out for service start and then sets up any manual caching config in the appsettings.json.
            </summary>
        </member>
        <member name="M:Api.Startup.CacheSetupEventListener.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="T:Api.Startup.CacheSet">
            <summary>
            A set of caches per locale.
            </summary>
        </member>
        <member name="F:Api.Startup.CacheSet.ContentFields">
            <summary>
            The content fields for the type of this service cache.
            </summary>
        </member>
        <member name="F:Api.Startup.CacheSet.InstanceType">
            <summary>
            The instance type.
            </summary>
        </member>
        <member name="M:Api.Startup.CacheSet.#ctor(Api.Startup.ContentFields)">
            <summary>
            Creates a new cache set for the given content fields.
            </summary>
            <param name="cf"></param>
        </member>
        <member name="M:Api.Startup.CacheSet.AddPrimary(Api.Contexts.Context,System.Object)">
            <summary>
            Adds the given primary entity to this cache.
            </summary>
            <param name="context"></param>
            <param name="entity"></param>
        </member>
        <member name="T:Api.Startup.CacheSet`2">
            <summary>
            A set of caches per locale, specific to the given type.
            </summary>
        </member>
        <member name="F:Api.Startup.CacheSet`2._cache">
            <summary>
            The caches, if enabled. Call Cache() to set this service as one with caching active.
            It's an array as there's one per locale.
            </summary>
        </member>
        <member name="P:Api.Startup.CacheSet`2.Caches">
            <summary>
            Get the underlying caches.
            </summary>
        </member>
        <member name="F:Api.Startup.CacheSet`2._onChange">
            <summary>
            The onChange callback to use.
            </summary>
        </member>
        <member name="M:Api.Startup.CacheSet`2.SetOnChange(System.Action{Api.Contexts.Context,`0,`0})">
            <summary>
            Sets the onChange callback for each cache in the set.
            </summary>
        </member>
        <member name="M:Api.Startup.CacheSet`2.GetCacheForLocale(System.UInt32)">
            <summary>
            Gets a cache for a given locale ID. Null if none.
            </summary>
            <param name="localeId"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.CacheSet`2.AddPrimary(Api.Contexts.Context,System.Object)">
            <summary>
            Adds the given primary entity to this cache.
            </summary>
            <param name="context"></param>
            <param name="entity"></param>
        </member>
        <member name="F:Api.Startup.CacheSet`2.EntityName">
            <summary>
            The entity name that this is a set for.
            </summary>
        </member>
        <member name="P:Api.Startup.CacheSet`2.Length">
            <summary>
            The number of caches currently present.
            </summary>
        </member>
        <member name="F:Api.Startup.CacheSet`2._idConverter">
            <summary>
            Used to convert to/ from a ulong and ID.
            </summary>
        </member>
        <member name="M:Api.Startup.CacheSet`2.#ctor(Api.Startup.ContentFields,System.String)">
            <summary>
            Creates a new cache set for the given content fields.
            </summary>
            <param name="cf"></param>
            <param name="entityName"></param>
        </member>
        <member name="M:Api.Startup.CacheSet`2.RequireCacheForLocale(System.UInt32)">
            <summary>
            Requires that the cache for the given locale exists.
            </summary>
            <param name="localeId"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.ServiceCache`2">
            <summary>
            A cache for content which is frequently read but infrequently written.
            There is one of these per locale, stored by AutoService.
            </summary>
        </member>
        <member name="F:Api.Startup.ServiceCache`2.LazyLoadMode">
            <summary>
            True if this cache is in lazy loading mode.
            </summary>
        </member>
        <member name="F:Api.Startup.ServiceCache`2.Raw">
            <summary>
            The raw index - this is for caches for a particular locale, and holds "raw" objects 
            (as they are in the database, with blanks where the default translation should apply).
            </summary>
        </member>
        <member name="F:Api.Startup.ServiceCache`2.Primary">
            <summary>
            The primary cached index. If localised, this holds objects that have had the primary locale applied to them.
            </summary>
        </member>
        <member name="F:Api.Startup.ServiceCache`2.Indices">
            <summary>
            The indices of the cache. The name of the index is the same as it is in the database 
            (usually just the field name for single field indices, or Field1_Field2_.. for multi-field indices).
            </summary>
        </member>
        <member name="F:Api.Startup.ServiceCache`2.IndexLookup">
            <summary>
            A lookup of the indices by its ServiceCacheIndex.Id.
            </summary>
        </member>
        <member name="F:Api.Startup.ServiceCache`2.SecondaryIndices">
            <summary>
            The secondary indices as a set.
            </summary>
        </member>
        <member name="F:Api.Startup.ServiceCache`2.OnChange">
            <summary>
            Runs when an item has been updated.
            If the first object is null and the second is not null, this is a first time add.
            If they're both set, it's an update.
            If the first is not null and the second is set, it's a removal of some kind.
            </summary>
        </member>
        <member name="F:Api.Startup.ServiceCache`2.Fields">
            <summary>
            Fields of the type.
            </summary>
        </member>
        <member name="M:Api.Startup.ServiceCache`2.#ctor(System.Collections.Generic.List{Api.Database.DatabaseIndexInfo},System.String)">
            <summary>
            Creates a new service cache using the given indices.
            </summary>
            <param name="indices"></param>
            <param name="entityName"></param>
        </member>
        <member name="M:Api.Startup.ServiceCache`2.GetPrimary">
            <summary>
            Get the primary index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ServiceCache`2.GetRaw">
            <summary>
            Get the raw lookup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ServiceCache`2.GetResults(Api.Contexts.Context,Api.Permissions.QueryPair{`0,`1},System.Func{Api.Contexts.Context,`0,System.Int32,System.Object,System.Object,System.Threading.Tasks.ValueTask},System.Object,System.Object)">
            <summary>
            Gets a list of results from the cache, calling the given callback each time one is discovered.
            </summary>
            <param name="context"></param>
            <param name="queryPair">Must have both queries set.</param>
            <param name="onResult"></param>
            <param name="srcA"></param>
            <param name="srcB"></param>
        </member>
        <member name="M:Api.Startup.ServiceCache`2.Count">
            <summary>
            The number of entries in the cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ServiceCache`2.GetIndexId(System.String)">
            <summary>
            Gets the ID of the index with the given name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ServiceCache`2.GetRaw(`1)">
            <summary>
            Attempts to get the raw object with the given ID from the cache.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ServiceCache`2.Get(`1)">
            <summary>
            Attempts to get the object with the given ID from the cache.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ServiceCache`2.GetIndex``1(System.String)">
            <summary>
            Attempt to get an index by the given index name. This is usually the exact name of the column,  case sensitive.
            For multi-column indices, they're separated by _ (For example, "FirstName_LastName").
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ServiceCache`2.Add(Api.Contexts.Context,`0,`0)">
            <summary>
            The given entity was created, updated or just needs to be added to the cache because it was lazy loaded.
            </summary>
            <param name="context"></param>
            <param name="entry"></param>
            <param name="rawEntry"></param>
        </member>
        <member name="M:Api.Startup.ServiceCache`2.Remove(Api.Contexts.Context,`1)">
            <summary>
            Remove the given entry by its ID.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
        </member>
        <member name="M:Api.Startup.ServiceCache`2.Remove(`1,System.Boolean)">
            <summary>
            Removes the given object from the index.
            </summary>
            <param name="id"></param>
            <param name="fromPrimary">Also remove from the primary</param>
        </member>
        <member name="M:Api.Startup.ServiceCache`2.AddInternal(`0,`0)">
            <summary>
            Adds the given entry to the index.
            </summary>
            <param name="entry"></param>
            <param name="rawEntry"></param>
        </member>
        <member name="T:Api.Startup.ServiceCacheIndex`1">
            <summary>
            </summary>
        </member>
        <member name="F:Api.Startup.ServiceCacheIndex`1.Id">
            <summary>
            The ID of this index. Does not persist across restarts etc.
            </summary>
        </member>
        <member name="F:Api.Startup.ServiceCacheIndex`1.Primary">
            <summary>
            True if this is the primary index.
            </summary>
        </member>
        <member name="M:Api.Startup.ServiceCacheIndex`1.GetUnderlyingStructure">
            <summary>
            Gets the underlying datastructure, usually a Dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ServiceCacheIndex`1.Add(`0)">
            <summary>
            Adds the given object to this index. Do not call this directly - add or remove an object from the ServiceCache instead.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Api.Startup.ServiceCacheIndex`1.Remove(`0)">
            <summary>
            Removes the given entry from the index. Do not call this directly - add or remove an object from the ServiceCache instead.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="T:Api.Startup.ServiceCacheIndex`2">
            <summary>
            A service cache index which also declares its key type.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
        </member>
        <member name="F:Api.Startup.ServiceCacheIndex`2.ChildIndexMeta">
            <summary>
            Child index metadata to pass to a followup index when they form a tree.
            </summary>
        </member>
        <member name="M:Api.Startup.ServiceCacheIndex`2.#ctor(Api.Startup.ChildIndexMeta)">
            <summary>
            Creates a new service cache index with the given meta.
            </summary>
            <param name="childIndexMeta"></param>
        </member>
        <member name="M:Api.Startup.ServiceCacheIndex`2.GetKeyValue(`0)">
            <summary>
            Gets the key value for the given entry.
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.UniqueIndex`2">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
        </member>
        <member name="M:Api.Startup.UniqueIndex`2.#ctor(Api.Startup.ChildIndexMeta)">
            <summary>
            Create a new unique index.
            </summary>
            <param name="childIndexMeta"></param>
        </member>
        <member name="M:Api.Startup.UniqueIndex`2.GetUnderlyingStructure">
            <summary>
            Gets the underlying datastructure, usually a ConcurrentDictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.UniqueIndex`2.Add(`0)">
            <summary>
            Adds the given object to this index. Do not call this directly - add or remove an object from the ServiceCache instead.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Api.Startup.UniqueIndex`2.Remove(`0)">
            <summary>
            Removes the given entry from the index. Do not call this directly - add or remove an object from the ServiceCache instead.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="T:Api.Startup.IndexLinkNode`1">
            <summary>
            single linked list node for non-unique indices.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Api.Startup.IndexLinkNode`1.Current">
            <summary>
            Current node.
            </summary>
        </member>
        <member name="F:Api.Startup.IndexLinkNode`1.Next">
            <summary>
            Next node.
            </summary>
        </member>
        <member name="T:Api.Startup.IndexLinkedList`1">
            <summary>
            Tracks first and last node in a linked list non-unique index.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Api.Startup.IndexLinkedList`1.First">
            <summary>
            First node.
            </summary>
        </member>
        <member name="F:Api.Startup.IndexLinkedList`1.Last">
            <summary>
            Last node.
            </summary>
        </member>
        <member name="F:Api.Startup.IndexLinkedList`1.Count">
            <summary>
            Count of nodes in this list. Usually small.
            </summary>
        </member>
        <member name="T:Api.Startup.IndexEnum`1">
            <summary>
            A non-alloc iterator for indexes.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Api.Startup.IndexEnum`1.Node">
            <summary>
            Current iteration node.
            </summary>
        </member>
        <member name="M:Api.Startup.IndexEnum`1.HasMore">
            <summary>
            True if there's more.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.IndexEnum`1.Current">
            <summary>
            Gets current value and advances.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.IndexIndex`3">
            <summary>
            Used for multi-key indices, this is used to represent the upper level index mapping to a lower level one.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="UA"></typeparam>
            <typeparam name="UB"></typeparam>
        </member>
        <member name="M:Api.Startup.IndexIndex`3.#ctor(Api.Startup.ChildIndexMeta)">
            <summary>
            Create a new index of indices.
            </summary>
            <param name="childIndexMeta"></param>
        </member>
        <member name="M:Api.Startup.IndexIndex`3.GetUnderlyingStructure">
            <summary>
            Gets the underlying datastructure, usually a ConcurrentDictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.ChildIndexMeta">
            <summary>
            Used for describing a tree of multi-column indices.
            </summary>
        </member>
        <member name="F:Api.Startup.ChildIndexMeta.ChildType">
            <summary>
            The child index type.
            </summary>
        </member>
        <member name="F:Api.Startup.ChildIndexMeta.Meta">
            <summary>
            The meta to pass to it.
            </summary>
        </member>
        <member name="T:Api.Startup.NonUniqueIndex`2">
            <summary>
            Non unique index.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
        </member>
        <member name="M:Api.Startup.NonUniqueIndex`2.#ctor(Api.Startup.ChildIndexMeta)">
            <summary>
            Create a new index of indices.
            </summary>
            <param name="childIndexMeta"></param>
        </member>
        <member name="P:Api.Startup.NonUniqueIndex`2.Dictionary">
            <summary>
            Underlying index dictionary
            </summary>
        </member>
        <member name="M:Api.Startup.NonUniqueIndex`2.GetUnderlyingStructure">
            <summary>
            Gets the underlying datastructure, usually a ConcurrentDictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.NonUniqueIndex`2.GetIndexList(`1)">
            <summary>
            Gets the linked list of values for a particular key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.NonUniqueIndex`2.GetEnumeratorFor(`1)">
            <summary>
            Gets a non-alloc enumeration tracker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.NonUniqueIndex`2.Add(`0)">
            <summary>
            Adds the given object to this index. Do not call this directly - add or remove an object from the ServiceCache instead.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Api.Startup.NonUniqueIndex`2.Remove(`0)">
            <summary>
            Removes the given entry from the index. Do not call this directly - add or remove an object from the ServiceCache instead.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="T:Api.Startup.SiteCacheConfig">
            <summary>
            The appsettings.json config block for caching on services.
            </summary>
        </member>
        <member name="P:Api.Startup.SiteCacheConfig.Services">
            <summary>
            Service caching configs. If a service has caching active by default, you can disable it via "ServiceName": {"Active": false}
            </summary>
        </member>
        <member name="T:Api.Startup.ChangedFields">
            <summary>
            An iterator used to identify fields which have changed without allocating anything itself whenever possible.
            It will only allocate if you have excessively large objects.
            </summary>
        </member>
        <member name="F:Api.Startup.ChangedFields.FieldDiff">
            <summary>
            A bitfield indicating which fields have changed in the given field list from the service FieldSet.
            </summary>
        </member>
        <member name="F:Api.Startup.ChangedFields.Fields">
            <summary>
            If a type has more than 64 fields (which itself is not recommended), this set is used instead of FieldDiff.
            </summary>
        </member>
        <member name="F:Api.Startup.ChangedFields.PreviousEditedUtc">
            <summary>
            If this is set you should only update the data store if the value in the data store matches this.
            </summary>
        </member>
        <member name="P:Api.Startup.ChangedFields.None">
            <summary>
            True if this change set represents "no changes at all".
            </summary>
        </member>
        <member name="M:Api.Startup.ChangedFields.#ctor(System.UInt64)">
            <summary>
            </summary>
        </member>
        <member name="M:Api.Startup.ChangedFields.GetEnumerator">
            <summary>
            Start iterating over the changed field set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ChangedFields.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Start iterating over the changed field set.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.ChangedFieldIterator">
            <summary>
            Iterates over a changedField set.
            </summary>
        </member>
        <member name="F:Api.Startup.ChangedFieldIterator.FieldDiff">
            <summary>
            The remaining diff.
            </summary>
        </member>
        <member name="F:Api.Startup.ChangedFieldIterator.Fields">
            <summary>
            The fields from the CF set.
            </summary>
        </member>
        <member name="F:Api.Startup.ChangedFieldIterator.Index">
            <summary>
            Current index.
            </summary>
        </member>
        <member name="F:Api.Startup.ChangedFieldIterator.RemDiff">
            <summary>
            Remaining diff.
            </summary>
        </member>
        <member name="F:Api.Startup.ChangedFieldIterator.Field">
            <summary>
            Current field.
            </summary>
        </member>
        <member name="M:Api.Startup.ChangedFieldIterator.#ctor(System.UInt64,Api.Database.FieldMap)">
            <summary>
            Create a new iterator.
            </summary>
            <param name="diff"></param>
            <param name="fields"></param>
        </member>
        <member name="P:Api.Startup.ChangedFieldIterator.Current">
            <summary>
            Current field.
            </summary>
        </member>
        <member name="P:Api.Startup.ChangedFieldIterator.System#Collections#IEnumerator#Current">
            <summary>
            Current field.
            </summary>
        </member>
        <member name="M:Api.Startup.ChangedFieldIterator.Dispose">
            <summary>
            Tidies up this iterator.
            </summary>
        </member>
        <member name="M:Api.Startup.ChangedFieldIterator.MoveNext">
            <summary>
            True if another field is present in this set.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Api.Startup.ChangedFieldIterator.Reset">
            <summary>
            Resets the iterator.
            </summary>
        </member>
        <member name="T:Api.Startup.ChangedField`2">
            <summary>
            A changed field.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
        </member>
        <member name="F:Api.Startup.ChangedField`2.Field">
            <summary>
            The field which has changed.
            </summary>
        </member>
        <member name="T:Api.Startup.ContentFields">
            <summary>
            A map of field name -> field on a Content type. 
            This level does not consider e.g. role accessibility - it is just a raw, complete set of fields and properties, including virtual ones.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentFields.CommonTitleNames">
            <summary>
             Common field names used by entities which are used as a title when no [Meta("title")] is declared.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentFields.CommonDescriptionNames">
            <summary>
             Common field names used by entities which are used as a description when no [Meta("description")] is declared.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentFields._globalVirtualFields">
            <summary>
            Global virtual fields. ListAs appears in here.
            </summary>
        </member>
        <member name="P:Api.Startup.ContentFields.GlobalVirtualFields">
            <summary>
            Global virtual fields. ListAs appears in here.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentFields.includeSets">
            <summary>
            Inclusion sets that have been pre-generated, rooted from this set.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentFields.Service">
            <summary>
            The AutoService that this map is for.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentFields.InstanceType">
            <summary>
            The type that this map is for.
            </summary>
        </member>
        <member name="M:Api.Startup.ContentFields.SetupGlobalFields">
            <summary>
            Collects all include value generators. They are classes which inherit VirtualFieldValueGenerator.
            </summary>
        </member>
        <member name="M:Api.Startup.ContentFields.#ctor(AutoService)">
            <summary>
            Creates a map for the given autoservice's instance type.
            Use aService.GetChangeField(..); rather than this directly.
            </summary>
        </member>
        <member name="M:Api.Startup.ContentFields.#ctor(System.Type)">
            <summary>
            Creates a map for the given type.
            Use aService.GetChangeField(..); rather than this directly.
            </summary>
        </member>
        <member name="M:Api.Startup.ContentFields.GetVirtualField(System.Type,System.String)">
            <summary>
            Gets a local virtual field of the given type, or null if it doesn't exist.
            </summary>
            <param name="ofType"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ContentFields.GetIncludeSet(System.String)">
            <summary>
            Gets the include set using the given str.
            </summary>
            <param name="includeString"></param>
            <returns></returns>
        </member>
        <member name="F:Api.Startup.ContentFields._list">
            <summary>
            Raw field list.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentFields._vList">
            <summary>
            Raw virtual field list.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentFields._nameMap">
            <summary>
            The underlying mapping.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentFields._metaMap">
            <summary>
            Meta field mapping.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentFields._vNameMap">
            <summary>
            The underlying mapping.
            </summary>
        </member>
        <member name="P:Api.Startup.ContentFields.List">
            <summary>
            Raw field list.
            </summary>
        </member>
        <member name="P:Api.Startup.ContentFields.MetaFieldMap">
            <summary>
            Map of meta field name -> field.
            </summary>
        </member>
        <member name="P:Api.Startup.ContentFields.VirtualList">
            <summary>
            List of virtual fields.
            </summary>
        </member>
        <member name="P:Api.Startup.ContentFields.LocalVirtualNameMap">
            <summary>
            Virtual field name mapped to entry on this type only, lowercase.
            </summary>
        </member>
        <member name="P:Api.Startup.ContentFields.NameMap">
            <summary>
            Raw field map, lowercase.
            </summary>
        </member>
        <member name="P:Api.Startup.ContentFields.IndexList">
            <summary>
            The db index list.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentFields.PrimaryMapName">
            <summary>
            The name of the primary ListAs, if there is one.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentFields.PrimaryMap">
            <summary>
            The primary ListAs, if there is one.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentFields.TypeAttributes">
            <summary>
            Attributes on the type itself.
            </summary>
        </member>
        <member name="M:Api.Startup.ContentFields.GetAttribute``1">
            <summary>
            Gets the first attribute on the instanceType of the given type. Returns null if there isn't one.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ContentFields.GetTypeAttributes``1">
            <summary>
            Gets the set of attributes on the type. Returns null if there isn't any.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ContentFields.TryGetAnyOf(System.String[])">
            <summary>
            Gets the first match of any of the given field names. They must be lowercase. Null if none exist.
            </summary>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ContentFields.TryGetValue(System.String,Api.Startup.ContentField@)">
            <summary>
            Attempts to get the named field.
            </summary>
        </member>
        <member name="M:Api.Startup.ContentFields.TryGetOrGlobal(System.String,Api.Startup.ContentField@)">
            <summary>
            Attempts to get the named field. If not found locally, checks in the global set as well.
            </summary>
        </member>
        <member name="T:Api.Startup.ContentField">
            <summary>
            A field or property on a Content type.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentField.VirtualDepth">
            <summary>
            The depth of a virtual field. "A.B" has a depth of 1, "A" a depth of 0 and "A.B.C" a depth of 2.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentField.UsedByVirtual">
            <summary>
            The first virtual field that this field is used by (applies to local mappings only).
            </summary>
        </member>
        <member name="F:Api.Startup.ContentField.Localised">
            <summary>
            True if this field is [Localised]
            </summary>
        </member>
        <member name="P:Api.Startup.ContentField.Id">
            <summary>
            This fields ID. It also directly represents the change flag.
            </summary>
        </member>
        <member name="P:Api.Startup.ContentField.IDCollectorType">
            <summary>
            The type an ID collector uses. This is generated.
            </summary>
        </member>
        <member name="M:Api.Startup.ContentField.BuildAttributes(System.Type)">
            <summary>
            Converts a set of attribute data from the given type (including any it inherits) into an attribute list.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ContentField.BuildAttributes(System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData},System.Collections.Generic.List{System.Attribute})">
            <summary>
            Converts a set of attribute data into an attribute list.
            </summary>
            <param name="customAttributes"></param>
            <param name="intoList"></param>
            <returns></returns>
        </member>
        <member name="F:Api.Startup.ContentField._idCollectorType">
            <summary>
            IDCollector concrete type for this field, if it represents some kind of ID. 
            This collector type is generated and reads the value of this field from a given object.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentField.FirstInPool">
            <summary>
            First ID collector in the pool for this field.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentField.IDCollectorPoolLock">
            <summary>
            ID collector pool lock.
            </summary>
        </member>
        <member name="M:Api.Startup.ContentField.RentCollector">
            <summary>
            Gets an ID collector from a pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ContentField.AddToPool(Api.Startup.IDCollector)">
            <summary>
            Returns the given collector to the pool. This also internally releases the collector's buffers.
            </summary>
            <param name="collector"></param>
        </member>
        <member name="M:Api.Startup.ContentField.SetIDCollectorType(System.Type)">
            <summary>
            Sets the ID collector type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Api.Startup.ContentField.IsVirtual">
            <summary>
            True if this is a virtual field.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentField._id">
            <summary>
            This fields ID. It also directly represents the change flag.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentField.FieldInfo">
            <summary>
            Underlying field (can be null if it's a property).
            </summary>
        </member>
        <member name="F:Api.Startup.ContentField.PropertyInfo">
            <summary>
            Underlying propertyInfo (can be null if it's a field).
            </summary>
        </member>
        <member name="F:Api.Startup.ContentField.VirtualInfo">
            <summary>
            Virtual field information.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentField.UsedByIndices">
            <summary>
            Set if this field is used by any database indices. Only available on fields, not properties.
            </summary>
        </member>
        <member name="F:Api.Startup.ContentField.Attributes">
            <summary>
            Attributes on the field/ property (if any). Can be null.
            </summary>
        </member>
        <member name="M:Api.Startup.ContentField.AddIndex(Api.Database.DatabaseIndexInfo)">
            <summary>
            Adds an index to the usedByIndices set. Does not check if it was already in there.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Api.Startup.ContentField.GetIdFieldIfMappingNotRequired(Api.Startup.ContentFields)">
            <summary>
            Gets the "local"
            </summary>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ContentField.GetOptionalMappingService(Api.Startup.ContentFields)">
            <summary>
            Gets the mapping service for a virtual list field. Can be null if one isn't actually necessary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ContentField.GetMappingService(Api.Startup.ContentFields)">
            <summary>
            Gets a mapping service but doesn't consider if it is optional.
            It would be optional if the mapped from type has an ID field that relates to the mapped to type.
            </summary>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ContentField.#ctor(System.Reflection.FieldInfo)">
            <summary>
            </summary>
        </member>
        <member name="M:Api.Startup.ContentField.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            </summary>
        </member>
        <member name="M:Api.Startup.ContentField.#ctor(Api.Startup.VirtualInfo)">
            <summary>
            Virtual field.
            </summary>
        </member>
        <member name="M:Api.Startup.ContentField.GetAttribute``1">
            <summary>
            Gets the first attribute on this field of the given type. Returns null if there isn't one.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.ContentField.GetAttributes``1">
            <summary>
            Gets the set of attributes on this field of the given type. Returns null if there isn't one.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Api.Startup.ContentField.IsIndexable">
            <summary>
            True if this field is highspeed indexable - either it's used by a virtual field 
            (the index is the map for that vfield), or it's e.g. the Id field.
            </summary>
        </member>
        <member name="P:Api.Startup.ContentField.Name">
            <summary>
            Field name
            </summary>
        </member>
        <member name="P:Api.Startup.ContentField.FieldType">
            <summary>
            Field value type
            </summary>
        </member>
        <member name="T:Api.Startup.ReverseMappingInfo">
            <summary>
            Meta about a particular map to use (in reverse, target->source)
            </summary>
        </member>
        <member name="F:Api.Startup.ReverseMappingInfo.Service">
            <summary>
            The service. Will always exist.
            </summary>
        </member>
        <member name="F:Api.Startup.ReverseMappingInfo.SourceField">
            <summary>
            The source ID field.
            </summary>
        </member>
        <member name="T:Api.Startup.MappingInfo">
            <summary>
            Meta about a particular map to use.
            </summary>
        </member>
        <member name="F:Api.Startup.MappingInfo.Service">
            <summary>
            The service, if there is one. This is a MappingService.
            </summary>
        </member>
        <member name="F:Api.Startup.MappingInfo.TargetField">
            <summary>
            The target ID field.
            </summary>
        </member>
        <member name="F:Api.Startup.MappingInfo.TargetFieldName">
            <summary>
            The name of the target field.
            </summary>
        </member>
        <member name="T:Api.Startup.VirtualInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.Startup.VirtualInfo.FieldName">
            <summary>
            The effective name of the field.
            </summary>
        </member>
        <member name="F:Api.Startup.VirtualInfo.TypeName">
            <summary>
            Sometimes Type is not available until later. This is the name of the type to load on demand.
            </summary>
        </member>
        <member name="F:Api.Startup.VirtualInfo.DynamicTypeField">
            <summary>
            A field which holds the name of the type to include.
            Part of the Dynamic Includes system.
            </summary>
        </member>
        <member name="F:Api.Startup.VirtualInfo.ValueGeneratorType">
            <summary>
            If this virtual field is a value generator, this is the generic class which will be instanced.
            </summary>
        </member>
        <member name="F:Api.Startup.VirtualInfo.ImplicitTypes">
            <summary>
            Exists if this is an explicit ListAs field. This is the set of source types for which the ListAs * is implicit.
            </summary>
        </member>
        <member name="P:Api.Startup.VirtualInfo.IsExplicit">
            <summary>
            Don't use this ListAs field in an * if it is explicit, and the source type is not in the ImplicitTypes set.
            </summary>
        </member>
        <member name="M:Api.Startup.VirtualInfo.IsImplicitFor(System.Type)">
            <summary>
            Usually a one-off to establish if this ListAs field is implicit for the given source type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:Api.Startup.VirtualInfo.MetaTitleField">
            <summary>
            The meta="title" field for this listAs field. Used for searching through them.
            </summary>
        </member>
        <member name="F:Api.Startup.VirtualInfo.IsList">
            <summary>
            True if list
            </summary>
        </member>
        <member name="F:Api.Startup.VirtualInfo.FieldType">
            <summary>
            The type of the content in this field. T[] indicates an array.
            </summary>
        </member>
        <member name="F:Api.Startup.VirtualInfo._service">
            <summary>
            Set only if Type is not null.
            </summary>
        </member>
        <member name="M:Api.Startup.VirtualInfo.SetupMetaTitle">
            <summary>
            Sets up the MetaTitleField on list fields.
            </summary>
        </member>
        <member name="P:Api.Startup.VirtualInfo.Type">
            <summary>
            The type that the ID is for. Must be provided.
            </summary>
        </member>
        <member name="F:Api.Startup.VirtualInfo.IdSourceField">
            <summary>
            The field on the class that the ID of the optional object comes from.
            </summary>
        </member>
        <member name="F:Api.Startup.VirtualInfo.IdSource">
            <summary>
            Resolved ID source field.
            </summary>
        </member>
        <member name="P:Api.Startup.VirtualInfo.Service">
            <summary>
            The service for the type (if there is a type).
            </summary>
        </member>
        <member name="T:Api.Startup.ChildAdminPageOptions">
            <summary>
            For use when a piece of content has a list of a "child" piece of content.
            For example, a blog displays a list of blogPosts. BlogPost is a "child" admin page.
            </summary>
        </member>
        <member name="F:Api.Startup.ChildAdminPageOptions.ChildType">
            <summary>
            Type name of the child type. It MUST have a field called {ParentTypeName}Id.
            </summary>
        </member>
        <member name="F:Api.Startup.ChildAdminPageOptions.Fields">
            <summary>
            Fields to use in the nested list.
            </summary>
        </member>
        <member name="F:Api.Startup.ChildAdminPageOptions.SearchFields">
            <summary>
            Fields to be searchable. Leave null if you don't want to show search.
            </summary>
        </member>
        <member name="F:Api.Startup.ChildAdminPageOptions.CreateButton">
            <summary>
            False to disable the create button.
            </summary>
        </member>
        <member name="T:Api.Startup.Chmod">
            <summary>
            Helper for *nix file permissions.
            </summary>
        </member>
        <member name="F:Api.Startup.Chmod.S_IRUSR">
            <summary>
            user read
            </summary>
        </member>
        <member name="F:Api.Startup.Chmod.S_IWUSR">
            <summary>
            user write
            </summary>
        </member>
        <member name="F:Api.Startup.Chmod.S_IXUSR">
            <summary>
            user exec
            </summary>
        </member>
        <member name="F:Api.Startup.Chmod.S_IRGRP">
            <summary>
            group read
            </summary>
        </member>
        <member name="F:Api.Startup.Chmod.S_IWGRP">
            <summary>
            group write
            </summary>
        </member>
        <member name="F:Api.Startup.Chmod.S_IXGRP">
            <summary>
            group exec
            </summary>
        </member>
        <member name="F:Api.Startup.Chmod.S_IROTH">
            <summary>
            other read
            </summary>
        </member>
        <member name="F:Api.Startup.Chmod.S_IWOTH">
            <summary>
            other write
            </summary>
        </member>
        <member name="F:Api.Startup.Chmod.S_IXOTH">
            <summary>
            other exec
            </summary>
        </member>
        <member name="M:Api.Startup.Chmod.SetRead(System.String)">
            <summary>
            Sets 644 global read (+owner write) file permissions on a *nix platform
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Api.Startup.Chmod.Set(System.String,System.Int32)">
            <summary>
            Sets file permissions on a *nix platform
            </summary>
            <param name="filename"></param>
            <param name="perms"></param>
        </member>
        <member name="T:Api.Startup.CommandLine">
            <summary>
            Used to invoke commands. Writes command output into the specified stream, or stdout otherwise.
            </summary>
        </member>
        <member name="M:Api.Startup.CommandLine.Execute(System.String,System.IO.Stream,System.IO.Stream)">
            <summary>
            Execute a command.
            </summary>
        </member>
        <member name="T:Api.Startup.ConsoleWriter">
            <summary>
            Handles cloned console data such that it can be accessed more easily by admins.
            </summary>
        </member>
        <member name="F:Api.Startup.ConsoleWriter._main">
            <summary>
            Underlying stream.
            </summary>
        </member>
        <member name="M:Api.Startup.ConsoleWriter.WriteBase(System.String)">
            <summary>
            Writes to the underlying text stream.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Api.Startup.ConsoleWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates a writer for the given main output stream.
            </summary>
        </member>
        <member name="M:Api.Startup.ConsoleWriter.Write(System.Char)">
            <summary>
            Writes 1 char.
            </summary>
        </member>
        <member name="M:Api.Startup.ConsoleWriter.Write(System.String)">
            <summary>
            Writes a string.
            </summary>
        </member>
        <member name="P:Api.Startup.ConsoleWriter.Encoding">
            <summary>
            Encoding
            </summary>
        </member>
        <member name="T:Api.Startup.CorsConfig">
            <summary>
            The appsettings.json config block for cors.
            </summary>
        </member>
        <member name="P:Api.Startup.CorsConfig.Origins">
            <summary>
            Specific origins. * is used if not set.
            </summary>
        </member>
        <member name="P:Api.Startup.CorsConfig.Methods">
            <summary>
            Specific http methods. * is used if not set.
            </summary>
        </member>
        <member name="P:Api.Startup.CorsConfig.Headers">
            <summary>
            Specific headers permitted in request. * is used if not set.
            </summary>
        </member>
        <member name="P:Api.Startup.CorsConfig.ExposedHeaders">
            <summary>
            Specific headers. None if not set.
            </summary>
        </member>
        <member name="P:Api.Startup.CorsConfig.AllowCredentials">
            <summary>
            Set this to true to make sure the Access-Control-Allow-Credentials header is explicitly set and is the value 'true'.
            </summary>
        </member>
        <member name="T:Api.Startup.EntryPoint">
            <summary>
            This defines the Main method used when starting up your API.
            This instances any object with the [EventListener] attribute so you can 
            hook in here without needing to override the module.
            </summary>
        </member>
        <member name="E:Api.Startup.EntryPoint.OnConfigureKestrel">
            <summary>
            Event which fires during the configuration of Kestrel.
            </summary>
        </member>
        <member name="E:Api.Startup.EntryPoint.OnConfigureHost">
            <summary>
            Event which fires during the configuration of the web builder.
            </summary>
        </member>
        <member name="M:Api.Startup.EntryPoint.Main">
            <summary>
            The main entry point for your project's API.
            </summary>
        </member>
        <member name="T:Api.Startup.ErrorResponse">
            <summary>
            Used when responding with an error
            </summary>
        </member>
        <member name="F:Api.Startup.ErrorResponse.message">
            <summary>
            The error message
            </summary>
        </member>
        <member name="F:Api.Startup.ErrorResponse.code">
            <summary>
            Optional textual error code for localisation. E.g. "already_booked".
            </summary>
        </member>
        <member name="P:Api.Startup.ErrorResponse.Message">
            <summary>
            The error message
            </summary>
        </member>
        <member name="P:Api.Startup.ErrorResponse.Code">
            <summary>
            Optional textual error code for localisation. E.g. "already_booked".
            </summary>
        </member>
        <member name="T:Api.Startup.EventListenerAttribute">
            <summary>
            Use this in your module to be able to hook up to early 
            events such as the ones that happen during service configure.
            These are always instanced during startup.
            Note that services themselves are also instanced during startup so you can also hook up events 
            from their constructors (just not the particularly early events).
            Note that Services.Get is unavailable during the constructor - 
            you'll need to use the Services.OnStart event to grab services.
            </summary>
        </member>
        <member name="T:Api.Startup.ServiceEventGroup">
            <summary>
            The group of events for services. See also Events.Service
            </summary>
            <summary>
            The group of events for services. See also Events.Service
            </summary>
        </member>
        <member name="F:Api.Startup.ServiceEventGroup.AfterStart">
            <summary>
            Called just after all services have started for the first time, exactly once.
            Note that services may start at random points in the future, and this handler won't be invoked then - don't use this event to e.g. loop over available services.
            Instead, handle the Create and Delete events.
            </summary>
        </member>
        <member name="F:Api.Startup.ServiceEventGroup.AfterDiscoverIPs">
            <summary>
            Just after IPs are discovered. You can modify the IP results if needed.
            </summary>
        </member>
        <member name="T:Api.Startup.HasVirtualFieldAttribute">
            <summary>
            Add [HasOptionalField(..)] attributes to declare that some named optional secondary data.
            </summary>
        </member>
        <member name="F:Api.Startup.HasVirtualFieldAttribute.FieldName">
            <summary>
            The field name.
            </summary>
        </member>
        <member name="F:Api.Startup.HasVirtualFieldAttribute.Type">
            <summary>
            The type that the ID is for. If this is null, the optional field is of mixed type, and both IdSourceField and TypeIdSourceField must both be set.
            </summary>
        </member>
        <member name="F:Api.Startup.HasVirtualFieldAttribute.TypeSourceField">
            <summary>
            An alternative to a type reference, you can instead use the name, or the name of a field holding the type name.
            Similar to the Type field, and the Type field wins if they are both set.
            </summary>
        </member>
        <member name="F:Api.Startup.HasVirtualFieldAttribute.IdSourceField">
            <summary>
            The field on the class that the ID of the optional object comes from.
            </summary>
        </member>
        <member name="F:Api.Startup.HasVirtualFieldAttribute.List">
            <summary>
            The virtual field is a list of the given type/typename.
            </summary>
        </member>
        <member name="M:Api.Startup.HasVirtualFieldAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
            <param name="typeSourceField">Can be either a type name, or the name of a field where the type will be loaded.
            In the latter case, ID source field MUST be a ulong field. 
            Otherwise, it must match the type of ID that the referenced type uses.</param>
            <param name="idSourceField"></param>
        </member>
        <member name="T:Api.Startup.HostTypeAttribute">
            <summary>
            Add [HostType("task")] attributes to your service classes to define their context for microservices.	/// 
            </summary>
        </member>
        <member name="F:Api.Startup.HostTypeAttribute.HostType">
            <summary>
            The host type. So "web" "task" "indexing" for example
            </summary>
        </member>
        <member name="T:Api.Startup.IDConverter`1">
            <summary>
            ID converter. Turns a ulong into a specific ID type.
            </summary>
        </member>
        <member name="M:Api.Startup.IDConverter`1.Convert(System.UInt64)">
            <summary>
            Converts the given input ulong into an ID of the primary type.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.IDConverter`1.Reverse(`0)">
            <summary>
            Converts the given ID into a ulong.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.UInt32IDConverter">
            <summary>
            uint32 conversion
            </summary>
        </member>
        <member name="M:Api.Startup.UInt32IDConverter.Convert(System.UInt64)">
            <summary>
            Converts the given input ulong into an ID of the primary type.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.UInt32IDConverter.Reverse(System.UInt32)">
            <summary>
            Converts the given ID into a ulong.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.UInt64IDConverter">
            <summary>
            uint64 conversion
            </summary>
        </member>
        <member name="M:Api.Startup.UInt64IDConverter.Convert(System.UInt64)">
            <summary>
            Converts the given input ulong into an ID of the primary type.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.UInt64IDConverter.Reverse(System.UInt64)">
            <summary>
            Converts the given ID into a ulong.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.InternalApiAttribute">
            <summary>
            This can then be used to block sensitive classed from being processed
            For example the HtmlController from being exposed to the public via graphql and swagger etc 
            </summary>
        </member>
        <member name="T:Api.Startup.IpDiscovery">
            <summary>
            Utility mechanism for automatic IP discovery. Occurs when a server starts to check that its public record is correct.
            </summary>
        </member>
        <member name="F:Api.Startup.IpDiscovery.IPv4Site">
            <summary>
            Ipv4 helper site (in future, will be provided by socialstack cloud).
            </summary>
        </member>
        <member name="F:Api.Startup.IpDiscovery.IPv6Site">
            <summary>
            Ipv6 helper site (in future, will be provided by socialstack cloud).
            </summary>
        </member>
        <member name="M:Api.Startup.IpDiscovery.FindPublicAddress(System.String)">
            <summary>Finds the public IPv4 address.</summary>
        </member>
        <member name="M:Api.Startup.IpDiscovery.DiscoverPrivateIps(Api.Startup.IpSet,System.Boolean)">
            <summary>
            Discovers preferred private LAN IPs and puts them into the given set.
            </summary>
            <param name="ips"></param>
            <param name="v6"></param>
        </member>
        <member name="M:Api.Startup.IpDiscovery.Discover(System.Boolean)">
            <summary>Gets the IP set.</summary>
        </member>
        <member name="T:Api.Startup.JsonFieldGroup">
            <summary>
            Used when searching for a field.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonFieldGroup.Default">
            <summary>
            The default group is set regardless of if the entity ID is known yet.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonFieldGroup.AfterId">
            <summary>
            Fields in this group are only set after an entity ID is known.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonFieldGroup.Any">
            <summary>
            Either the default or after ID group.
            </summary>
        </member>
        <member name="T:Api.Startup.JsonStructure">
            <summary>
            Describes the available fields on a particular type.
            This exists so we can, for example, role restrict setting particular fields.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonStructure.ForRole">
            <summary>
            The role that this structure is for.
            </summary>
        </member>
        <member name="P:Api.Startup.JsonStructure.AllFields">
            <summary>
            All fields in this structure as typeless JsonField refs.
            </summary>
        </member>
        <member name="M:Api.Startup.JsonStructure.GetMetaField(System.String)">
            <summary>
            Gets a meta field. Common names are "title" and "description".
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Api.Startup.JsonStructure.AllMetaFields">
            <summary>
            The meta fields in this type. The keys are always lowercase. For example "title" and "description".
            These are set by applying [Meta("fieldname")] to your content type's fields. 
            Note that title and description will always exist, unless a content type does not have any fields at all.
            </summary>
        </member>
        <member name="T:Api.Startup.JsonStructure`2">
            <summary>
            Describes the available fields on a particular type.
            This exists so we can, for example, role restrict setting particular fields.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonStructure`2.Service">
            <summary>
            The host service.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonStructure`2.TypeIO">
            <summary>
            Type reader writer for this structure.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonStructure`2.ReadableFields">
            <summary>
            Fields that can be read by users of the current role.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonStructure`2.Fields">
            <summary>
            All raw fields in this structure.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonStructure`2.MetaFields">
            <summary>
            All meta fields in this structure. Common ones are e.g. "title" and "description".
            </summary>
        </member>
        <member name="F:Api.Startup.JsonStructure`2.AfterIdFields">
            <summary>
            The after ID fields in this structure.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonStructure`2.BeforeIdFields">
            <summary>
            The before ID fields in this structure.
            </summary>
        </member>
        <member name="M:Api.Startup.JsonStructure`2.#ctor(Api.Permissions.Role)">
            <summary>
            Creates a new structure for the given role.
            </summary>
            <param name="forRole"></param>
        </member>
        <member name="M:Api.Startup.JsonStructure`2.CountIncludes(System.String)">
            <summary>
            Counts the number of include strings in the given include line.
            </summary>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="P:Api.Startup.JsonStructure`2.AllFields">
            <summary>
            All fields in this structure as typeless JsonField refs.
            </summary>
        </member>
        <member name="P:Api.Startup.JsonStructure`2.AllMetaFields">
            <summary>
            All meta fields in this structure as typeless JsonField refs.
            </summary>
        </member>
        <member name="M:Api.Startup.JsonStructure`2.Build(Api.Startup.ContentFields,Api.Eventing.EventHandler{Api.Startup.JsonField{`0,`1}},Api.Eventing.EventHandler{Api.Startup.JsonField{`0,`1}})">
            <summary>
            Builds this structure now. It looks at all public fields and properties of a type
            and for each one, triggers an event. The event can return either nothing at all - which will outright block the field - 
            or the event can add a special value handler which will map the raw JSON value to the actual object for us.
            </summary>
        </member>
        <member name="M:Api.Startup.JsonStructure`2.IsNumericType(System.Type)">
            <summary>
            Check if the given type is a numeric one.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.JsonStructure`2.TryAddField(Api.Contexts.Context,Api.Startup.JsonField{`0,`1},System.Boolean,Api.Eventing.EventHandler{Api.Startup.JsonField{`0,`1}},Api.Eventing.EventHandler{Api.Startup.JsonField{`0,`1}})">
            <summary>
            Adds the given field to this structure.
            </summary>
            <param name="context"></param>
            <param name="field"></param>
            <param name="readableState"></param>
            <param name="beforeSettable"></param>
            <param name="beforeGettable"></param>
        </member>
        <member name="M:Api.Startup.JsonStructure`2.GetField(System.String,Api.Startup.JsonFieldGroup)">
            <summary>
            Attempts to get a given case insensitive field.
            </summary>
            <param name="name"></param>
            <param name="fieldGroup"></param>
        </member>
        <member name="M:Api.Startup.JsonStructure`2.GetMetaField(System.String)">
            <summary>
            Gets a meta field. Common names are "title" and "description".
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.JsonStructure`2.GetTypedMetaField(System.String)">
            <summary>
            Gets a meta field. Common names are "title" and "description".
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.JsonField">
            <summary>
            A field within a JsonStructure.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.Name">
            <summary>
            The name of the field.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.OriginalName">
            <summary>
            The original name of the field.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.PropertyInfo">
            <summary>
            If this is a property, the underlying PropertyInfo. Null otherwise.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.FieldInfo">
            <summary>
            If this is a field, the underlying FieldInfo. Null otherwise.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.IsExplicit">
            <summary>
            True if this is an explicit field. It only appears in includes if it is explicitly asked for. It doesn't appear on AutoForm.
            Note that Hide is also set to true when this is true.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.ContentField">
            <summary>
            The content field that this originated from. Can be a global virtual one.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.AfterId">
            <summary>
            Set this to true if it should only be applied after an objects ID is known.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.PropertyGet">
            <summary>
            If this is a Property, the get method. Null otherwise.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.PropertySet">
            <summary>
            If this is a Property, the set method. Null otherwise.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.TargetType">
            <summary>
            The field/ property value type.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.UnderlyingNullable">
            <summary>
            If TargetType is nullable, the underlying type.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.IsNumericField">
            <summary>
            True if this is a numeric field (int, double etc).
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.Readable">
            <summary>
            True if this field is readable by this role.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.Writeable">
            <summary>
            True if this field is writeable by this role.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.Attributes">
            <summary>
            The field or property attributes.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.Module">
            <summary>
            The display module when this field is displayed in a form.
            Can be overriden durign field load.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.Data">
            <summary>
            The set of props to give to the display module when displaying this field in a form.
            Must be json serializable.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField.Hide">
            <summary>
            True if this field should not appear in forms. Non-writeable properties are hidden by default.
            </summary>
        </member>
        <member name="M:Api.Startup.JsonField.SetDefaultDisplayModule">
            <summary>
            Sets up the default display module for common field types.
            This runs just before the field load event occurs.
            </summary>
        </member>
        <member name="M:Api.Startup.JsonField.SpaceCamelCase(System.String)">
            <summary>
            Adds spaces to a CamelCase string (so it becomes "Camel Case")
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.JsonField.FirstCharacterToLower(System.String)">
            <summary>
            Lowercases the first character of the given string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.JsonField`2">
            <summary>
            A field within a JsonStructure.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
        </member>
        <member name="F:Api.Startup.JsonField`2.Structure">
            <summary>
            The structure this field belongs to.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField`2.FieldValueGenerator">
            <summary>
            If this field is an includable virtual field, it can potentially generate a value at runtime.
            This is the generator for the value if there is one.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonField`2.OnSetValue">
            <summary>
            An event which is called when the value is set. It returns the value it wants to be set.
            </summary>
        </member>
        <member name="P:Api.Startup.JsonField`2.ForRole">
            <summary>
            The role that this is for.
            </summary>
        </member>
        <member name="M:Api.Startup.JsonField`2.ConvertToObjectNumber(System.String)">
            <summary>
            Allocating number parse to the target value.
            </summary>
            <param name="srcValue"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.JsonField`2.SetFieldValue(`0,System.String)">
            <summary>
            Sets the field value from a textual string. If the field type is numeric, the number will be parsed from the string or 0.
            Currently uses reflection so will result in allocations when setting value types.
            </summary>
            <param name="onObject"></param>
            <param name="srcValue"></param>
        </member>
        <member name="M:Api.Startup.JsonField`2.SetFieldValue(Api.Contexts.Context,`0,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Sets the given value on the field but only if it changed.
            </summary>
            <param name="context"></param>
            <param name="onObject"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.IncludedField">
            <summary>
            A shared object which represents an included field.
            </summary>
        </member>
        <member name="F:Api.Startup.IncludedField.Depth">
            <summary>
            The "Depth" of this included field. It's essentially the number of dots + 1. E.g "Tags.CreatorUser" has a depth of 2.
            </summary>
        </member>
        <member name="F:Api.Startup.IncludedField.Structure">
            <summary>
            The structure it's from.
            </summary>
        </member>
        <member name="T:Api.Startup.ListAsAttribute">
            <summary>
            Add [ListAs("fieldName")] attributes to your type to declare a virtual field with the given name on all other types. The field contains a list of your type.
            If the target type has a name of YourContentTypeId, the list will be based on that. Otherwise, a mapping type will be internally created and used.
            </summary>
        </member>
        <member name="F:Api.Startup.ListAsAttribute.FieldName">
            <summary>
            The virtual field name.
            </summary>
        </member>
        <member name="F:Api.Startup.ListAsAttribute.IsPrimary">
            <summary>
            True if this ListAs declaration is the primary one. A type can have multiple ListAs declarations, but only one can be primary.
            </summary>
        </member>
        <member name="F:Api.Startup.ListAsAttribute.Explicit">
            <summary>
            True if this ListAs must be explicitly included. It doesn't happen when * is used. I.e. you must do "*,Thing" to obtain it at all.
            You can specify particular types should be implicit with [ImplicitFor("ListAsFieldName", typeof(TYPE))]
            Note that this is implied true if there are any ImplicitFor attributes.
            </summary>
        </member>
        <member name="T:Api.Startup.ImplicitForAttribute">
            <summary>
            Used to indicate if an explicit ListAs is implicit for a particular type.
            </summary>
        </member>
        <member name="F:Api.Startup.ImplicitForAttribute.ListAsName">
            <summary>
            The name of the ListAs.
            </summary>
        </member>
        <member name="F:Api.Startup.ImplicitForAttribute.Type">
            <summary>
            The type.
            </summary>
        </member>
        <member name="T:Api.Startup.LoadPriorityAttribute">
            <summary>
            Use this attribute to make sure your service is instanced before others.
            The default priority is 10, and a lower number means being instanced sooner.
            </summary>
        </member>
        <member name="F:Api.Startup.LoadPriorityAttribute.Priority">
            <summary>
            The priority.
            </summary>
        </member>
        <member name="T:Api.Startup.MappingService`4">
            <summary>
            The AutoService for mapping types.
            </summary>
        </member>
        <member name="F:Api.Startup.MappingService`4.IncludesMapFooter">
            <summary>
            ],"values":[
            </summary>
        </member>
        <member name="M:Api.Startup.MappingService`4.#ctor(AutoService{`0,`2},AutoService{`1,`3},System.Type,System.String)">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="F:Api.Startup.MappingService`4.Source">
            <summary>
            Source service.
            </summary>
        </member>
        <member name="F:Api.Startup.MappingService`4.Target">
            <summary>
            Target service.
            </summary>
        </member>
        <member name="P:Api.Startup.MappingService`4.MappingSourceType">
            <summary>
            The source type if this is a mapping service.
            </summary>
        </member>
        <member name="P:Api.Startup.MappingService`4.MappingTargetType">
            <summary>
            The target type if this is a mapping service.
            </summary>
        </member>
        <member name="P:Api.Startup.MappingService`4.MappingSourceIdType">
            <summary>
            The source Id type if this is a mapping service.
            </summary>
        </member>
        <member name="P:Api.Startup.MappingService`4.MappingTargetIdType">
            <summary>
            The target Id type if this is a mapping service.
            </summary>
        </member>
        <member name="M:Api.Startup.MappingService`4.ListSourceIdByTarget(Api.Contexts.Context,`3,System.Func{Api.Contexts.Context,`2,System.Object,System.Threading.Tasks.ValueTask},System.Object)">
            <summary>
            Gets a list of source IDs by target ID.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
            <param name="onResult"></param>
            <param name="rSrc"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`4.CreateMapping(Api.Contexts.Context,System.Object,System.Object,DataOptions)">
            <summary>
             Creates a mapping from the given src to the given target. Only available on mapping services.
             It's more ideal to use the type specific overloads whenever possible (particularly as they're available on regular services, rather than this mapping service specific one).
             See also: CreateMappingIfNotExists, EnsureMapping
            </summary>
            <param name="context"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="opts"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`4.ListTargetIdBySource(Api.Contexts.Context,Api.Startup.IDCollector{`2},System.Func{Api.Contexts.Context,`3,System.Object,System.Threading.Tasks.ValueTask},System.Object)">
            <summary>
            Gets a list of source IDs by target ID.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
            <param name="onResult"></param>
            <param name="tSrc"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`4.ListTargetIdBySource(Api.Contexts.Context,`2,System.Func{Api.Contexts.Context,`3,System.Object,System.Threading.Tasks.ValueTask},System.Object)">
            <summary>
            Gets a list of source IDs by target ID.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
            <param name="onResult"></param>
            <param name="tSrc"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`4.CollectByTarget(Api.Contexts.Context,Api.Startup.IDCollector{`2},`3)">
            <summary>
            Gets a list of source IDs by target ID.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
            <param name="collector"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`4.CollectByTargetEquals(Api.Contexts.Context,Api.Startup.IDCollector{`2},`3)">
            <summary>
            Gets a list of source IDs by target ID.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
            <param name="collector"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`4.CollectByTargetSet(Api.Contexts.Context,Api.Startup.IDCollector{`2},System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Gets a list of source IDs by target ID.
            </summary>
            <param name="context"></param>
            <param name="idSet"></param>
            <param name="collector"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`4.CollectByTargetSetContains(Api.Contexts.Context,Api.Startup.IDCollector{`2},System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Gets a list of source IDs by target ID and eliminates values that do not have the number of entries to match idSet count
            </summary>
            <param name="context"></param>
            <param name="collector"></param>
            <param name="idSet"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`4.CollectByTargetSetEquals(Api.Contexts.Context,Api.Startup.IDCollector{`2},System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Gets a list of source IDs by target ID and eliminates values that do not have the number of entries to match idSet count
            </summary>
            <param name="context"></param>
            <param name="collector"></param>
            <param name="idSet"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`4.Delete(Api.Contexts.Context,`2,`3,DataOptions)">
            <summary>
            Delete an entity.
            </summary>
        </member>
        <member name="M:Api.Startup.MappingService`4.EnsureMapping(Api.Contexts.Context,`2,System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Ensures the given set of target IDs are exactly what is present in the map.
            </summary>
            <param name="context"></param>
            <param name="src"></param>
            <param name="targetIds"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`4.OutputMap(Api.Contexts.Context,Api.Startup.IDCollector,Api.Startup.IDCollector,Api.SocketServerLibrary.Writer)">
            <summary>
            Call this on the actual mapping service. S is the source ID type.
            </summary>
            <param name="context"></param>
            <param name="mappingCollector"></param>
            <param name="idSet"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.MappingService`2">
            <summary>
            An intermediate mapping service to make maps more generally accessible, for instances where you only know the src and target ID types.
            </summary>
            <typeparam name="SRC_ID"></typeparam>
            <typeparam name="TARG_ID"></typeparam>
            <summary>
            The AutoService for mapping types.
            </summary>
        </member>
        <member name="F:Api.Startup.MappingService`2.srcIdFieldName">
            <summary>
            E.g. "UserId". The field name of the source ID.
            </summary>
        </member>
        <member name="F:Api.Startup.MappingService`2.targetIdFieldName">
            <summary>
            E.g. "TagId". The field name of the tag ID.
            </summary>
        </member>
        <member name="F:Api.Startup.MappingService`2.srcAndTargEq">
            <summary>
            Src=? and Targ=?
            </summary>
        </member>
        <member name="F:Api.Startup.MappingService`2.targetIdFieldEquals">
            <summary>
            TargetName=?
            </summary>
        </member>
        <member name="F:Api.Startup.MappingService`2.srcIdFieldEquals">
            <summary>
            SrcName=?
            </summary>
        </member>
        <member name="F:Api.Startup.MappingService`2.srcIdFieldNameEqSet">
            <summary>
            SrcName=[?]
            </summary>
        </member>
        <member name="F:Api.Startup.MappingService`2.targetIdFieldNameEqSet">
            <summary>
            TargetName=[?]
            </summary>
        </member>
        <member name="F:Api.Startup.MappingService`2._cacheIndex">
            <summary>
            Quick ref to cache index, if it is cached.
            </summary>
        </member>
        <member name="F:Api.Startup.MappingService`2._reverseCacheIndex">
            <summary>
            Quick ref to reverse cache index, if it is cached.
            </summary>
        </member>
        <member name="M:Api.Startup.MappingService`2.#ctor(System.Type,System.String)">
            <summary>
            Creates a mapping service using the given type as the mapping object.
            </summary>
            <param name="t"></param>
            <param name="entityName"></param>
        </member>
        <member name="M:Api.Startup.MappingService`2.DeleteByTarget(Api.Contexts.Context,`1,DataOptions)">
            <summary>
            Deletes all rows by target ID.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="P:Api.Startup.MappingService`2.IsMapping">
            <summary>
            True if this is a mapping service.
            </summary>
        </member>
        <member name="M:Api.Startup.MappingService`2.DeleteByIds(Api.Contexts.Context,`0,`1)">
            <summary>
            Deletes a mapping by the src and target IDs.
            </summary>
            <param name="context"></param>
            <param name="src"></param>
            <param name="targ"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`2.GetSourceIndex">
            <summary>
            Gets the index for source values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`2.SourceContainsAny(Api.Startup.IDCollector{`0},Api.Startup.IDCollector{`1})">
            <summary>
            Adds source IDs to the given collector if the source contains any of the given target IDs.
            </summary>
            <param name="collector"></param>
            <param name="idSet"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`2.SourceContainsAll(Api.Startup.IDCollector{`0},Api.Startup.IDCollector{`1},System.Boolean)">
            <summary>
            Adds IDs to the given collector for any sources which contain all of the given IDs.
            </summary>
            <param name="collector"></param>
            <param name="idSet">MUST be sorted in ascending order.</param>
            <param name="exactMatch">True if it must match all and only all - there are no additional ones.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`2.GetByIds(Api.Contexts.Context,`0,`1)">
            <summary>
            Gets a mapping by the src and target IDs.
            </summary>
            <param name="context"></param>
            <param name="src"></param>
            <param name="targ"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`2.GetRawCacheList(`0)">
            <summary>
            Gets a cache iterator for the given source ID (if the cache is active, and it exists).
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`2.GetSourceFromCache(`0)">
            <summary>
            Gets a cache iterator for the given source ID (if the cache is active, and it exists).
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`2.ExistsInCache(`0,`1)">
            <summary>
            True if the given mapping entry exists in this services cache. Note that if the cache is not active, this returns false.
            </summary>
            <param name="src"></param>
            <param name="targ"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`2.CheckIfExists(Api.Contexts.Context,`0,`1)">
            <summary>
            Returns true if a mapping from src_id => targ_id exists.
            </summary>
            <param name="context"></param>
            <param name="src"></param>
            <param name="targ"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`2.CreateIfNotExists(Api.Contexts.Context,`0,`1)">
            <summary>
            Returns true if a mapping from src_id => targ_id was just created. False if it already existed.
            </summary>
            <param name="context"></param>
            <param name="src"></param>
            <param name="targ"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingService`2.EnsureMapping(Api.Contexts.Context,`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Ensures the given set of target IDs are exactly what is present in the map.
            </summary>
            <param name="context"></param>
            <param name="src"></param>
            <param name="targetIds"></param>
            <returns></returns>
        </member>
        <member name="F:Api.Startup.MappingService`2.MappingNetworkRooms">
            <summary>
            The network room set specifically for mappings.
            This is indexed by SourceId.
            </summary>
        </member>
        <member name="T:Api.Startup.MappingToJson">
            <summary>
            Used to output JSON for a mapping entity. The default is (uint,uint)
            </summary>
        </member>
        <member name="M:Api.Startup.MappingToJson.GetMapper(System.Type,System.Type)">
            <summary>
            Gets a shared JSON mapper for the given ID type pair.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingToJson.ToJson(Api.Database.Content{System.UInt32},Api.SocketServerLibrary.Writer)">
            <summary>
            Writes the given mapping into the given writer.
            </summary>
            <param name="mapping"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Api.Startup.MappingToJsonUintUlong">
            <summary>
            Converts (uint,ulong) mappings.
            </summary>
        </member>
        <member name="M:Api.Startup.MappingToJsonUintUlong.ToJson(Api.Database.Content{System.UInt32},Api.SocketServerLibrary.Writer)">
            <summary>
            Writes the given mapping into the given writer.
            </summary>
            <param name="mapping"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Api.Startup.MappingToJsonUlongUlong">
            <summary>
            Converts (ulong,ulong) mappings.
            </summary>
        </member>
        <member name="M:Api.Startup.MappingToJsonUlongUlong.ToJson(Api.Database.Content{System.UInt32},Api.SocketServerLibrary.Writer)">
            <summary>
            Writes the given mapping into the given writer.
            </summary>
            <param name="mapping"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Api.Startup.MappingToJsonUlongUint">
            <summary>
            Converts (ulong,uint) mappings.
            </summary>
        </member>
        <member name="M:Api.Startup.MappingToJsonUlongUint.ToJson(Api.Database.Content{System.UInt32},Api.SocketServerLibrary.Writer)">
            <summary>
            Writes the given mapping into the given writer.
            </summary>
            <param name="mapping"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Api.Startup.EnsuredMapping`2">
            <summary>
            Used to track mappings whilst they are being added/ removed.
            </summary>
        </member>
        <member name="F:Api.Startup.EnsuredMapping`2.Readded">
            <summary>
            True if this mapping was 'readded'.
            </summary>
        </member>
        <member name="F:Api.Startup.EnsuredMapping`2.Mapping">
            <summary>
            The mapping itself.
            </summary>
        </member>
        <member name="T:Api.Startup.MappingTypeEngine">
            <summary>
            Generates system types from mapping type descriptions.
            </summary>
        </member>
        <member name="M:Api.Startup.MappingTypeEngine.GetOrGenerate(AutoService,AutoService,System.String,System.String)">
            <summary>
            Gets or generates a mapping from src to target.
            </summary>
            <param name="srcType"></param>
            <param name="targetType"></param>
            <param name="listAs"></param>
            <param name="group">The database group into which the mapping should be added.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MappingTypeEngine.Generate(AutoService,AutoService,System.String,System.String)">
            <summary>
            Generates a system type from the given custom type descriptions.
            </summary>
        </member>
        <member name="M:Api.Startup.MappingTypeEngine.InstallType``4(AutoService{``0,``2},AutoService{``1,``3},System.String)">
            <summary>
            Creates a service etc for the given system type and activates it. Invoked via reflection with a runtime compiled type.
            </summary>
        </member>
        <member name="M:Api.Startup.MappingTypeEngine.Remove(AutoService,AutoService)">
            <summary>
            When target Services are removed ensure all mapping are cleared 
            </summary>
            <param name="srcType"></param>
            <param name="targetType"></param>
        </member>
        <member name="T:Api.Startup.MappingServiceGenerationMeta">
            <summary>
            Generation meta used whilst a mapping service starts.
            </summary>
        </member>
        <member name="F:Api.Startup.MappingServiceGenerationMeta.Service">
            <summary>
            The service
            </summary>
        </member>
        <member name="F:Api.Startup.MappingServiceGenerationMeta.ListAs">
            <summary>
            The mapping name
            </summary>
        </member>
        <member name="F:Api.Startup.MappingServiceGenerationMeta.Target">
            <summary>
            The target service
            </summary>
        </member>
        <member name="F:Api.Startup.MappingServiceGenerationMeta.GenTask">
            <summary>
            The generation task. If not null, await it.
            </summary>
        </member>
        <member name="T:Api.Startup.MetaAttribute">
            <summary>
            Add [Meta("fieldName")] attributes to your fields to declare that the field should be used for a particular meta property.
            These meta properties are used by the site header, RSS feeds and things like the content listing dropdown menus in the admin panel.
            If you don't declare a meta field, a best guess will be used instead for both "title" and "description".
            </summary>
        </member>
        <member name="F:Api.Startup.MetaAttribute.FieldName">
            <summary>
            The meta field name. Common ones are "title" and "description".
            </summary>
        </member>
        <member name="T:Api.Startup.LinuxStatistics">
            <summary>
            Captures OS resource statistics such as CPU usage on Linux hosts
            </summary>
        </member>
        <member name="M:Api.Startup.LinuxStatistics.Collect(Api.Startup.HostDetails)">
            <summary>
            Collects the host stats into the given details object.
            </summary>
        </member>
        <member name="T:Api.Startup.WindowsStatistics">
            <summary>
            Captures OS resource statistics such as CPU usage on Windows hosts
            </summary>
        </member>
        <member name="M:Api.Startup.WindowsStatistics.Collect(Api.Startup.HostDetails)">
            <summary>
            Collects stats into the given object.
            </summary>
            <param name="intoObject"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.HostDetails">
            <summary>
            Host details used by the monitoring system (if in use).
            </summary>
        </member>
        <member name="F:Api.Startup.HostDetails.HostName">
            <summary>
            Server hostname or other unique identifying feature.
            </summary>
        </member>
        <member name="F:Api.Startup.HostDetails.Environment">
            <summary>
            The env name.
            </summary>
        </member>
        <member name="F:Api.Startup.HostDetails.Key">
            <summary>
            This is the host key in host update, and the project host key in host create.
            </summary>
        </member>
        <member name="F:Api.Startup.HostDetails.HostGroupId">
            <summary>
            A region or group within a region.
            </summary>
        </member>
        <member name="F:Api.Startup.HostDetails.ServerType">
            <summary>
            The type of server. Loadbalancers are special because they will receive a list of IPs.
            </summary>
        </member>
        <member name="F:Api.Startup.HostDetails.PrivateIPv4">
            <summary>
            Private ip
            </summary>
        </member>
        <member name="F:Api.Startup.HostDetails.PrivateIPv6">
            <summary>
            Private ip (optional)
            </summary>
        </member>
        <member name="F:Api.Startup.HostDetails.IPv4">
            <summary>
            Public ip
            </summary>
        </member>
        <member name="F:Api.Startup.HostDetails.IPv6">
            <summary>
            Public ip
            </summary>
        </member>
        <member name="F:Api.Startup.HostDetails.Cpu">
            <summary>
            CPU usage
            </summary>
        </member>
        <member name="F:Api.Startup.HostDetails.CoreCount">
            <summary>
            CPU core count
            </summary>
        </member>
        <member name="F:Api.Startup.HostDetails.Ram">
            <summary>
            RAM usage
            </summary>
        </member>
        <member name="F:Api.Startup.HostDetails.RamMax">
            <summary>
            amount of ram available
            </summary>
        </member>
        <member name="F:Api.Startup.HostDetails.Storage">
            <summary>
            Disk storage usage
            </summary>
        </member>
        <member name="F:Api.Startup.HostDetails.StorageMax">
            <summary>
            amount of storage available
            </summary>
        </member>
        <member name="T:Api.Startup.MonitorService">
            <summary>
            A service which records resource health and sends status updates if they are required.
            The status updates are sent to a service defined in config either declared as "ReportTo" in the database or appsettings.
            </summary>
        </member>
        <member name="F:Api.Startup.MonitorService._url">
            <summary>
            URL to post to. The response may indicate that a different url and key should be used.
            </summary>
        </member>
        <member name="M:Api.Startup.MonitorService.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="M:Api.Startup.MonitorService.InitialPopulation(Api.Startup.HostDetails)">
            <summary>
            Initially sets up the host details object.
            </summary>
            <param name="into"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MonitorService.GetId(System.String)">
            <summary>
            Gets a group ID from the given value. Just a simple hash function.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MonitorService.GetHostDetails">
            <summary>
            Collects the host details ready for sending to a remote tracking service or similar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MonitorService.PostDetails(Api.Startup.HostDetails)">
            <summary>
            Used to post the given details to the monitor service.
            </summary>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.MonitorService.OnMonitor">
            <summary>
            Runs when the monitor system is ticked.
            </summary>
        </member>
        <member name="T:Api.Startup.PlatformStatistics">
            <summary>
            Base class for platform specific statistics.
            See also LinuxStatistics and WindowsStatistics.
            </summary>
        </member>
        <member name="M:Api.Startup.PlatformStatistics.Collect(Api.Startup.HostDetails)">
            <summary>
            Collects the host stats into the given details object.
            </summary>
        </member>
        <member name="T:Api.Startup.ReportToConfig">
            <summary>
            Config for the monitor service.
            </summary>
        </member>
        <member name="P:Api.Startup.ReportToConfig.Url">
            <summary>
            The URL to post the payload to.
            </summary>
        </member>
        <member name="P:Api.Startup.ReportToConfig.Frequency">
            <summary>
            Frequency in seconds of the reports.
            </summary>
        </member>
        <member name="P:Api.Startup.ReportToConfig.Key">
            <summary>
            A project key if there is one. Included in the post payload as "key".
            </summary>
        </member>
        <member name="P:Api.Startup.ReportToConfig.ServerType">
            <summary>
            Server type if one is set.
            </summary>
        </member>
        <member name="T:Api.Startup.Pluralise">
            <summary>
            Helper class for handling basic plurals of words (usually content types). 
            Not intended to be completely accurate; just fast and accurate for the vast majority of words it will encounter.
            </summary>
        </member>
        <member name="F:Api.Startup.Pluralise.exceptions">
            <summary>
            Exception list.
            </summary>
        </member>
        <member name="M:Api.Startup.Pluralise.FirstLetterToUpper(System.String)">
            <summary>
            Uppercases first letter of word.
            </summary>
        </member>
        <member name="M:Api.Startup.Pluralise.NiceName(System.String)">
            <summary>
            Adds spaces into the given text. E.g. "BlogPost" becomes "Blog Post".
            </summary>
        </member>
        <member name="M:Api.Startup.Pluralise.Apply(System.String)">
            <summary>
            Attempts to pluralize the specified text according to the rules of the English language.
            </summary>
            <remarks>
            This function attempts to pluralize as many words as practical by following these rules:
            <list type="bullet">
            	<item><description>Words that don't follow any rules (e.g. "mouse" becomes "mice") are returned from a dictionary.</description></item>
            	<item><description>Words that end with "y" (but not with a vowel preceding the y) are pluralized by replacing the "y" with "ies".</description></item>
            	<item><description>Words that end with "us", "ss", "x", "ch" or "sh" are pluralized by adding "es" to the end of the text.</description></item>
            	<item><description>Words that end with "f" or "fe" are pluralized by replacing the "f(e)" with "ves".</description></item>
            </list>
            </remarks>
            <param name="text">The text to pluralize.</param>
            <returns>A string that consists of the given singular word in its pluralized form, in lowercase.</returns>
        </member>
        <member name="T:Api.Startup.PublicException">
            <summary>
            Used when an exception is ok to be displayed publicly. It's outputted as an ErrorResponse.
            </summary>
        </member>
        <member name="F:Api.Startup.PublicException.Response">
            <summary>
            Undelying error response.
            </summary>
        </member>
        <member name="F:Api.Startup.PublicException.StatusCode">
            <summary>
            Status code. Usually 400.
            </summary>
        </member>
        <member name="M:Api.Startup.PublicException.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Make a new exception. Throw it when doing this.
            </summary>
            <param name="message"></param>
            <param name="code">Used to translate your message.</param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Api.Startup.PublicException.ToJson">
            <summary>
            Serializes the error response to JSON.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.IncludeSet">
            <summary>
            Represents a set of inclusions. Assumes that most include strings will very rarely vary.
            </summary>
        </member>
        <member name="F:Api.Startup.IncludeSet.IncludeString">
            <summary>
            The raw include string (lowercase).
            </summary>
        </member>
        <member name="F:Api.Startup.IncludeSet.RelativeTo">
            <summary>
            Content field set that this include set is relative to.
            </summary>
        </member>
        <member name="M:Api.Startup.IncludeSet.#ctor(System.String,Api.Startup.ContentFields)">
            <summary>
            A set of inclusions for the given parent type and include string.
            </summary>
        </member>
        <member name="M:Api.Startup.IncludeSet.Parse">
            <summary>
            An allocating call which builds the tree of includes.
            </summary>
        </member>
        <member name="F:Api.Startup.IncludeSet.RootInclude">
            <summary>
            Root inclusion.
            </summary>
        </member>
        <member name="M:Api.Startup.IncludeSet.Add(System.String)">
            <summary>
            Adds a field to the set. It can contain a * (or be just "*"), but not after a mixed content type field.
            </summary>
            <param name="rootRelativeFieldName"></param>
        </member>
        <member name="T:Api.Startup.InclusionNode">
            <summary>
            A particular inclusion node in the tree of nodes.
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode.HostField">
            <summary>
            The field that sources data for this inclusion node.
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode.Service">
            <summary>
            The service to use to resolve the actual value of this node.
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode.TypeSource">
            <summary>
            A field from which the type to use comes.
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode.DynamicChildIncludes">
            <summary>
            For includes which are children of a dynamic include node.
            This string is evaluated as a new include set when the actual target service is known.
            Because the include set comes from the includes cache, it incurs only a very little penalty.
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode.IncludeName">
            <summary>
            Included as.
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode.UniqueChildNodes">
            <summary>
            Set of unique children, by lowercase field name.
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode.UniqueFunctionalIncludes">
            <summary>
            Set of unique functional children, by lowercase field name.
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode.ChildNodes">
            <summary>
            Created during the Bake() call.
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode.FunctionalIncludes">
            <summary>
            The set of functional includes for this node, if there are any (can be null, but won't be an empty array).
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode.CollectorIndex">
            <summary>
            ID collector to use.
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode.RelativeTo">
            <summary>
            Relative set
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode.IdFields">
            <summary>
            Id fields to create collectors for whilst this include node is being executed.
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode._includeHeader">
            <summary>
            The include header for this inclusion node.
            </summary>
        </member>
        <member name="P:Api.Startup.InclusionNode.IncludeHeader">
            <summary>
            The inclusion header. Ends with a map for ListAs. {"name":"Thing.Tags","fieldName":"tags","on":0,"map":[
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode.Parent">
            <summary>
            Parent node.
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode.InclusionOutputIndex">
            <summary>
            The index of this inclusion in the output inclusion array.
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode.MappingTargetField">
            <summary>
            E.g. TagId - the field in a mapping row that represents the target object. This must be collected as well.
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode.MappingTargetFieldName">
            <summary>
            Mapping target field name
            </summary>
        </member>
        <member name="F:Api.Startup.InclusionNode.MappingService">
            <summary>
            The mapping service for this list node.
            </summary>
        </member>
        <member name="M:Api.Startup.InclusionNode.#ctor(Api.Startup.ContentFields,Api.Startup.InclusionNode)">
            <summary>
            Create a new node
            </summary>
            <param name="relativeTo"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Api.Startup.InclusionNode.SetHeader(System.String,System.String)">
            <summary>
            Sets this include node as a ListAs with the given header info.
            </summary>
            <param name="includedAs">The raw text in the include string that this include node came from.</param>
            <param name="listAs"></param>
        </member>
        <member name="M:Api.Startup.InclusionNode.SetHeader(System.String,System.String,System.String)">
            <summary>
            Sets this include node as a virtual field with the given header info.
            </summary>
            <param name="includedAs"></param>
            <param name="fieldName"></param>
            <param name="srcField"></param>
        </member>
        <member name="M:Api.Startup.InclusionNode.GetCollectors">
            <summary>
            Gets a linked list of ID collectors from the pool, which match the set of IdFields that this node wants to collect.
            </summary>
        </member>
        <member name="M:Api.Startup.InclusionNode.Add(Api.Startup.ContentField,System.String)">
            <summary>
            Add to tree
            </summary>
            <param name="field"></param>
            <param name="includeName">The original name of the include (in the include string).</param>
        </member>
        <member name="M:Api.Startup.InclusionNode.Bake(System.Int32@)">
            <summary>
            Bakes the dictionary into a fast linear array of children.
            </summary>
        </member>
        <member name="T:Api.Startup.FunctionalInclusionNode">
            <summary>
            A functional inclusion node. Including one of these triggers a custom function to run per object.
            </summary>
        </member>
        <member name="F:Api.Startup.FunctionalInclusionNode._jsonPropertyHeader">
            <summary>
            The string ,"includeName":
            </summary>
        </member>
        <member name="F:Api.Startup.FunctionalInclusionNode.ValueGenerator">
            <summary>
            Is a strong typed VirtualFieldValueGenerator. The type relates to the service for the current include node.
            For example, you ask for pages and include tags.primaryUrl. The root include node service is the pageservice, and the 1st child (tags) service is the tagService.
            The value generator for tags.primaryUrl is therefore a VirtualFieldValueGenerator for the tag type.
            </summary>
        </member>
        <member name="M:Api.Startup.FunctionalInclusionNode.SetHeader(System.String)">
            <summary>
            Sets the header for this node.
            </summary>
            <param name="includedAs"></param>
        </member>
        <member name="T:Api.Startup.TypeIOEngine">
            <summary>
            Generates a method which will write out all the fields of a type using raw byte copying whenever possible.
            As JSON strings are utf8, virtually all the heavy overhead is in conversion to and from UTF8. 
            Use ustring whenever feasible to avoid this overhead.
            </summary>
        </member>
        <member name="F:Api.Startup.TypeIOEngine.counter">
            <summary>
            Ensures unique names for assemblies generated during this session.
            </summary>
        </member>
        <member name="M:Api.Startup.TypeIOEngine.Generate``2(Api.Startup.JsonStructure{``0,``1})">
            <summary>
            Generates a system native write for the given structure.
            </summary>
        </member>
        <member name="F:Api.Startup.TypeIOEngine.TrueBytes">
            <summary>
            The bytes for "true"
            </summary>
        </member>
        <member name="F:Api.Startup.TypeIOEngine.IdHeader">
            <summary>
            The bytes for ',"id":
            </summary>
        </member>
        <member name="F:Api.Startup.TypeIOEngine.FalseBytes">
            <summary>
            The bytes for "false"
            </summary>
        </member>
        <member name="F:Api.Startup.TypeIOEngine.NullBytes">
            <summary>
            The bytes for "null"
            </summary>
        </member>
        <member name="M:Api.Startup.TypeIOEngine.GetTypeMap">
            <summary>
            Gets JSON field generators.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.TypeIOEngine.EmitWriteField(System.Reflection.Emit.ILGenerator,Api.Startup.ContentField,System.Action{System.Reflection.Emit.ILGenerator})">
            <summary>
            Emits JSON write of a given content field in to the given body.
            </summary>
            <param name="body"></param>
            <param name="field"></param>
            <param name="objLoader"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Api.Startup.TypeIOEngine.GenerateIDCollectors(Api.Startup.ContentField[])">
            <summary>
            Generates ID collectors for the given fields.
            </summary>
            <param name="idFields"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.TypeIOEngine.DebugField(System.String)">
            <summary>
            Used for debugging bolt generated IO.
            </summary>
        </member>
        <member name="M:Api.Startup.TypeIOEngine.Generate``2(System.Collections.Generic.List{Api.Startup.JsonStructure{``0,``1}})">
            <summary>
            Generates a system native write for the given structures. This list will usually be the list of all roles for a type on the first run.
            </summary>
        </member>
        <member name="M:Api.Startup.TypeIOEngine.WriteNull(System.Reflection.Emit.ILGenerator)">
            <summary>
            Writes either "true" or "false" based on the current value on the top of the stack.
            </summary>
            <param name="writerBody"></param>
        </member>
        <member name="M:Api.Startup.TypeIOEngine.WriteBool(System.Reflection.Emit.ILGenerator)">
            <summary>
            Writes either "true" or "false" based on the current value on the top of the stack.
            </summary>
            <param name="writerBody"></param>
        </member>
        <member name="M:Api.Startup.TypeIOEngine.GetFromCommonField(System.String,System.Byte[])">
            <summary>
            Creates a pre-gen byte field from one of the common fields.
            </summary>
            <param name="name"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.TypeIOEngine.WriteChar(System.Reflection.Emit.ILGenerator,System.Char)">
            <summary>
            Emits IL which will write exactly 1 character (the given one) to the stream.
            </summary>
            <param name="writer"></param>
            <param name="character"></param>
        </member>
        <member name="F:Api.Startup.TypeIOEngine._writeByte">
            <summary>
            Writer.Write(byte)
            </summary>
        </member>
        <member name="M:Api.Startup.TypeIOEngine.AddField(System.Reflection.Emit.TypeBuilder,System.Collections.Generic.List{Api.SocketServerLibrary.PreGeneratedByteField},System.String,System.Boolean)">
            <summary>
            Adds a field with the given textual content. It will be added as a UTF8 byte[].
            </summary>
            <param name="typeBuilder"></param>
            <param name="fields"></param>
            <param name="content"></param>
            <param name="includeLength"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.TypeIOEngine.AddField(System.Reflection.Emit.TypeBuilder,System.Collections.Generic.List{Api.SocketServerLibrary.PreGeneratedByteField},System.Byte[])">
            <summary>
            Adds a field with the given byte[] content.
            </summary>
            <param name="typeBuilder"></param>
            <param name="fields"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.JsonFieldType">
            <summary>
            A particular supported JSON field type.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonFieldType.Type">
            <summary>
            System type.
            </summary>
        </member>
        <member name="F:Api.Startup.JsonFieldType.OnSerialise">
            <summary>
            Serialises the value which is already on the stack.
            </summary>
        </member>
        <member name="M:Api.Startup.JsonFieldType.#ctor(System.Type,System.Action{System.Reflection.Emit.ILGenerator,System.Action})">
            <summary>
            Defines info about an available field type.
            </summary>
            <param name="type"></param>
            <param name="onSerialise"></param>
        </member>
        <member name="M:Api.Startup.JsonFieldType.EmitWrite(System.Reflection.Emit.ILGenerator,Api.Startup.JsonField,System.Type)">
            <summary>
            Emits the necessary command to serialise the field.
            </summary>
        </member>
        <member name="M:Api.Startup.JsonFieldType.EmitWrite(System.Reflection.Emit.ILGenerator,Api.Startup.ContentField,System.Type,System.Action{System.Reflection.Emit.ILGenerator})">
            <summary>
            Emits the necessary command to serialise the field.
            </summary>
        </member>
        <member name="T:Api.Startup.ConstructedCustomContentType">
            <summary>
            A constructed custom content type.
            </summary>
        </member>
        <member name="F:Api.Startup.ConstructedCustomContentType.Id">
            <summary>
            The ID of the CustomContentType.
            </summary>
        </member>
        <member name="F:Api.Startup.ConstructedCustomContentType.ContentType">
            <summary>
            The underlying custom type.
            </summary>
        </member>
        <member name="F:Api.Startup.ConstructedCustomContentType.ControllerType">
            <summary>
            The controller type for this custom type.
            </summary>
        </member>
        <member name="F:Api.Startup.ConstructedCustomContentType.Service">
            <summary>
            The autoservice for this custom type.
            </summary>
        </member>
        <member name="T:Api.Startup.TypeReaderWriter`1">
            <summary>
            A reader/ writer.
            </summary>
        </member>
        <member name="M:Api.Startup.TypeReaderWriter`1.WriteJsonPartial(`0,Api.SocketServerLibrary.Writer)">
            <summary>
            Writes only the type and id fields of the given object.
            </summary>
            <param name="obj"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Api.Startup.TypeReaderWriter`1.WriteJsonUnclosed(`0,Api.SocketServerLibrary.Writer)">
            <summary>
            Writes the given object to the given writer in JSON format.
            </summary>
            <param name="obj"></param>
            <param name="writer"></param>
        </member>
        <member name="T:Api.Startup.IDCollector">
            <summary>
            ID Collector.
            </summary>
        </member>
        <member name="F:Api.Startup.IDCollector._nextCollectorField">
            <summary>
            The fieldInfo for NextCollector.
            </summary>
        </member>
        <member name="P:Api.Startup.IDCollector.NextCollectorFieldInfo">
            <summary>
            The fieldInfo for NextCollector.
            </summary>
        </member>
        <member name="F:Api.Startup.IDCollector.NextCollector">
            <summary>
            Next collector.
            </summary>
        </member>
        <member name="F:Api.Startup.IDCollector.Pool">
            <summary>
            The field that pools collectors of this type.
            </summary>
        </member>
        <member name="M:Api.Startup.IDCollector.Collect(System.Object)">
            <summary>
            Collects a field value from the given entity.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Api.Startup.IDCollector.Release">
            <summary>
            Release collector to pool.
            </summary>
        </member>
        <member name="T:Api.Startup.MultiIdCollector">
            <summary>
            Used by dynamic includes. Holds multiple sub-collectors based on reading a type field.
            </summary>
        </member>
        <member name="F:Api.Startup.MultiIdCollector.CollectorFill">
            <summary>
            The number of slots used in the CollectorsByType set.
            </summary>
        </member>
        <member name="F:Api.Startup.MultiIdCollector.CollectorsByType">
            <summary>
            A buffer of collectors by type.
            </summary>
        </member>
        <member name="M:Api.Startup.MultiIdCollector.Release">
            <summary>
            Releases the collectors.
            </summary>
        </member>
        <member name="M:Api.Startup.MultiIdCollector.Add(System.String,System.UInt64)">
            <summary>
            Adds the given typed ID to the set.
            </summary>
            <param name="type"></param>
            <param name="id"></param>
        </member>
        <member name="T:Api.Startup.IDCollectorWithType">
            <summary>
            Holds a collector for a particular service.
            </summary>
        </member>
        <member name="F:Api.Startup.IDCollectorWithType.Collector">
            <summary>
            The collector. Will be an IDCollector[ID] where typeof(ID) == Service.IdType.
            </summary>
        </member>
        <member name="F:Api.Startup.IDCollectorWithType.Service">
            <summary>
            The service being collected for.
            </summary>
        </member>
        <member name="T:Api.Startup.IDCollectorEnum`1">
            <summary>
            ID collector enumeration cursor.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Api.Startup.IDCollectorEnum`1.Block">
            <summary>
            Current block.
            </summary>
        </member>
        <member name="F:Api.Startup.IDCollectorEnum`1.LastBlockFill">
            <summary>
            Fill of the last block.
            </summary>
        </member>
        <member name="F:Api.Startup.IDCollectorEnum`1.Index">
            <summary>
            Index in the current block. Maxes at 64, then block is advanced to the next one.
            </summary>
        </member>
        <member name="M:Api.Startup.IDCollectorEnum`1.HasMore">
            <summary>
            True if there's more.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.IDCollectorEnum`1.Current">
            <summary>
            Reads the current value and advances by one.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.IDCollector`1">
            <summary>
            Collects IDs of the given type. Uses a pool of buffers for fast, non-allocating performance.
            The ID collector itself can also be pooled.
            </summary>
        </member>
        <member name="F:Api.Startup.IDCollector`1.GenericCollectorPoolLock">
            <summary>
            Generic pool lock
            </summary>
        </member>
        <member name="F:Api.Startup.IDCollector`1.FirstInGenericPool">
            <summary>
            First ID collector in the pool for this field.
            </summary>
        </member>
        <member name="M:Api.Startup.IDCollector`1.RentGenericCollector">
            <summary>
            Global pool of non-field specific uint collectors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.IDCollector`1.ReleaseGenericCollector(Api.Startup.IDCollector{`0})">
            <summary>
            Global pool of non-field specific ulong collectors.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.Startup.IDCollector`1.First">
            <summary>
            Linked list of blocks in this collector.
            </summary>
        </member>
        <member name="F:Api.Startup.IDCollector`1.Last">
            <summary>
            Linked list of blocks in this collector.
            </summary>
        </member>
        <member name="F:Api.Startup.IDCollector`1.FullBlockCount">
            <summary>
            Number of full blocks. Id count = (FullBlockCount * 64) + Count
            </summary>
        </member>
        <member name="F:Api.Startup.IDCollector`1.CurrentFill">
            <summary>
            Current block fill.
            </summary>
        </member>
        <member name="P:Api.Startup.IDCollector`1.OneEntry">
            <summary>
            True if there's exactly 1 entry.
            </summary>
        </member>
        <member name="P:Api.Startup.IDCollector`1.Count">
            <summary>
            Total number added so far.
            </summary>
        </member>
        <member name="M:Api.Startup.IDCollector`1.MatchAny(`0)">
            <summary>
            True if any value in the collector matches the given one.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.IDCollector`1.GetNonAllocEnumerator">
            <summary>
            Gets a non-alloc enumeration tracker. Only use this if 
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.Startup.IDCollector`1.PrevValue">
            <summary>
            Quick ref to prev value to avoid a very common situation of adding the same ID repeatedly.
            </summary>
        </member>
        <member name="M:Api.Startup.IDCollector`1.Release">
            <summary>
            Returns all ID blocks and the collector itself back to host pools.
            </summary>
        </member>
        <member name="M:Api.Startup.IDCollector`1.ReleaseBlocks">
            <summary>
            Releases all ID blocks.
            </summary>
        </member>
        <member name="M:Api.Startup.IDCollector`1.ReleaseBlock(Api.Startup.IDBlock{`0})">
            <summary>
            Release a single ID block
            </summary>
        </member>
        <member name="M:Api.Startup.IDCollector`1.Add(`0)">
            <summary>
            Adds the given ID to the set.
            </summary>
        </member>
        <member name="M:Api.Startup.IDCollector`1.AddSorted(`0)">
            <summary>
            Adds the given ID to the set and sorts it for you.
            </summary>
        </member>
        <member name="M:Api.Startup.IDCollector`1.Sort(Api.Startup.IDBlock{`0},`0,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Sorts the value into the set.
            </summary>
        </member>
        <member name="M:Api.Startup.IDCollector`1.Eliminate(System.Int32,System.Boolean)">
            <summary>
            Used to eliminate takes the sorted array or repetitions
            and turns it into a set with no repitions and removes values that don't have the 
            minimum repetiions.
            </summary>
            <param name="minRepetitions"></param>
            <param name="exact"></param> this value is true if minRepetitions must match the count exactly.
        </member>
        <member name="M:Api.Startup.IDCollector`1.Debug">
            <summary>
            Used to debug the current state of the IDCollector
            </summary>
        </member>
        <member name="M:Api.Startup.IDCollector`1.PrintBlock(Api.Startup.IDBlock{`0},System.Text.StringBuilder)">
            <summary>
            Output the given ID block in to the given stringbuilder.
            </summary>
            <param name="currentBlock"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Api.Startup.IDCollector`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets an enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.IDCollector`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.IDBlock`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Api.Startup.IDBlock`1.Entries">
            <summary>
            The IDs
            </summary>
        </member>
        <member name="F:Api.Startup.IDBlock`1.Next">
            <summary>
            Next in the chain.
            </summary>
        </member>
        <member name="T:Api.Startup.IDBlockPool`1">
            <summary>
            This pools the allocation of blocks of IDs.
            </summary>
        </member>
        <member name="F:Api.Startup.IDBlockPool`1.PoolLock">
            <summary>
            A lock for thread safety.
            </summary>
        </member>
        <member name="F:Api.Startup.IDBlockPool`1.First">
            <summary>
            The current front of the pool.
            </summary>
        </member>
        <member name="M:Api.Startup.IDBlockPool`1.Get">
            <summary>
            Get a block from the pool, or instances once.
            </summary>
        </member>
        <member name="T:Api.Startup.Services">
            <summary>
            Helper class for grabbing service references.
            </summary>
        </member>
        <member name="F:Api.Startup.Services.Environment">
            <summary>
            Environment that we're running in. Use IsDevelopment, IsStaging and IsProduction for common ones.
            Has been sanitised so will typically be "dev", "stage" and "prod".
            </summary>
        </member>
        <member name="F:Api.Startup.Services.BuildHost">
            <summary>
            This is "xunit" when running as tests.
            </summary>
        </member>
        <member name="F:Api.Startup.Services.OriginalEnvironment">
            <summary>
            Environment that we're running in, exactly as it appears in the appsettings file.
            </summary>
        </member>
        <member name="F:Api.Startup.Services.Started">
            <summary>
            True when AfterStart has been called.
            </summary>
        </member>
        <member name="F:Api.Startup.Services.StartupWaiter">
            <summary>
            If services have not started yet, you can wait for this.
            </summary>
        </member>
        <member name="F:Api.Startup.Services.AllServiceTypes">
            <summary>
            The list of all service types sorted by their load order. Cleared after startup.
            </summary>
        </member>
        <member name="F:Api.Startup.Services.AllByName">
            <summary>
            A textual lookup of all services. Use Get instead. Textual key is e.g. "PageService".
            </summary>
        </member>
        <member name="F:Api.Startup.Services.All">
            <summary>
            The lookup of services. Use Get instead.
            </summary>
        </member>
        <member name="F:Api.Startup.Services.AutoServices">
            <summary>
            A lookup specifically for AutoService implementations.
            </summary>
        </member>
        <member name="F:Api.Startup.Services.ServiceByContentType">
            <summary>
            A lookup by content type ID to the autoService relating to it.
            </summary>
        </member>
        <member name="F:Api.Startup.Services.ServicedTypes">
            <summary>
            A lookup by actual content type to the autoService relating to it.
            </summary>
        </member>
        <member name="F:Api.Startup.Services.Provider">
            <summary>
            The underlying service provider, used to obtain injected service instances.
            </summary>
        </member>
        <member name="F:Api.Startup.Services.HostMappings">
            <summary>
            Server types.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.Startup.Services.HostNameMappings">
            <summary>
            Underlying host mappings.
            </summary>
        </member>
        <member name="M:Api.Startup.Services.RegisterAndStart">
            <summary>
            Called in an environment where the webserver is not needed or started. Registers and starts all services.
            Note that at least one service is expected to do some long lasting work; if no services ultimately do anything, the executable halts.
            </summary>
        </member>
        <member name="M:Api.Startup.Services.InstanceAll(System.IServiceProvider)">
            <summary>
            Sorts and then instances all services as singletons.
            </summary>
        </member>
        <member name="M:Api.Startup.Services.RegisterInto(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers services into the given collection and applies the types to AllServiceTypes.
            At this point they are not sorted or instanced.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Api.Startup.Services.GetHostMappings(System.String)">
            <summary>
            Gets a mapping for the given host name or returns a default if none.
            </summary>
            <param name="hostName"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.Services.HasHostType(System.String)">
            <summary>
            True if this server has the given host type.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.Services.HasHostType(System.Collections.Generic.List{System.String})">
            <summary>
            True if this server has any of the given host types.
            </summary>
            <param name="typeNames"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.Services.IsHostTypeDefined(System.String)">
            <summary>
            True if the given host type is declared in this cluster.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="P:Api.Startup.Services.HostTypes">
            <summary>
            Server types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.Services.SanitiseEnvironment(System.String)">
            <summary>
            Sanitises the given environment name, handling common variants.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.Services.IsDevelopment">
            <summary>
            True if this is the dev environment. Any of {null}, "dev" or "development" are accepted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.Services.IsProduction">
            <summary>
            True if this is the production environment. Any of "prod", "production" or "live" are accepted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.Services.IsStaging">
            <summary>
            True if this is the stage environment. Any of "stage" or "staging" are accepted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.Services.Get(System.String)">
            <summary>
            Gets a service by its textual interface name. Use this if you want to make a service optional and not a hard requirement for your module.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.Services.StateChange(System.Boolean,System.Object)">
            <summary>
            Will either register or deregister the given service, and trigger the service's StateChange event.
            </summary>
            <param name="startup">True if starting up, false if shutting down</param>
            <param name="service"></param>
        </member>
        <member name="M:Api.Startup.Services.GetAutoServiceType(System.Type)">
            <summary>
            Attempts to find the AutoService type for the given type, or null if it isn't one.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.Services.GetAutoControllerType(System.Type)">
            <summary>
            Attempts to find the AutoController type for the given type, or null if it isn't one.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.Services.GetByContentType(System.Type)">
            <summary>
            Gets a service by the content type that it serves.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.Services.GetByContentTypeId(System.Int32)">
            <summary>
            Gets a service by the content type ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.Services.Get``1">
            <summary>
            Gets a service without using injection. 
            Useful for when in entity classes etc.
            </summary>
            <typeparam name="T">The services interface.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.Services.TriggerStart">
            <summary>
            Call this to trigger the OnStart event.
            </summary>
        </member>
        <member name="T:Api.Startup.HostTypeConfig">
            <summary>
            Host type config from "HostTypes" appsettings block.
            </summary>
        </member>
        <member name="P:Api.Startup.HostTypeConfig.HostNameMappings">
            <summary>
            Used to map hostname to a particular host type.
            </summary>
        </member>
        <member name="T:Api.Startup.HostMapping">
            <summary>
            Host name mapping
            </summary>
        </member>
        <member name="P:Api.Startup.HostMapping.Hostname">
            <summary>
            The hostname regex to use.
            </summary>
        </member>
        <member name="P:Api.Startup.HostMapping.HostType">
            <summary>
            Host type e.g. "api, "huddle", "transcoder" etc.
            </summary>
        </member>
        <member name="P:Api.Startup.HostMapping.ShouldSync">
            <summary>
            True if this host type should sync with its cluster.
            </summary>
        </member>
        <member name="T:Api.Startup.StdOut">
            <summary>
            Handles cloned console data such that it can be accessed more easily by admins.
            </summary>
        </member>
        <member name="F:Api.Startup.StdOut.Writer">
            <summary>
            Underlying console writer.
            </summary>
        </member>
        <member name="T:Api.Startup.MonitoringExecModel">
            <summary>
            An exec model used by the /monitoring/exec endpoint.
            </summary>
        </member>
        <member name="F:Api.Startup.MonitoringExecModel.Command">
            <summary>
            The command to run including any args.
            </summary>
        </member>
        <member name="T:Api.Startup.MonitoringQueryModel">
            <summary>
            A query model used by the /monitoring/query endpoint.
            </summary>
        </member>
        <member name="F:Api.Startup.MonitoringQueryModel.Query">
            <summary>
            The database query to run.
            </summary>
        </member>
        <member name="T:Api.Startup.TargetMappingEventListener">
            <summary>
            Listens out for target service shutdown and removes mappings
            For example from customtypes when fields are added 
            </summary>
        </member>
        <member name="M:Api.Startup.TargetMappingEventListener.#ctor">
            <summary>
            When a service is removed, ensure that any mappings to it are removed 
            They will then be regenerated
            </summary>
        </member>
        <member name="T:Api.Startup.VirtualFieldValueGenerator`2">
            <summary>
            Inherit this to define a virtual field value generator.
            Value generators let you define custom code for an includable name.
            primaryUrl is an example of a value generator (it's in the Pages module).
            The name of the includable field simply originates from the name of the class; 
            it's your class name, minus ValueGenerator (if it ends with it), then camelCase'd.
            A usage template is available at the bottom of this file.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
        </member>
        <member name="M:Api.Startup.VirtualFieldValueGenerator`2.GetValue(Api.Contexts.Context,`0,Api.SocketServerLibrary.Writer)">
            <summary>
            Generate the value.
            </summary>
            <param name="context"></param>
            <param name="forObject"></param>
            <param name="writer">Must write the value into the given JSON writer. If you aren't outputting anything, you must use writer.WriteASCII("null");</param>
            <returns></returns>
        </member>
        <member name="M:Api.Startup.VirtualFieldValueGenerator`2.GetOutputType">
            <summary>
            The type, if any, associated with the value being outputted.
            For example, if GetValue outputs only strings, this is typeof(string).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Startup.WebServerStartupInfo">
            <summary>
            Used by ASP.NET Core as the startup object.
            It discovers and registers all available services.
            </summary>
        </member>
        <member name="E:Api.Startup.WebServerStartupInfo.OnConfigureServices">
            <summary>
            An event which fires when services are being configured.
            </summary>
        </member>
        <member name="E:Api.Startup.WebServerStartupInfo.OnConfigureMvc">
            <summary>
            An event which fires when services are being configured.
            </summary>
        </member>
        <member name="E:Api.Startup.WebServerStartupInfo.OnConfigure">
            <summary>
            An event which fires when Configure occurs.
            </summary>
        </member>
        <member name="E:Api.Startup.WebServerStartupInfo.OnConfigureApplication">
            <summary>
            An event which fires when the application is being configured.
            </summary>
        </member>
        <member name="F:Api.Startup.WebServerStartupInfo._corsConfig">
            <summary>
            Cors configuration.
            </summary>
        </member>
        <member name="M:Api.Startup.WebServerStartupInfo.#ctor">
            <summary>
            Create a new web startup info instance.
            </summary>
        </member>
        <member name="F:Api.Startup.WebServerStartupInfo.mvcBuilder">
            <summary>
            IMVCBuilder, available during the OnConfigureServices event.
            </summary>
        </member>
        <member name="M:Api.Startup.WebServerStartupInfo.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Called by the runtime. This automatically looks for classes which end 
            with *Service and implement an interface of the same name preceeded with I.
            </summary>
        </member>
        <member name="M:Api.Startup.WebServerStartupInfo.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider)">
            <summary>
            Configures the HTTP pipeline.
            </summary>
        </member>
        <member name="T:Api.Uploader.Upload">
            <summary>
            Meta for uploaded files.
            </summary>
        </member>
        <member name="M:Api.Uploader.Upload.GetUrl(System.String,System.UInt32)">
            <summary>
            Gets the absolute URL of this upload (unsigned).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.Upload.GetTranscodeCallbackUrl(System.UInt32)">
            <summary>
            Gets a transcode callback URL. This allows trustless file manipulation.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.Uploader.Upload._uploadService">
            <summary>
            The signature service for priv uploads.
            </summary>
        </member>
        <member name="F:Api.Uploader.Upload.OriginalName">
            <summary>
            The original file name.
            </summary>
        </member>
        <member name="F:Api.Uploader.Upload.FileType">
            <summary>
            The lowercased file type, e.g. "png".
            </summary>
        </member>
        <member name="F:Api.Uploader.Upload.Variants">
            <summary>
            filetype variants separated by | if there are any.
            </summary>
        </member>
        <member name="F:Api.Uploader.Upload.Blurhash">
            <summary>
            A blurhash if there is one.
            </summary>
        </member>
        <member name="F:Api.Uploader.Upload.Width">
            <summary>
            If this is an image, the original width.
            </summary>
        </member>
        <member name="F:Api.Uploader.Upload.Height">
            <summary>
            If this is an image, the original height.
            </summary>
        </member>
        <member name="F:Api.Uploader.Upload.FocalX">
            <summary>
            If this is an image, the horizontal focal point (as a percentage).
            </summary>
        </member>
        <member name="F:Api.Uploader.Upload.FocalY">
            <summary>
            If this is an image, the vertical focal point (as a percentage).
            </summary>
        </member>
        <member name="F:Api.Uploader.Upload.Alt">
            <summary>
            The alternative name for the image
            </summary>
        </member>
        <member name="F:Api.Uploader.Upload.Author">
            <summary>
            The author/photographer for the image
            </summary>
        </member>
        <member name="F:Api.Uploader.Upload.UsageCount">
            <summary>
            The number of times the image is used
            </summary>
        </member>
        <member name="F:Api.Uploader.Upload.IsImage">
            <summary>
            True if this upload is an image.
            </summary>
        </member>
        <member name="F:Api.Uploader.Upload.IsPrivate">
            <summary>
            True if this is a private upload and requires a signature in order to access it publicly.
            </summary>
        </member>
        <member name="F:Api.Uploader.Upload.IsVideo">
            <summary>True if this is a video.</summary>
        </member>
        <member name="F:Api.Uploader.Upload.IsAudio">
            <summary>True if this is audio.</summary>
        </member>
        <member name="F:Api.Uploader.Upload.TranscodeState">
            <summary>The transcode state. 2 means it's been transcoded, 1 is transcode in progress.</summary>
        </member>
        <member name="F:Api.Uploader.Upload.Subdirectory">
            <summary>
            The subdirectory that this upload was put into, if any. Ensure that users can't directly set this.
            </summary>
        </member>
        <member name="P:Api.Uploader.Upload.TemporaryPath">
            <summary>
            Working memory only temporary filesystem path. Can be null if something has already relocated the upload and it is "done".
            </summary>
        </member>
        <member name="P:Api.Uploader.Upload.Ref">
            <summary>
            Gets a ref which may be signed.
            The HMAC is for the complete string "private:ID.FILETYPE?t=TIMESTAMP&amp;s="
            </summary>
        </member>
        <member name="M:Api.Uploader.Upload.ReadFile(System.String)">
            <summary>
            Read the bytes of the given variant of this upload. Convenience method for the method of the same name on UploadService.
            </summary>
            <param name="variant"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.Upload.GetMimeType(System.String)">
            <summary>
            Gets an appropriate mime type, when possible, based on the file type.
            </summary>
        </member>
        <member name="M:Api.Uploader.Upload.GetFilePath(System.String,System.Boolean)">
            <summary>
            File path to this content using the given size name.
            It's either "original" or a specific width in pixels, e.g. "400".
            </summary>
        </member>
        <member name="M:Api.Uploader.Upload.GetRelativePath(System.String,System.Boolean)">
            <summary>
            Relative path used as both the actual filepath and the URL
            </summary>
            <param name="sizeName"></param>
            <param name="omitExt"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.Upload.GetStoredFilename(System.String,System.Boolean)">
            <summary>
            The filename, excluding any subdirectory.
            </summary>
            <param name="sizeName"></param>
            <param name="omitExt"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.AbsMaxExtensions.AbsMax(System.ReadOnlySpan{System.Single})">
            <summary>
            Calculates the absolute max of the given float array.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Uploader.BlurHashEncoder">
            <summary>
            The core BlurHash encoder.
            </summary>
        </member>
        <member name="M:Api.Uploader.BlurHashEncoder.Encode(ImageMagick.MagickImage,System.Boolean)">
            <summary>
            Encodes the given small image magick image. It must've already been resized before passing it here, ideally to 32px or smaller.
            </summary>
            <param name="image"></param>
            <param name="isWide">True if the original image is wider than it is tall.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Uploader.EventListener">
            <summary>
            Listens for various events to setup the auth system.
            </summary>
        </member>
        <member name="F:Api.Uploader.EventListener.MaxTimestampTicks">
            <summary>
            Maximum amount of ticks that can occur before a private file timestamp expires. Default is 1 hour worth.
            </summary>
        </member>
        <member name="M:Api.Uploader.EventListener.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="T:Api.Uploader.FileConsistencyInfo">
            <summary>
            Info for a particular file.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileConsistencyInfo.Number">
            <summary>
            File upload number.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileConsistencyInfo.Path">
            <summary>
            Complete original path. Can contain \ or /
            </summary>
        </member>
        <member name="F:Api.Uploader.FileConsistencyInfo.DashOffset">
            <summary>
            Offset to the dash in the filename, just before the variant.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileConsistencyInfo.DirectoryOffset">
            <summary>
            Offset to the first / in the filename, just before the name.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileConsistencyInfo.FileType">
            <summary>
            The type of the file.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileConsistencyInfo.FileName">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileConsistencyInfo.Variant">
            <summary>
            The variant of the file.
            </summary>
        </member>
        <member name="P:Api.Uploader.FileConsistencyInfo.Subdirectory">
            <summary>
            The subdirectory.
            </summary>
        </member>
        <member name="T:Api.Uploader.FileDelete">
            <summary>
            Used during file deletion.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileDelete.Path">
            <summary>
            The full path the file is at.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileDelete.IsPrivate">
            <summary>
            True if it's a private file.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileDelete.Succeeded">
            <summary>
            Set to true when any subsystem found and deleted the file.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileDelete.Handled">
            <summary>
            Set to true when any subsystem attempted to delete the file.
            </summary>
        </member>
        <member name="T:Api.Uploader.FileMetaStream">
            <summary>
            A stream of information about present uploaded files.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileMetaStream.Cancelled">
            <summary>
            Set to true if this stream should be cancelled.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileMetaStream.Handled">
            <summary>
            True when a filesystem of some kind has handled this stream request.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileMetaStream.RetainAll">
            <summary>
            True if AllFiles should be populated.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileMetaStream.AllFiles">
            <summary>
            Populated only if RetainAll is true.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileMetaStream.FilesListed">
            <summary>
            The total number of files listed.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileMetaStream.SearchPrivate">
            <summary>
            True if this stream will search the private area or the public one.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileMetaStream.SearchDirectory">
            <summary>
            The directory to start from, if any. Must not contain /content/ or /content-private/ - that is handled by SearchPrivate.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileMetaStream.Current">
            <summary>
            Reused meta object for the current file, unless RetainAll is true.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileMetaStream.OnFile">
            <summary>
            Optionally async callback which occurs when a file has been discovered.
            Use fields on this FileMetaStream itself for information about the file.
            </summary>
        </member>
        <member name="M:Api.Uploader.FileMetaStream.SortAlphabetically(System.Boolean)">
            <summary>
            Sorts the files alphabetically. RetainAll must be true for this to work.
            </summary>
            <param name="asc">A->Z if true (default)</param>
        </member>
        <member name="M:Api.Uploader.FileMetaStream.SortByModified(System.Boolean)">
            <summary>
            Sorts the files by modified date. RetainAll must be true for this to work.
            </summary>
            <param name="asc">Oldest -> Newest (default)</param>
        </member>
        <member name="M:Api.Uploader.FileMetaStream.StartFile">
            <summary>
            Start indicating a file is in progress.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.FileMetaStream.FileListed(Api.Uploader.FileMeta)">
            <summary>
            Indicates the given meta has been listed.
            </summary>
            <param name="fm"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Uploader.FileMeta">
            <summary>
            Meta for a single file.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileMeta.LastModifiedUtc">
            <summary>
            Last modified date of the current file. Valid during the OnFile callback.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileMeta.Path">
            <summary>
            Current file path, including /content/ or /content-private/. Valid during the OnFile callback.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileMeta.FileSize">
            <summary>
            The file size.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileMeta.IsDirectory">
            <summary>
            True if it's a directory.
            </summary>
        </member>
        <member name="T:Api.Uploader.FileUploadBody">
            <summary>
            The post body when uploading a file.
            </summary>
        </member>
        <member name="P:Api.Uploader.FileUploadBody.File">
            <summary>
            The file being uploaded.
            </summary>
        </member>
        <member name="P:Api.Uploader.FileUploadBody.IsPrivate">
            <summary>
            True if this is a private upload.
            </summary>
        </member>
        <member name="T:Api.Uploader.WebpConfig">
            <summary>
            Webp config.
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.Quality">
            <summary>
            Gets or sets the compression value for image quality between 0 and 100
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.AlphaCompression">
            <summary>
            Gets or sets the encoding of the alpha plane (webp:alpha-compression).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.AlphaFiltering">
            <summary>
            Gets or sets the predictive filtering method for the alpha plane (webp:alpha-filtering).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.AlphaQuality">
            <summary>
            Gets or sets the compression value for alpha compression between 0 and 100. Lossless compression of alpha is achieved using a value of 100, while the lower values result in a lossy compression (webp:alpha-quality).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.AutoFilter">
            <summary>
            Gets or sets a value indicating wether the algorithm should spend additional time optimizing the filtering strength to reach a well-balanced quality (webp:auto-filter).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.EmulateJpegSize">
            <summary>
            Gets or sets a value indicating wether a similar compression to that of JPEG but with less degradation should be used. (webp:emulate-jpeg-size).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.Exact">
            <summary>
            Gets or sets a value indicating wether RGB values should be preserved in transparent area. It's disabled by default to help compressibility.
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.FilterSharpness">
            <summary>
            Gets or sets strength of the filter sharpness, between 0 and 7 (least sharp) (webp:filter-sharpness).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.FilterStrength">
            <summary>
            Gets or sets strength of the deblocking filter, between 0 (no filtering) and 100 (maximum filtering). A value of 0 turns off any filtering. Higher values increase the strength of the filtering process applied after decoding the image. The higher the value, the smoother the image appears. Typical values are usually in the range of 20 to 50 (webp:filter-strength).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.FilterType">
            <summary>
            Gets or sets the filter type. (webp:filter-type).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.ImageHint">
            <summary>
            Gets or sets the hint about the image type. (webp:image-hint).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.Lossless">
            <summary>
            Gets or sets a value indicating wether the image should be encoded without any loss (webp:lossless).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.LowMemory">
            <summary>
            Gets or sets a value indicating wether the memory usage should be reduced (webp:low-memory).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.Method">
            <summary>
            Gets or sets the compression method to use. It controls the trade off between encoding speed and the compressed file size and quality. Possible values range from 0 to 6. Default value is 4. When higher values are utilized, the encoder spends more time inspecting additional encoding possibilities and decide on the quality gain. Lower value might result in faster processing time at the expense of larger file size and lower compression quality (webp:method).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.NearLossless">
            <summary>
            Gets or sets the near lossless encoding, between 0 (max-loss) and 100 (off) (webp:near-lossless).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.PartitionLimit">
            <summary>
            Gets or sets the partition limit. Choose 0 for no quality degradation and 100 for maximum degradation (webp:partition-limit).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.Partitions">
            <summary>
            Gets or sets progressive decoding: choose 0 to 3 (webp:partitions).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.Pass">
            <summary>
            Gets or sets the maximum number of passes to target compression size or PSNR (webp:pass).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.Preprocessing">
            <summary>
            Gets or sets the preprocessing filter (webp:preprocessing).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.Segment">
            <summary>
            Gets or sets  the maximum number of segments to use, choose from 1 to 4 (webp:segment).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.ShowCompressed">
            <summary>
            Gets or sets a value indicating wether the compressed picture should be exported back (webp:show-compressed).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.SnsStrength">
            <summary>
            Gets or sets he amplitude of the spatial noise shaping. Spatial noise shaping (SNS) refers to a general collection of built-in algorithms used to decide which area of the picture should use relatively less bits, and where else to better transfer these bits. The possible range goes from 0 (algorithm is off) to 100 (the maximal effect). The default value is 80 (webp:sns-strength).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.TargetPsnr">
            <summary>
            Gets or sets the desired minimal distortion (webp:target-psnr).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.TargetSize">
            <summary>
            Gets or sets the target size (in bytes) to try and reach for the compressed output. The compressor makes several passes of partial encoding in order to get as close as possible to this target. (webp:target-size).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.ThreadLevel">
            <summary>
            Gets or sets a value indicating wether multi-threaded encoding should be enabled (webp:thread-level).
            </summary>
        </member>
        <member name="P:Api.Uploader.WebpConfig.UseSharpYuv">
            <summary>
            Gets or sets a value indicating wether sharp (and slow) RGB->YUV conversion should be used. (webp:use-sharp-yuv).
            </summary>
        </member>
        <member name="T:Api.Uploader.MediaRef">
            <summary>
            List of changes when replacing media refs 
            </summary>
        </member>
        <member name="P:Api.Uploader.MediaRef.Type">
            <summary>
            The file type
            </summary>
        </member>
        <member name="P:Api.Uploader.MediaRef.Id">
            <summary>
            The ID of the upload.
            </summary>
        </member>
        <member name="P:Api.Uploader.MediaRef.Name">
            <summary>
            The name of the ref
            </summary>
        </member>
        <member name="P:Api.Uploader.MediaRef.Description">
            <summary>
            The description of the ref
            </summary>
        </member>
        <member name="P:Api.Uploader.MediaRef.Field">
            <summary>
            Name of the underlying field this ref is in, if any
            </summary>
        </member>
        <member name="P:Api.Uploader.MediaRef.Url">
            <summary>
            The target URL
            </summary>
        </member>
        <member name="P:Api.Uploader.MediaRef.ExistingRef">
            <summary>
            The existing ref which is being replaced/updated
            </summary>
        </member>
        <member name="P:Api.Uploader.MediaRef.UpdatedRef">
            <summary>
            The new ref
            </summary>
        </member>
        <member name="P:Api.Uploader.MediaRef.Status">
            <summary>
            The status of potential/actiual update
            </summary>
        </member>
        <member name="P:Api.Uploader.MediaRef.LocaleId">
            <summary>
            The locale being used 
            </summary>
        </member>
        <member name="T:Api.Uploader.MimeTypeMap">
            <summary>
            Class MimeTypeMap.
            </summary>
        </member>
        <member name="M:Api.Uploader.MimeTypeMap.TryGetMimeType(System.String,System.String@)">
            <summary>
            Tries to get the type of the MIME from the provided string.
            </summary>
            <param name="str">The filename or extension.</param>
            <param name="mimeType">The variable to store the MIME type.</param>
            <returns>The MIME type.</returns>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Api.Uploader.MimeTypeMap.GetMimeType(System.String)">
            <summary>
            Gets the type of the MIME from the provided string.
            </summary>
            <param name="str">The filename or extension.</param>
            <returns>The MIME type.</returns>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Api.Uploader.MimeTypeMap.GetExtension(System.String,System.Boolean)">
            <summary>
            Gets the extension from the provided MINE type.
            </summary>
            <param name="mimeType">Type of the MIME.</param>
            <param name="throwErrorIfNotFound">if set to <c>true</c>, throws error if extension's not found.</param>
            <returns>The extension.</returns>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentException" />
        </member>
        <member name="T:Api.Uploader.Permissions">
            <summary>
            Instances capabilities during the very earliest phases of startup.
            </summary>
        </member>
        <member name="M:Api.Uploader.Permissions.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="T:Api.Uploader.SignedRef128ValueGenerator`2">
            <summary>
            A virtual field value generator for a field called "signedRef128".
            You can include this field on an upload and it will generate the signed ref for you - typically a signed URL on a CDN - for the size "128" base file. 
            Automatically instanced and the include field name is derived from the class name by the includes system. See VirtualFieldValueGenerator for more info.
            </summary>
        </member>
        <member name="M:Api.Uploader.SignedRef128ValueGenerator`2.GetValue(Api.Contexts.Context,`0,Api.SocketServerLibrary.Writer)">
            <summary>
            Generate the value.
            </summary>
            <param name="context"></param>
            <param name="forObject"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.SignedRef128ValueGenerator`2.GetOutputType">
            <summary>
            The type, if any, associated with the value being outputted.
            For example, if GetValue outputs only strings, this is typeof(string).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Uploader.SignedRef256ValueGenerator`2">
            <summary>
            A virtual field value generator for a field called "signedRef256".
            You can include this field on an upload and it will generate the signed ref for you - typically a signed URL on a CDN - for the size "256" base file. 
            Automatically instanced and the include field name is derived from the class name by the includes system. See VirtualFieldValueGenerator for more info.
            </summary>
        </member>
        <member name="M:Api.Uploader.SignedRef256ValueGenerator`2.GetValue(Api.Contexts.Context,`0,Api.SocketServerLibrary.Writer)">
            <summary>
            Generate the value.
            </summary>
            <param name="context"></param>
            <param name="forObject"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.SignedRef256ValueGenerator`2.GetOutputType">
            <summary>
            The type, if any, associated with the value being outputted.
            For example, if GetValue outputs only strings, this is typeof(string).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Uploader.SignedRefOriginalValueGenerator`2">
            <summary>
            A virtual field value generator for a field called "signedRefOriginal".
            You can include this field on an upload and it will generate the signed ref for you - typically a signed URL on a CDN - for the size "original" base file. 
            Automatically instanced and the include field name is derived from the class name by the includes system. See VirtualFieldValueGenerator for more info.
            </summary>
        </member>
        <member name="M:Api.Uploader.SignedRefOriginalValueGenerator`2.GetValue(Api.Contexts.Context,`0,Api.SocketServerLibrary.Writer)">
            <summary>
            Generate the value.
            </summary>
            <param name="context"></param>
            <param name="forObject"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.SignedRefOriginalValueGenerator`2.GetOutputType">
            <summary>
            The type, if any, associated with the value being outputted.
            For example, if GetValue outputs only strings, this is typeof(string).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Uploader.FileRef">
            <summary>
            A parsed fileref.
            </summary>
        </member>
        <member name="M:Api.Uploader.FileRef.Parse(System.String)">
            <summary>
            Parses general meta out of a textual ref.
            </summary>
            <param name="refText"></param>
            <returns></returns>
        </member>
        <member name="F:Api.Uploader.FileRef.Scheme">
            <summary>
            The ref's scheme.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileRef.FileType">
            <summary>
            The filetype of the ref, if there is one.
            </summary>
        </member>
        <member name="F:Api.Uploader.FileRef.File">
            <summary>
            The filename parts. Required. Excludes type.
            </summary>
        </member>
        <member name="M:Api.Uploader.FileRef.ToString">
            <summary>
            Outputs the textual ref.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.FileRef.GetFilePath(System.String)">
            <summary>
            Gets the file path of this ref. Null if it is not a file ref.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.FileRef.GetRelativePath(System.String,System.Boolean)">
            <summary>
            Relative path of this ref.
            </summary>
            <param name="sizeName"></param>
            <param name="omitExt"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Uploader.UploadController">
            <summary>
            Handles file upload endpoints.
            </summary>
        </member>
        <member name="M:Api.Uploader.UploadController.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="M:Api.Uploader.UploadController.Upload(Api.Uploader.FileUploadBody)">
            <summary>
            Upload a file.
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadController.Upload">
            <summary>
            Upload a file with efficient support for huge ones.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadController.TranscodedTar(System.UInt32,System.String)">
            <summary>
            Uploads a transcoded file. The body of the client request is expected to be a tar of the files, using a directory called "output" at its root.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadController.Active(System.String)">
            <summary>
            List any active media items
            </summary>
        </member>
        <member name="M:Api.Uploader.UploadController.ActivePost(System.String)">
            <summary>
            List any active media refs
            </summary>
        </member>
        <member name="M:Api.Uploader.UploadController.FileConsistency(System.String,System.String)">
            <summary>
            Performs a file consistency check, where it will make sure each identified ref file matches the current upload policy.
            In the future this will also add any missing database entries.
            </summary>
            <param name="regenBefore">An ISO date string in UTC. Regenerate files if they are before the specified date.</param>
            <param name="idRange">Of the form "1-500" inclusive. Will skip any files with an upload ID out of this range if specified. Can be used for bulk task delegation amongst a group of machines. Use blank values for "anything after" ("100-") and "anything before" ("-100").</param>
        </member>
        <member name="M:Api.Uploader.UploadController.Replace(System.String,System.String)">
            <summary>
            Replace any existing refs with new ones
            </summary>
        </member>
        <member name="M:Api.Uploader.UploadController.UpdateAlts">
            <summary>
            Update alt names based on image data
            </summary>
        </member>
        <member name="M:Api.Uploader.UploadController.UpdateRefs(System.Boolean)">
            <summary>
            Upgrade refs such that any ref fields hold the latest version of a specified ref.
            </summary>
        </member>
        <member name="M:Api.Uploader.UploadController.Preview(System.String)">
            <summary>
            Preview any media refs changes 
            </summary>
        </member>
        <member name="T:Api.Uploader.UploaderConfig">
            <summary>
            Configuration settings relating to file uploads and image processing.
            </summary>
        </member>
        <member name="P:Api.Uploader.UploaderConfig.ImageSizes">
            <summary>
            When an image is uploaded, it'll be automatically resized to each of these sizes.
            </summary>
        </member>
        <member name="P:Api.Uploader.UploaderConfig.ImageCrops">
            <summary>
            When an image is uploaded, it'll be automatically resized to the exact height and width defined in this list.
            This isn't necessarily the same aspect ratio as the original image, so cropping can occur.
            It is recommended to set a focal point prior to resizing, as this will be used to inform how the cropped image is produced.
            Note that sizes are defined in [height]x[width] format (e.g. "177x118"), with an optional zoom level (e.g. "1024x768@3x")
            </summary>
        </member>
        <member name="P:Api.Uploader.UploaderConfig.ProcessImages">
            <summary>
            True if image uploads should be processed.
            </summary>
        </member>
        <member name="P:Api.Uploader.UploaderConfig.TranscodeToWebP">
            <summary>
            True if all image uploads should be transcoded to webp, unless they were webp already.
            If it's already a web friendly format like png or jpg, the original will be resized as well.
            </summary>
        </member>
        <member name="P:Api.Uploader.UploaderConfig.WebPConfig">
            <summary>
            Config for webp transcoding.
            </summary>
        </member>
        <member name="P:Api.Uploader.UploaderConfig.GenerateBlurhash">
            <summary>
            When an image is uploaded, this will generate a blurhash for it which gets stored in the upload data and the ref.
            </summary>
        </member>
        <member name="P:Api.Uploader.UploaderConfig.Subdirectory">
            <summary>
            Uploader subdirectory (optional)
            </summary>
        </member>
        <member name="P:Api.Uploader.UploaderConfig.TrackRefUsage">
            <summary>
            Track ref usage.
            </summary>
        </member>
        <member name="T:Api.Uploader.UploadRefGenerator">
            <summary>
            A generator used to produce a ref for an upload.
            </summary>
        </member>
        <member name="M:Api.Uploader.UploadRefGenerator.GetSignedRef(Api.Uploader.Upload,System.String)">
            <summary>
            Gets a signed ref (typically a URL) for the given upload.
            </summary>
        </member>
        <member name="T:Api.Uploader.UploadService">
            <summary>
            Handles uploading of files related to particular pieces of content.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="F:Api.Uploader.UploadService.RefGenerator">
            <summary>
            Used to generate refs (typically a URL) for given uploads.
            It's a generic object such that other modules can hook in to it 
            but without creating the async requirement of an event. This is because 
            generated refs are frequently used by both properties and dynamic includes. 
            </summary>
        </member>
        <member name="M:Api.Uploader.UploadService.#ctor">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Uploader.UploadService.UpdateAltNames(Api.Contexts.Context)">
            <summary>
            Extract alt names from image file data
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Api.Uploader.UploadService.UpdateImageUsage(Api.Contexts.Context)">
            <summary>
            Update all the image counts
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Api.Uploader.UploadService.ConfigureWriter(ImageMagick.MagickImage)">
            <summary>
            Gets the writer for the given image.
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.ProcessImage(Api.Contexts.Context,Api.Uploader.Upload,System.Collections.Generic.List{Api.Uploader.FileConsistencyInfo})">
            <summary>
            Creates resized and transcoded versions of images for the given upload.
            </summary>
            <param name="context"></param>
            <param name="upload"></param>
            <param name="existingFiles">If a target file is listed in existingFiles, it will be skipped.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.HasVariationInSet(System.Collections.Generic.List{Api.Uploader.FileConsistencyInfo},System.String,System.String)">
            <summary>
            True if the given variant + filetype is in the given set of files.
            </summary>
            <param name="existingFiles"></param>
            <param name="variant"></param>
            <param name="fileType"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.ReadFile(Api.Uploader.Upload,System.String)">
            <summary>
            Gets the file bytes of the given ref, if it is a file ref. Supports remote filesystems as well.
            </summary>
            <param name="upload"></param>
            <param name="sizeName"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.ReadFile(Api.Uploader.Upload,System.String,System.Int64,System.Int32)">
            <summary>
            Gets a range of file bytes of the given ref, if it is a file ref. Supports remote filesystems as well.
            </summary>
            <param name="upload"></param>
            <param name="sizeName"></param>
            <param name="offset"></param>
            <param name="byteCount"></param>
            <returns></returns>
        </member>
        <member name="F:Api.Uploader.UploadService._resizeGroups">
            <summary>
            To make image resizing as efficient as possible without repeatedly reloading the source into memory
            a set of "resize groups" are made. These are based on the sizes in the configuration
            and are sorted into multiples. For example, powers of 2 are grouped together.
            Using default config, 2 groups exist: 2048, 1024, 512, .. 32 is one, and 200, 100 is the other.
            </summary>
        </member>
        <member name="M:Api.Uploader.UploadService.ReadFile(System.String,System.String)">
            <summary>
            Gets the file bytes of the given ref, if it is a file ref. Supports remote filesystems as well.
            </summary>
            <param name="fileRef"></param>
            <param name="sizeName"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.ListFiles(System.Boolean,System.String,System.Func{Api.Uploader.FileMetaStream,System.Threading.Tasks.ValueTask},System.Boolean)">
            <summary>
            Lists files in the given path, which can be blank to list everything. Supports remote filesystems as well.
            </summary>
            <param name="isPrivate">True if listing in the private area.</param>
            <param name="relativePath">Path relative to the public/private area.</param>
            <param name="onFileListed"></param>
            <param name="retainAll">True if files should be added to a List inside the returned object. onFileListed will still be raised. Use this to sort all the files.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.ReadFile(Api.Uploader.FileRef,System.String)">
            <summary>
            Gets the file bytes of the given ref, if it is a file ref. Supports remote filesystems as well.
            </summary>
            <param name="fileRef"></param>
            <param name="sizeName"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.OpenFile(System.String,System.String)">
            <summary>
            Gets the file bytes of the given ref, if it is a file ref. Supports remote filesystems as well.
            </summary>
            <param name="fileRef"></param>
            <param name="sizeName"></param>
            <returns>Null if the file was not found.</returns>
        </member>
        <member name="M:Api.Uploader.UploadService.OpenFile(Api.Uploader.FileRef,System.String)">
            <summary>
            Opens a stream for the given file ref. Supports large files in remote filesystems. Release the stream when you are done.
            </summary>
            <param name="fileRef"></param>
            <param name="sizeName"></param>
            <returns>Null if the file was not found.</returns>
        </member>
        <member name="M:Api.Uploader.UploadService.GetFileBytesForStoragePath(System.String,System.Boolean)">
            <summary>
            Gets the file bytes for a given storage path. Usually use ReadFile with a ref or an Upload instead.
            </summary>
            <param name="storagePath"></param>
            <param name="isPrivate">True if this is in the private storage area.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.GetFileBytesForStoragePath(Api.Uploader.FilePartLocator)">
            <summary>
            Gets the file bytes for a given storage path. Usually use ReadFile with a ref or an Upload instead.
            </summary>
            <param name="locator">Locates all or part of a file.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.GetFileStreamForStoragePath(System.String,System.Boolean)">
            <summary>
            Gets the file stream for a given storage path. Usually use OpenFile with a ref or an Upload instead.
            </summary>
            <param name="storagePath"></param>
            <param name="isPrivate">True if this is in the private storage area.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.ExtractTarToStorage(Api.Contexts.Context,System.UInt32,System.String,System.IO.Stream)">
            <summary>
            Extracts a tar to storage.
            </summary>
            <param name="context"></param>
            <param name="uploadId"></param>
            <param name="targetDirectory"></param>
            <param name="tarStream"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.DeleteFile(Api.Contexts.Context,System.String,System.Boolean)">
            <summary>
            Deletes an uploaded file. Returns true if it succeeded.
            </summary>
            <param name="context"></param>
            <param name="path"></param>
            <param name="isPrivate"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.GetSignedRef(Api.Uploader.Upload,System.String)">
            <summary>
            Gets a signed ref (usually going to be a URL) for the given size name.
            </summary>
            <param name="upload"></param>
            <param name="sizeName"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.BuildRef(Api.Uploader.Upload)">
            <summary>
            Builds a general use ref for the given upload. 
            If it is a private upload, it will be a signed private ref. 
            </summary>
            <param name="upload"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.GetTranscodeToken(System.UInt32)">
            <summary>
            Gets a transcode token for the given upload ID. It lasts 24h.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.FileConsistency(Api.Contexts.Context,System.Nullable{System.DateTime},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Checks each file in the file system if it matches the current upload policy.
            Future: Also will update the DB with missing entries and replace refs if e.g. webp just became available for a particular file.
            As you can therefore guess, this is very slow!
            </summary>
            <param name="context"></param>
            <param name="regenerateIfBefore">If set, any non-original files created before the specified UTC date will be regenerated.</param>
            <param name="minId">If set, IDs below this number will be ignored.</param>
            <param name="maxId">If set, IDs above this number will be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.IsValidTranscodeToken(System.UInt32,System.String)">
            <summary>
            True if the given transcode token is a valid one.
            </summary>
            <param name="id"></param>
            <param name="tokenStr"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.Get(Api.Contexts.Context,System.String)">
            <summary>
            Gets an upload by its ref.
            </summary>
            <param name="context"></param>
            <param name="uploadRef"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.Resize(ImageMagick.MagickImage,System.Int32)">
            <summary>
            Resizes the given image such that it becomes the given width. Retains the aspect ratio and performs no cropping.
            </summary>
            <param name="current"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Uploader.UploadService.ResizeWithFocalPoint(ImageMagick.MagickImage,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes the given image to the given dimensions. Does not retain the aspect ratio and performs cropping where necessary.
            mimics a command line similar to:
            convert input.jpg -resize [width]x[height]^ -extent [width]x[height]+[offsetX]+[offsetY] output.jpg
            </summary>
            <param name="current"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="focalX"></param>
            <param name="focalY"></param>
        </member>
        <member name="M:Api.Uploader.UploadService.IsSupportedImage(System.String)">
            <summary>
            True if the filetype is a supported image file.
            </summary>
            <param name="fileType">The filetype.</param>
            <returns>The target file type to transcode it to. Null if it is not supported.</returns>
        </member>
        <member name="M:Api.Uploader.UploadService.WebFriendlyFormat(ImageMagick.MagickFormat)">
            <summary>
            True if the given magick format is web friendly.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="F:Api.Uploader.UploadService.ExifOrientationTagId">
            <summary>
            Orientation tag
            </summary>
        </member>
        <member name="M:Api.Uploader.UploadService.NormalizeOrientation(ImageMagick.MagickImage)">
            <summary>
            Strips orientation exif data.
            </summary>
        </member>
        <member name="P:Api.Uploader.UploadService.AutoSubdirectoryName">
            <summary>
            Automatically generated content subdirectory name.
            </summary>
        </member>
        <member name="M:Api.Uploader.UploadService.Create(Api.Contexts.Context,System.String,System.String,System.Int32[],System.Boolean)">
            <summary>
            Writes an uploaded file into the content folder.
            </summary>
            <param name="context"></param>
            <param name="fileName">The contents of the file. The name is used to get the filetype.</param>
            <param name="tempFilePath">The contents of the file.</param>
            <param name="privateUpload">True if this is a private upload.</param>
            <param name="sizes">The list of sizes, in pixels, to use if it's an image. These are width values. Optional.</param>
            <returns>Throws exceptions if it failed. Otherwise, returns the information about the file.</returns>
        </member>
        <member name="T:Api.Uploader.ImageResizeGroup">
            <summary>
            A group of image sizes which can be quickly interpolated with no quality loss.
            </summary>
        </member>
        <member name="F:Api.Uploader.ImageResizeGroup.Sizes">
            <summary>
            Sizes in this group in descending order.
            </summary>
        </member>
        <member name="M:Api.Uploader.ImageResizeGroup.#ctor(System.Int32)">
            <summary>
            Creates a group with the given size in it as the largest one in the group (first).
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Api.Uploader.ImageResizeGroup.TryAdd(System.Int32)">
            <summary>
            Try adding the given size. True if it was successful.
            A successful add happens when the given size is a multiple of the latest.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Uploader.SupportedImageFormat">
            <summary>
            A supported image format.
            </summary>
        </member>
        <member name="F:Api.Uploader.SupportedImageFormat.Format">
            <summary>
            Original format.
            </summary>
        </member>
        <member name="F:Api.Uploader.SupportedImageFormat.TranscodeTo">
            <summary>
            Transcode this format to the given one.
            </summary>
        </member>
        <member name="T:Api.Uploader.FilePartLocator">
            <summary>
            Locates a segment of a file (or the whole thing) during file reads.
            </summary>
        </member>
        <member name="F:Api.Uploader.FilePartLocator.Path">
            <summary>
            File variant.
            </summary>
        </member>
        <member name="F:Api.Uploader.FilePartLocator.IsPrivate">
            <summary>
            True if it is private.
            </summary>
        </member>
        <member name="F:Api.Uploader.FilePartLocator.Offset">
            <summary>
            Offset in the file to start from.
            </summary>
        </member>
        <member name="F:Api.Uploader.FilePartLocator.Size">
            <summary>
            Number of bytes to obtain.
            </summary>
        </member>
        <member name="T:Api.Uploader.ManifestLineType">
            <summary>
            Info about the following line.
            </summary>
        </member>
        <member name="F:Api.Uploader.ManifestLineType.File">
            <summary>
            The main file itself.
            </summary>
        </member>
        <member name="F:Api.Uploader.ManifestLineType.Chunk">
            <summary>
            A particular video chunk.
            </summary>
        </member>
        <member name="F:Api.Uploader.ManifestLineType.Manifest">
            <summary>
            A substream manifest.
            </summary>
        </member>
        <member name="T:Api.Uploader.VideoManifest">
            <summary>
            An m3u8 parser and reconstruction system.
            </summary>
        </member>
        <member name="F:Api.Uploader.VideoManifest.Metadata">
            <summary>
            The header of the manifest. These are all the # lines which are before a chunk or stream.
            </summary>
        </member>
        <member name="F:Api.Uploader.VideoManifest.Substreams">
            <summary>
            Sub manifest files, identified by EXT-X-STREAM-INF
            </summary>
        </member>
        <member name="F:Api.Uploader.VideoManifest.Chunks">
            <summary>
            List of chunks in the manifest.
            </summary>
        </member>
        <member name="F:Api.Uploader.VideoManifest.Complete">
            <summary>
            True if the complete chunk list is known (and this file isn't expected to be streaming from source right now).
            </summary>
        </member>
        <member name="M:Api.Uploader.VideoManifest.#ctor(System.Byte[],System.String,System.Nullable{System.DateTime})">
            <summary>
            Creates a new manifest, parsing it from the given content file.
            </summary>
            <param name="fileContent"></param>
            <param name="absolutePath">The URL of this manifest file, minus its name.</param>
            <param name="startTimeUtc">If provided, Will adjust it into being a live manifest served by the API.</param>
        </member>
        <member name="M:Api.Uploader.VideoManifest.WriteTo(System.IO.Stream)">
            <summary>
            Writes this manifest to the given stream, using a cached byte block as frequently as it can.
            </summary>
            <param name="outputStream"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Uploader.ManifestInfo">
            <summary>
            A particular chunk of a manifest.
            </summary>
        </member>
        <member name="F:Api.Uploader.ManifestInfo.MetaLines">
            <summary>
            The raw # metadata lines.
            </summary>
        </member>
        <member name="F:Api.Uploader.ManifestInfo.LengthInSeconds">
            <summary>
            Chunk runtime if EXTINF is present.
            </summary>
        </member>
        <member name="F:Api.Uploader.ManifestInfo.Url">
            <summary>
            The chunk/ substream URL.
            </summary>
        </member>
        <member name="F:Api.Uploader.ManifestInfo.OriginalUrl">
            <summary>
            The chunk/ substream URL, as it was in the file.
            </summary>
        </member>
        <member name="M:Api.Uploader.ManifestInfo.AddMeta(System.String)">
            <summary>
            Adds a MetaLine including the hash and excluding the newline itself.
            </summary>
            <param name="line"></param>
        </member>
        <member name="F:Api.Uploader.ManifestInfo._metaAndUrl">
            <summary>
            The meta as its raw byte array.
            </summary>
        </member>
        <member name="M:Api.Uploader.ManifestInfo.WriteTo(System.IO.MemoryStream)">
            <summary>
            Writes the meta for this info to the given stream.
            </summary>
            <param name="ms"></param>
        </member>
        <member name="T:Api.CloudHosts.CloudHostConfig">
            <summary>
            The configuration for cloud services.
            </summary>
        </member>
        <member name="P:Api.CloudHosts.CloudHostConfig.DigitalOcean">
            <summary>
            Config for digitalOcean.
            </summary>
        </member>
        <member name="P:Api.CloudHosts.CloudHostConfig.AWS">
            <summary>
            Config for AWS.
            </summary>
        </member>
        <member name="P:Api.CloudHosts.CloudHostConfig.Azure">
            <summary>
            Config for MS Azure.
            </summary>
        </member>
        <member name="T:Api.CloudHosts.CloudHostPlatform">
            <summary>
            Host platform.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.CloudHostPlatform.configuredState">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.CloudHosts.CloudHostPlatform.SetConfigured(System.String)">
            <summary>
            Sets the given service as configured.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Api.CloudHosts.CloudHostPlatform.GetContentUrl">
            <summary>
            The URL for the upload host (excluding /content/) if this host platform is providing file services.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.CloudHostPlatform.GetSignedRef(Api.Uploader.Upload,System.String)">
            <summary>
            Gets a signed URL for the given private upload.
            </summary>
            <param name="upload"></param>
            <param name="sizeName"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.CloudHostPlatform.ListFiles(Api.Uploader.FileMetaStream)">
            <summary>
            Lists files from the storage area into the given file meta stream.
            The source can cancel the request via cancelling the meta stream.
            </summary>
            <param name="metaStream"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.CloudHostPlatform.HasService(System.String)">
            <summary>
            True if this host platform has the given service type configured. Key is e.g. "upload".
            </summary>
        </member>
        <member name="M:Api.CloudHosts.CloudHostPlatform.ReadFile(Api.Uploader.FilePartLocator)">
            <summary>
            Reads a files bytes from the remote host.
            </summary>
            <param name="locator">Describes info about a file including its relative path and if it is private or not.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Api.CloudHosts.CloudHostPlatform.Upload(Api.Contexts.Context,Api.Uploader.Upload,System.String,System.String)">
            <summary>
            Runs when uploading a file.
            </summary>
            <param name="context"></param>
            <param name="upload"></param>
            <param name="tempFile"></param>
            <param name="variantName"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.CloudHostPlatform.Delete(Api.Contexts.Context,Api.Uploader.FileDelete)">
            <summary>
            Runs when deleting a file.
            </summary>
            <param name="context"></param>
            <param name="fDel"></param>
            <returns></returns>
        </member>
        <member name="T:Api.CloudHosts.CloudHostService">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.CloudHostService.#ctor(Api.Uploader.UploadService)">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.CloudHostService._uploadHost">
            <summary>
            The host to direct uploads to, if any.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.CloudHostService.SelectConfiguredHost">
            <summary>
            Updates the preferred host based on what is actually configured.
            </summary>
        </member>
        <member name="T:Api.CloudHosts.DomainCertificateChallenge">
            <summary>
            A DomainCertificateChallenge
            </summary>
        </member>
        <member name="F:Api.CloudHosts.DomainCertificateChallenge.VerificationValue">
            <summary>
            The value to return when a request for the token arrives.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.DomainCertificateChallenge.Token">
            <summary>
            The token.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.DomainCertificateChallenge.DomainCertificateId">
            <summary>
            The request which this challenge spawned from.
            </summary>
        </member>
        <member name="T:Api.CloudHosts.DomainCertificateChallengeController">
            <summary>Handles domainCertificateChallenge endpoints.</summary>
        </member>
        <member name="M:Api.CloudHosts.DomainCertificateChallengeController.CatchAll(System.String)">
            <summary>
            Handles all token requests.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.CloudHosts.DomainCertificateChallengeService">
            <summary>
            Handles domainCertificateChallenges.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.DomainCertificateChallengeService.#ctor">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="T:Api.CloudHosts.DomainChallengePermissions">
            <summary>
            Instances capabilities during the very earliest phases of startup.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.DomainChallengePermissions.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="T:Api.CloudHosts.DomainCertificate">
            <summary>
            A DomainCertificate
            </summary>
        </member>
        <member name="F:Api.CloudHosts.DomainCertificate.Domain">
            <summary>
            The domain that has been requested.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.DomainCertificate.Ready">
            <summary>
            True if the certificate is ready. Status is also 1.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.DomainCertificate.FileKey">
            <summary>
            A random file key to avoid ID collisions in the filesystem.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.DomainCertificate.ExpiryUtc">
            <summary>
            Expiry time (UTC) of this certificate.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.DomainCertificate.ServerId">
            <summary>
            The serverId of the server in a cluster which created this request.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.DomainCertificate.OrderUrl">
            <summary>
            Let's encrypt order URL for debugging the status.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.DomainCertificate.Status">
            <summary>
            0=Not yet started, 1=Completed (may have failed), 2=Requesting, 3=Ordered, 4=Waiting for verification
            </summary>
        </member>
        <member name="F:Api.CloudHosts.DomainCertificate.LastPingUtc">
            <summary>
            Clustered servers can be all waiting for a singular request.
            This informs the cluster that the server being waited on is still here.
            </summary>
        </member>
        <member name="T:Api.CloudHosts.DomainCertificateController">
            <summary>Handles domainCertificate endpoints.</summary>
        </member>
        <member name="T:Api.CloudHosts.DomainCertificateService">
            <summary>
            Handles domainCertificates.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.DomainCertificateService.#ctor(Api.ContentSync.ContentSyncService,Api.Uploader.UploadService,Api.CloudHosts.DomainCertificateChallengeService)">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.DomainCertificateService.GetLatestCertificates">
            <summary>
            Returns the latest set of certificate information. Returns null if it hasn't happened yet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.DomainCertificateService.UpdateValidSet(Api.Contexts.Context)">
            <summary>
            Gets the valid set of certificates for all this sites applied domains.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.DomainCertificateService.RequireCertificate(Api.Contexts.Context,System.String,System.String)">
            <summary>
            Requests a certificate for http validation. 
            If another server has requested a certificate then this request will instead go in to a holding pattern waiting for it.
            </summary>
            <param name="context"></param>
            <param name="domain"></param>
            <param name="contactEmail"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.DomainCertificateService.GetCertificate(Api.Contexts.Context,System.String,System.String)">
            <summary>
            Requests a certificate for http validation. 
            If another server has requested a certificate then this request will instead go in to a holding pattern waiting for it.
            </summary>
            <param name="context"></param>
            <param name="domain"></param>
            <param name="contactEmail"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.DomainCertificateService.ReadCertificate(Api.CloudHosts.DomainCertificate)">
            <summary>
            Reads a cert from the (usually remote) filesystem.
            </summary>
            <param name="cert"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.DomainCertificateService.GetAccount(Api.Contexts.Context,LetsEncrypt.Client.AcmeClient,System.String)">
            <summary>
            Gets an account from private storage or creates one.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.CloudHosts.DomainCertificatePermissions">
            <summary>
            Instances capabilities during the very earliest phases of startup.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.DomainCertificatePermissions.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="T:Api.CloudHosts.ServiceCertificate">
            <summary>
            A certificate which can be used by the webserver.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.ServiceCertificate.FullchainPem">
            <summary>
            Raw textual fullchain (PEM format, compatible with most things such as NGINX).
            </summary>
        </member>
        <member name="F:Api.CloudHosts.ServiceCertificate.PrivateKeyPem">
            <summary>
            Raw textual private key (PEM format, compatible with most things such as NGINX).
            </summary>
        </member>
        <member name="F:Api.CloudHosts.ServiceCertificate.ExpiryUtc">
            <summary>
            This certs expiry.
            </summary>
        </member>
        <member name="T:Api.CloudHosts.AwsConfig">
            <summary>
            AWS config.
            </summary>
        </member>
        <member name="P:Api.CloudHosts.AwsConfig.S3ServiceUrl">
            <summary>
            The S3 service URL used to declare the region, e.g. s3.eu-west-2.amazonaws.com
            </summary>
        </member>
        <member name="P:Api.CloudHosts.AwsConfig.S3AccessKey">
            <summary>
            S3 access key.
            </summary>
        </member>
        <member name="P:Api.CloudHosts.AwsConfig.S3AccessSecret">
            <summary>
            S3 access secret.
            </summary>
        </member>
        <member name="P:Api.CloudHosts.AwsConfig.S3BucketName">
            <summary>
            S3 bucket name.
            </summary>
        </member>
        <member name="P:Api.CloudHosts.AwsConfig.DisplayPdfInline">
            <summary>
            If true, add content-disposition header as inline to pdf files
            </summary>
        </member>
        <member name="P:Api.CloudHosts.AwsConfig.CustomCdnUrl">
            <summary>
            Custom URL for the CDN. Of the form https://www.example.com (starts with https, does not end with a fwd slash).
            </summary>
        </member>
        <member name="P:Api.CloudHosts.AwsConfig.LockedDownAccess">
            <summary>
            Is the s3 bucket locked down for public access and needs to use S3CannedACL.BucketOwnerFullControl
            </summary>
        </member>
        <member name="T:Api.CloudHosts.AwsHost">
            <summary>
            A representation of AWS.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.AwsHost.#ctor(Api.CloudHosts.CloudHostService,Api.CloudHosts.AwsConfig)">
            <summary>
            Creates a new AWS host, shared by all requests.
            </summary>
            <param name="chs"></param>
            <param name="config"></param>
        </member>
        <member name="M:Api.CloudHosts.AwsHost.GetSignedRef(Api.Uploader.Upload,System.String)">
            <summary>
            Gets a signed URL for the given private upload.
            </summary>
            <param name="upload"></param>
            <param name="sizeName"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.AwsHost.GetContentUrl">
            <summary>
            The URL for the upload host (excluding any paths) if this host platform is providing file services.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.AwsHost.ListFiles(Api.Uploader.FileMetaStream)">
            <summary>
            Lists files from the storage area into the given file meta stream.
            The source can cancel the request via cancelling the meta stream.
            </summary>
            <param name="metaStream"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.AwsHost.ReadFile(Api.Uploader.FilePartLocator)">
            <summary>
            Reads a files bytes from the remote host.
            </summary>
            <param name="locator">Used to locate all or part of a file</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Api.CloudHosts.AwsHost.Delete(Api.Contexts.Context,Api.Uploader.FileDelete)">
            <summary>
            Runs when deleting a file.
            </summary>
            <param name="context"></param>
            <param name="fDel"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.AwsHost.Upload(Api.Contexts.Context,Api.Uploader.Upload,System.String,System.String)">
            <summary>
            Runs when uploading a file.
            </summary>
            <param name="context"></param>
            <param name="upload"></param>
            <param name="tempFile"></param>
            <param name="variantName"></param>
            <returns></returns>
        </member>
        <member name="T:Api.CloudHosts.AzureConfig">
            <summary>
            Azure config.
            </summary>
        </member>
        <member name="P:Api.CloudHosts.AzureConfig.StorageConnectionString">
            <summary>
            The connection string for Azure blob storage. Containers called "content" and "content-private" will be created inside this if they don't already exist.
            </summary>
        </member>
        <member name="P:Api.CloudHosts.AzureConfig.DisplayPdfInline">
            <summary>
            If true, add content-disposition header as inline to pdf files
            </summary>
        </member>
        <member name="P:Api.CloudHosts.AzureConfig.LocalProxy">
            <summary>
            True if the files should be proxied via the NGINX API.
            </summary>
        </member>
        <member name="T:Api.CloudHosts.AzureHost">
            <summary>
            A representation of Azure.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.AzureHost.#ctor(Api.CloudHosts.CloudHostService,Api.CloudHosts.AzureConfig)">
            <summary>
            Creates a new Azure host, shared by all requests.
            </summary>
            <param name="chs"></param>
            <param name="config"></param>
        </member>
        <member name="M:Api.CloudHosts.AzureHost.GetContentUrl">
            <summary>
            The URL for the upload host (excluding any paths) if this host platform is providing file services.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.AzureHost.ReadFile(Api.Uploader.FilePartLocator)">
            <summary>
            Reads a files bytes from the remote host.
            </summary>
            <param name="locator">e.g. 123-original.png</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Api.CloudHosts.AzureHost.Delete(Api.Contexts.Context,Api.Uploader.FileDelete)">
            <summary>
            Runs when deleting a file.
            </summary>
            <param name="context"></param>
            <param name="fDel"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.AzureHost.Upload(Api.Contexts.Context,Api.Uploader.Upload,System.String,System.String)">
            <summary>
            Runs when uploading a file.
            </summary>
            <param name="context"></param>
            <param name="upload"></param>
            <param name="tempFile"></param>
            <param name="variantName"></param>
            <returns></returns>
        </member>
        <member name="T:Api.CloudHosts.DigitalOceanConfig">
            <summary>
            DigitalOcean config.
            </summary>
        </member>
        <member name="P:Api.CloudHosts.DigitalOceanConfig.SpaceOriginUrl">
            <summary>
            The space "origin" endpoint URL (not the edge/ CDN one)
            </summary>
        </member>
        <member name="P:Api.CloudHosts.DigitalOceanConfig.SpaceKey">
            <summary>
            A space key.
            </summary>
        </member>
        <member name="P:Api.CloudHosts.DigitalOceanConfig.SpaceSecret">
            <summary>
            A space secret.
            </summary>
        </member>
        <member name="P:Api.CloudHosts.DigitalOceanConfig.DisplayPdfInline">
            <summary>
            If true, add content-disposition header as inline to pdf files
            </summary>
        </member>
        <member name="P:Api.CloudHosts.DigitalOceanConfig.DisableCDN">
            <summary>
            True if should use origin URLs
            </summary>
        </member>
        <member name="P:Api.CloudHosts.DigitalOceanConfig.CustomCdnUrl">
            <summary>
            Custom URL for the CDN. Of the form https://www.example.com (starts with https, does not end with a fwd slash).
            </summary>
        </member>
        <member name="T:Api.CloudHosts.DigitalOceanHost">
            <summary>
            A representation of DigitalOcean.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.DigitalOceanHost.#ctor(Api.CloudHosts.CloudHostService,Api.CloudHosts.DigitalOceanConfig)">
            <summary>
            Creates a new digitalocean host, shared by all requests.
            </summary>
            <param name="chs"></param>
            <param name="config"></param>
        </member>
        <member name="M:Api.CloudHosts.DigitalOceanHost.GetSignedRef(Api.Uploader.Upload,System.String)">
            <summary>
            Gets a signed URL for the given private upload.
            </summary>
            <param name="upload"></param>
            <param name="sizeName"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.DigitalOceanHost.ReadFile(Api.Uploader.FilePartLocator)">
            <summary>
            Reads a files bytes from the remote host.
            </summary>
            <param name="locator">e.g. 123-original.png</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Api.CloudHosts.DigitalOceanHost.ListFiles(Api.Uploader.FileMetaStream)">
            <summary>
            Lists files from the storage area into the given file meta stream.
            The source can cancel the request via cancelling the meta stream.
            </summary>
            <param name="metaStream"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.DigitalOceanHost.GetContentUrl">
            <summary>
            The URL for the upload host (excluding any paths) if this host platform is providing file services. e.g. https://thing.ams.cdn.digitaloceanspaces.com
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.DigitalOceanHost.Delete(Api.Contexts.Context,Api.Uploader.FileDelete)">
            <summary>
            Runs when deleting a file.
            </summary>
            <param name="context"></param>
            <param name="fDel"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.DigitalOceanHost.Upload(Api.Contexts.Context,Api.Uploader.Upload,System.String,System.String)">
            <summary>
            Runs when uploading a file.
            </summary>
            <param name="context"></param>
            <param name="upload"></param>
            <param name="tempFile"></param>
            <param name="variantName"></param>
            <returns></returns>
        </member>
        <member name="T:Api.CloudHosts.SignedUrlGenerator">
            <summary>
            Generates signed URLs for private files when cloudHosts is present.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.SignedUrlGenerator.Host">
            <summary>
            The current cloud host.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.SignedUrlGenerator.GetSignedRef(Api.Uploader.Upload,System.String)">
            <summary>
            Gets a signed ref (typically a URL) for the given upload.
            </summary>
        </member>
        <member name="T:Api.CloudHosts.WebSecurityConfig">
            <summary>
            The configuration for cloud services.
            </summary>
        </member>
        <member name="P:Api.CloudHosts.WebSecurityConfig.AutoCertificate">
            <summary>
            True if certs should auto renew.
            </summary>
        </member>
        <member name="P:Api.CloudHosts.WebSecurityConfig.UseLetsEncryptStaging">
            <summary>
            True if the LE staging site should be used when renewing certs.
            </summary>
        </member>
        <member name="T:Api.CloudHosts.WebSecurityService">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            Used to generate TLS certificates either via a remote source or a http challenge on Let's Encrypt.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.WebSecurityService.#ctor(Api.CloudHosts.DomainCertificateService,Api.CloudHosts.WebServerService)">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.WebSecurityService.CheckCertificate(Api.Contexts.Context)">
            <summary>
            Checks the date on installed certs and renews them if necessary.
            Considers that other servers in the cluster are doing the same thing at the same time.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.CloudHosts.DomainCertificateLocales">
            <summary>
            A set of locales used a particular hostname.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.DomainCertificateLocales.Host">
            <summary>
            The hostname (domain).
            </summary>
        </member>
        <member name="F:Api.CloudHosts.DomainCertificateLocales.Locales">
            <summary>
            The locale IDs.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.DomainCertificateLocales.Certificate">
            <summary>
            The obtained certificate.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.DomainCertificateLocales.Add(System.UInt32)">
            <summary>
            Adds a new locale to this set.
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Api.CloudHosts.WebServerService">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            Handles configuring the webserver which is currently always NGINX.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.WebServerService.platform">
            <summary>
            Underlying platform. Currently it's always NGINX.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.WebServerService.#ctor(Api.CloudHosts.DomainCertificateService)">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.WebServerService.GetCertificateInfo">
            <summary>
            Get the latest cert info. Will generate incomplete info if they haven't been obtained yet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.WebServerService.UpdateCertificates(Api.Contexts.Context,System.Collections.Generic.Dictionary{System.String,Api.CloudHosts.DomainCertificateLocales})">
            <summary>
            Informs the webserver that the certificate set has updated. It might have not changed at all.
            </summary>
            <param name="context"></param>
            <param name="certSet"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.WebServerService.Regenerate(Api.Contexts.Context)">
            <summary>
            Regenerates website config
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.CloudHosts.NGINX">
            <summary>
            NGINX specific configuration.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.NGINX.Service">
            <summary>
            The webserver service this belongs to.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.NGINX.#ctor(Api.CloudHosts.WebServerService)">
            <summary>
            Creates a new NGINX config manager as part of the given webserver service.
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Api.CloudHosts.NGINX.Apply(Api.Contexts.Context)">
            <summary>
            Applies config changes and then performs a reload.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.NGINX.GetAllLocales(Api.Contexts.Context)">
            <summary>
            Get all the active locales 
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.NGINX.Reload">
            <summary>
            Tells the webserver to reload config live. On supported servers this results in no downtime.
            Unsupported servers will perform a restart instead.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.NGINX.Restart">
            <summary>
            Stop/starts the web server service. Causes some downtime unlike Reload does.
            </summary>
        </member>
        <member name="T:Api.CloudHosts.NGINXConfigFile">
            <summary>
            A class which represents and can generate NGINX configuration files.
            An nginx config file is essentially just an NGINX "context" (otherwise known as a block in typical coding languages).
            </summary>
        </member>
        <member name="M:Api.CloudHosts.NGINXConfigFile.WriteToFile(System.String)">
            <summary>
            Convenience version of WriteToFile, writing to a standard file based on the determined environment.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.NGINXConfigFile.AddServerContext">
            <summary>
            Adds a server context as a child of this file.
            A server context is e.g. "server { ...}" in the config file.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.NGINXConfigFile.GetConfigurableContext">
            <summary>
            Gets the context into which you should add your custom config. Only available after setting up defaults.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.NGINXConfigFile.SetupDefaults(System.String,System.Collections.Generic.Dictionary{System.String,Api.CloudHosts.DomainCertificateLocales})">
            <summary>
            Sets up the default NGINX config for *this* server.
            It will generate different things depending on which environment the server is (stage/ prod mainly).
            </summary>
        </member>
        <member name="T:Api.CloudHosts.NGINXContext">
             <summary>
             A class which represents a "context" in NGINX config lingo.
             A context is what you might call a block - it has a list of directives and can potentially have blocks nested inside it too.
            
              
             location / {
            	
             }
             ^ a location context
             "location /" is the directive of the above context.
             The list of directives (inside the brackets) in this example is empty.
             </summary>
        </member>
        <member name="F:Api.CloudHosts.NGINXContext.Directive">
            <summary>
            The directive of the context itself.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.NGINXContext.Contexts">
            <summary>
            The list of contexts within this context. NGINX context (blocks) are nestable.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.NGINXContext.Directives">
            <summary>
            The classic key/value pairing which defines a particular config value is called a directive.
            It is a list rather than a dictionary because for a variety of directives, order matters.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.NGINXContext.AddLocationContext(System.String)">
            <summary>
            Adds a location context as a child of this one.
            A location context is e.g. "location / { ...}" in the config file.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.NGINXContext.AddContext(System.String,System.String)">
            <summary>
            Add a context of the given type as a child. Returns the new context. See also: AddLocationContext.
            Returns *the child context*.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.NGINXContext.AddContext(Api.CloudHosts.NGINXContext)">
            <summary>
            Adds the given context to this one as a child context.
            Returns *the child context*.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.NGINXContext.AddDirective(System.String,System.String)">
            <summary>
            Adds the given directive (key/value config pair) to this one as a child.
            Returns this context for easy chaining.
            Like this:
            
             nginxConfigFile.AddDirective("error_log", "/var/log/nginx/error.log").AddDirective("server_name", "www.site.com")...
            
            If you need the actual NGINXDirective object, use the other AddDirective.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.NGINXContext.AddDirective(Api.CloudHosts.NGINXDirective)">
            <summary>
            Adds the given directive (key/value config pair) to this one as a child.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.NGINXContext.ToString">
            <summary>
            Generates the textual configuration of this context.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.NGINXContext.ToString(System.Text.StringBuilder,System.Int32)">
            <summary>
            Efficient mechanism for stringifying this block.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.NGINXContext.Indent(System.Text.StringBuilder,System.Int32)">
            <summary>
            Adds tabs to the given builder based on the current indent depth.
            I.e. depth 0 is 0 tabs added, 1 is 1 tab added etc.
            </summary>
        </member>
        <member name="T:Api.CloudHosts.NGINXDirective">
             <summary>
             A class which represents a "directive" in NGINX config lingo.
             Essentially a key/value pair which sets a particular piece of config. Some directives are order sensitive so they are a list not a dictionary.
            
               error_log "/var/log/nginx/error.log";    -- a directive
                 ^                ^
                key             value
             </summary>
        </member>
        <member name="F:Api.CloudHosts.NGINXDirective.Key">
            <summary>
            The key (config variable name usually) of this directive.
            </summary>
        </member>
        <member name="F:Api.CloudHosts.NGINXDirective.Value">
            <summary>
            The value of this directive.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.NGINXDirective.#ctor">
            <summary>
            Creates an empty NGINXDirective.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.NGINXDirective.#ctor(System.String,System.String)">
            <summary>
            Creates a new NGINX directive with the given key/ value pair.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.NGINXDirective.ToString(System.Text.StringBuilder,System.Int32)">
            <summary>
            Efficient mechanism for stringifying this directive.
            Does not output ; as the presence of the semicolon varies based on where the directive is.
            </summary>
        </member>
        <member name="T:Api.CloudHosts.WebServer">
            <summary>
            Generic webserver features.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.WebServer.Apply(Api.Contexts.Context)">
            <summary>
            Applies config changes and then performs a reload.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.WebServer.UpdateCertificates(Api.Contexts.Context,System.Collections.Generic.Dictionary{System.String,Api.CloudHosts.DomainCertificateLocales})">
            <summary>
            Informs the webserver that the certificate set has updated. It might have not changed at all.
            </summary>
            <param name="context"></param>
            <param name="certSet"></param>
            <returns></returns>
        </member>
        <member name="M:Api.CloudHosts.WebServer.Reload">
            <summary>
            Tells the webserver to reload config live. On supported servers this results in no downtime.
            Unsupported servers will perform a restart instead.
            </summary>
        </member>
        <member name="M:Api.CloudHosts.WebServer.Restart">
            <summary>
            Stop/starts the web server service. Causes some downtime unlike Reload does.
            </summary>
        </member>
        <member name="T:Api.CloudHosts.WebServerConfig">
            <summary>
            The webserver configuration.
            </summary>
        </member>
        <member name="P:Api.CloudHosts.WebServerConfig.Domains">
            <summary>
            Use this to specify additional domain config, such as handling a root domain on a live site alongside www.
            For most stage sites this is empty, whilst on prod sites it is usually the root domain in here.
            </summary>
        </member>
        <member name="P:Api.CloudHosts.WebServerConfig.NGINX">
            <summary>
            Config specifically for NGINX.
            </summary>
        </member>
        <member name="T:Api.CloudHosts.NGINXConfig">
            <summary>
            Config specifically for NGINX.
            </summary>
        </member>
        <member name="T:Api.CloudHosts.DomainConfig">
            <summary>
            Use this to specify additional domain config, such as handling a root domain on a live site alongside www 
            </summary>
        </member>
        <member name="P:Api.CloudHosts.DomainConfig.Domain">
            <summary>
            The domain.
            </summary>
        </member>
        <member name="P:Api.CloudHosts.DomainConfig.RedirectTo">
            <summary>
            Optional - if not set, the target is derived from the configured domains (in frontend service config).
            For example if domain is "site.com" and a site URL is "www.site.com" then redirectTo will be "www.site.com".
            </summary>
        </member>
        <member name="T:Api.Redirects.Permissions">
            <summary>
            Instances capabilities during the very earliest phases of startup.
            </summary>
        </member>
        <member name="M:Api.Redirects.Permissions.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="T:Api.Redirects.Redirect">
            <summary>
            A Redirect
            </summary>
        </member>
        <member name="F:Api.Redirects.Redirect.From">
            <summary>
            Source URL to redirect from. MUST be site relative and start with a forwardslash always.
            For example, "/hello-world/"
            If it ends with a forward slash, then both with and without the fwdslash will be redirected.
            I.e. "/hello-world/" and "/hello-world"
            </summary>
        </member>
        <member name="F:Api.Redirects.Redirect.To">
            <summary>
            Target URL to redirect to. SHOULD be site relative and start with a forwardslash always.
            Only use full URLs with a host name if they are not "this" site to make the redirect rules portable between environments.
            </summary>
        </member>
        <member name="F:Api.Redirects.Redirect.PermanentRedirect">
            <summary>
            True if this redirect should be considered permanent (i.e. a 301);
            Will default to a temporary 302 redirect if not set
            </summary>
        </member>
        <member name="T:Api.Redirects.RedirectController">
            <summary>Handles redirect endpoints.</summary>
        </member>
        <member name="T:Api.Redirects.RedirectService">
            <summary>
            Handles redirects.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Redirects.RedirectService.#ctor(Api.CloudHosts.WebServerService)">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="T:Api.Configuration.AppSettings">
            <summary>
            This is the global config. It originates from the appsettings.json file.
            </summary>
        </member>
        <member name="F:Api.Configuration.AppSettings.Configuration">
            <summary>
            The config from the appsettings.json file.
            </summary>
        </member>
        <member name="F:Api.Configuration.AppSettings.DatabaseTablePrefix">
            <summary>
            A heavily used database table prefix.
            </summary>
        </member>
        <member name="E:Api.Configuration.AppSettings.OnChange">
            <summary>
            A handler called whenever the appsettings changes.
            </summary>
        </member>
        <member name="M:Api.Configuration.AppSettings.GetRawPublicUrls">
            <summary>
            Gets the raw public URLs arranged by locale ID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Configuration.AppSettings.GetPublicUrl(System.UInt32)">
            <summary>
            The site public URL for a particular locale ID. If you're not sure what the localeId should be, use locale 1.
            Note that if an origin does not exist for a localeId, the URL for locale 1 is used.
            If the appsettings does not specify a locale, 1 is assumed.
            The resulting URL never ends with a path - always just the origin and scheme, e.g. https://www.example.com
            </summary>
            <param name="localeId"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Configuration.AppSettings.GetSection(System.String)">
            <summary>
            Wrapper for old API format
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Configuration.AppSettings.GetString(System.String,System.String)">
            <summary>
            Gets a string from the settings.
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Configuration.AppSettings.TriggerChange">
            <summary>
            Triggers the change event
            </summary>
        </member>
        <member name="M:Api.Configuration.AppSettings.GetInt32(System.String,System.Int32)">
            <summary>
            Reads a field from the appsettings.json with the given name as an int32.
            Returns the default value if not set or invalid.
            </summary>
        </member>
        <member name="M:Api.Configuration.AppSettings.GetInt64(System.String,System.Int64)">
            <summary>
            Reads a field from the appsettings.json with the given name as an int64.
            Returns the default value if not set or invalid.
            </summary>
        </member>
        <member name="T:Api.Configuration.AppSettingsFile">
            <summary>
            Info about a singular appsettings file.
            </summary>
        </member>
        <member name="F:Api.Configuration.AppSettingsFile.Path">
            <summary>
            Path to the appsettings file.
            </summary>
        </member>
        <member name="F:Api.Configuration.AppSettingsFile.Parent">
            <summary>
            Parent appsettings if there is one.
            </summary>
        </member>
        <member name="F:Api.Configuration.AppSettingsFile._rawConfig">
            <summary>
            The raw config object.
            </summary>
        </member>
        <member name="M:Api.Configuration.AppSettingsFile.#ctor(System.String)">
            <summary>
            Creates and initially loads the file. Adds a file change handler too.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Api.Configuration.AppSettingsFile.CreateFileWatcher">
            <summary>
            Create a file watcher
            </summary>
        </member>
        <member name="M:Api.Configuration.AppSettingsFile.GetToken(System.String)">
            <summary>
            Gets the JSON token for the given field.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Configuration.AppSettingsFile.GetString(System.String)">
            <summary>
            Gets the given config field as a string.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Configuration.AppSettingsFile.GetSection``1(System.String)">
            <summary>
            Gets a section of the config by field name, constructing an object of the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:Api.Configuration.AppSettingsFile.Item(System.String)">
            <summary>
            Shortcut for GetString
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Configuration.AppSettingsFileSectionShim">
            <summary>
            Shims the IConfigurationSection interface
            </summary>
        </member>
        <member name="M:Api.Configuration.AppSettingsFileSectionShim.#ctor(Api.Configuration.AppSettingsFile,System.String)">
            <summary>
            Creates a file section
            </summary>
            <param name="file"></param>
            <param name="section"></param>
        </member>
        <member name="M:Api.Configuration.AppSettingsFileSectionShim.Get``1">
            <summary>
            Gets the section cast as the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Api.Configuration.AppSettingsFileSectionShim.Item(System.String)">
            <summary>
            Shims GetSection("name")["fieldName"].
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Configuration.Config">
            <summary>
            Base class of every configuration block.
            To create config for your service, create a class that inherits this called {ServiceName}Config.
            For example, if your config is for ThingService, then you would 
            * Make	public partial class ThingServiceConfig : Config
            * GetConfig&lt;ThingServiceConfig&gt;() in e.g. the constructor of ThingService.
            Use the BeforeConfigure event to track when it's about to change.
            Config is JSON serialised so it can contain lists and sub classes as well.
            </summary>
        </member>
        <member name="F:Api.Configuration.Config.SetMap">
            <summary>
            All global sets. When a new config entry is added, these are 
            tested to see if the config should also be added to an active set.
            </summary>
        </member>
        <member name="F:Api.Configuration.Config.Id">
            <summary>
            The config ID, if applicable.
            </summary>
        </member>
        <member name="E:Api.Configuration.Config.OnChange">
            <summary>
            Triggered when this config object is updated.
            </summary>
        </member>
        <member name="F:Api.Configuration.Config.FrontendJson">
            <summary>
            The contents of this config converted to the frontend only JSON. Null if no fields are frontend marked.
            </summary>
        </member>
        <member name="M:Api.Configuration.Config.UpdateInSet(Api.Configuration.Config)">
            <summary>
            Adds to this set (if it is a ConfigSet).
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:Api.Configuration.Config.RemoveById(System.UInt32)">
            <summary>
            Removes an entry by its ID if it is in this set. Runs OnChange if a removal occurred.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Api.Configuration.Config.AddFrontendJson(System.Text.StringBuilder)">
            <summary>
            True if this is a set of configs.
            </summary>
        </member>
        <member name="M:Api.Configuration.Config.Changed">
            <summary>
            Invoke this to indicate a change has happened.
            </summary>
        </member>
        <member name="M:Api.Configuration.Config.GetName">
            <summary>
            Gets the name of this config type.
            </summary>
        </member>
        <member name="T:Api.Configuration.ConfigSet">
            <summary>
            A set of configs.
            </summary>
        </member>
        <member name="F:Api.Configuration.ConfigSet.Name">
            <summary>
            The key this set uses. Configurations must be for this environment and with this exact key.
            </summary>
        </member>
        <member name="F:Api.Configuration.ConfigSet.EntryType">
            <summary>
            The type of entry in this set of configs.
            </summary>
        </member>
        <member name="M:Api.Configuration.ConfigSet.GetIndex(System.UInt32)">
            <summary>
            Gets the index of the config with the given ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Configuration.ConfigSet`1">
            <summary>
            A set of configs.
            </summary>
        </member>
        <member name="F:Api.Configuration.ConfigSet`1.Configurations">
            <summary>
            The underlying list of configs.
            </summary>
        </member>
        <member name="F:Api.Configuration.ConfigSet`1.Primary">
            <summary>
            Primary config.
            </summary>
        </member>
        <member name="M:Api.Configuration.ConfigSet`1.#ctor">
            <summary>
            Creates an empty config set.
            </summary>
        </member>
        <member name="M:Api.Configuration.ConfigSet`1.UpdatePrimaryConfig">
            <summary>
            Updates the primary config.
            This runs when the set is notably modified: the set goes from length 0 to 1, 1 to 0, or the 0th object was updated.
            </summary>
        </member>
        <member name="M:Api.Configuration.ConfigSet`1.RemoveById(System.UInt32)">
            <summary>
            Removes an entry by its ID if it is in this set. Runs OnChange if a removal occurred.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Api.Configuration.ConfigSet`1.GetIndex(System.UInt32)">
            <summary>
            Gets the index of the config with the given ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Configuration.ConfigSet`1.UpdateInSet(Api.Configuration.Config)">
            <summary>
            Adds to this set (if it is a ConfigSet), or updates it if it's already in here.
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:Api.Configuration.ConfigSet`1.AddFrontendJson(System.Text.StringBuilder)">
            <summary>
            True if this is a set of configs.
            </summary>
        </member>
        <member name="M:Api.Configuration.ConfigSet`1.GetName">
            <summary>
            Gets the name of this config type.
            </summary>
        </member>
        <member name="T:Api.Configuration.Configuration">
            <summary>
            A Configuration entry in the database. Do not derive from this! 
            Use :Config instead when declaring the config options for your thing.
            </summary>
        </member>
        <member name="F:Api.Configuration.Configuration.Name">
            <summary>
            The name of the configuration. This is often the name of the service.
            </summary>
        </member>
        <member name="F:Api.Configuration.Configuration.Environments">
            <summary>
            If this is set, this configuration applies to the specified comma separated environments. It is completely ignored otherwise.
            Valid environments are typically "dev", "stage" and "prod" (but it ultimately derives from whatever is in your appsettings.json "Environment" field).
            </summary>
        </member>
        <member name="F:Api.Configuration.Configuration.Key">
            <summary>
            The key that things use to identify this config. Usually the same as the English name but without spaces.
            </summary>
        </member>
        <member name="F:Api.Configuration.Configuration.ConfigJson">
            <summary>
            The raw content of this configuration.
            </summary>
        </member>
        <member name="T:Api.Configuration.ConfigurationController">
            <summary>Handles configuration endpoints.</summary>
        </member>
        <member name="T:Api.Configuration.ConfigurationService">
            <summary>
            Handles configurations.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Configuration.ConfigurationService.#ctor(Api.AutoForms.AutoFormService)">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="F:Api.Configuration.ConfigurationService.jsonSettings">
            <summary>
            Json serialization settings for canvases
            </summary>
        </member>
        <member name="M:Api.Configuration.ConfigurationService.FirstCharToLowerCase(System.String)">
            <summary>
            Lowercases first letter of a given string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Configuration.ConfigurationService.InstallConfig(Api.Configuration.Config,System.String,System.String,Api.Configuration.ConfigSet)">
            <summary>
            Creates a config row. The given object is jsonified and put into the DB.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Configuration.ConfigurationService.UpdateFrontendConfig(Api.Configuration.Config,Api.Configuration.ConfigSet)">
            <summary>
             Potentially adds/ updates the given config object to the frontend config, 
             depending on if it is marked with [Frontend] attributes or not.
            </summary>
            <param name="configObject"></param>
            <param name="configSet"></param>
        </member>
        <member name="F:Api.Configuration.ConfigurationService._allFrontendConfigs">
            <summary>
            Configs for the frontend. Some may be a ConfigSet.
            </summary>
        </member>
        <member name="M:Api.Configuration.ConfigurationService.GetLatestFrontendConfigJs">
            <summary>
            Gets the frontend config as a JS string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Configuration.ConfigurationService.GetLatestFrontendConfigBytesJson">
            <summary>
            Gets the frontend config as a UTF8 encoded block of bytes. Can be null if there isn't any.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Configuration.ConfigurationService.GetLatestFrontendConfigBytes">
            <summary>
            Gets the frontend config as a UTF8 encoded block of bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Configuration.ConfigurationService.PermittedOnThisEnvironment(System.String)">
            <summary>
            True if the given environment string matches this environment.
            </summary>
            <param name="envString"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Configuration.ConfigurationService.AllFromCache(System.String)">
            <summary>
            Gets config from the cache via the given key. Note that this actively omits entries from other environments.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Configuration.ConfigurationService.FromCache(System.String)">
            <summary>
            Gets config from the cache via the given key. Note that this actively omits entries from other environments.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Configuration.FrontendAttribute">
            <summary>
            Add [Frontend] attributes to your config properties (or the whole config class) to declare that the config values should be made available to the frontend.
            You can access the values via useConfig from UI/Session.
            </summary>
        </member>
        <member name="T:Api.Configuration.Permissions">
            <summary>
            Instances capabilities during the very earliest phases of startup.
            </summary>
        </member>
        <member name="M:Api.Configuration.Permissions.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="T:Api.ContentSync.ClusteredServer">
            <summary>
            A server in the cluster. Each one owns one stripe, and they adjust (globally) when a new server joins the cluster.
            </summary>
        </member>
        <member name="F:Api.ContentSync.ClusteredServer.Port">
            <summary>
            The port number used for contentsync on this server.
            </summary>
        </member>
        <member name="F:Api.ContentSync.ClusteredServer.Environment">
            <summary>
            The environment this server is in.
            </summary>
        </member>
        <member name="F:Api.ContentSync.ClusteredServer.PrivateIPv4">
            <summary>
            Private IPv4 address for this server.
            </summary>
        </member>
        <member name="F:Api.ContentSync.ClusteredServer.PublicIPv4">
            <summary>
            Public IPv4 address for this server.
            </summary>
        </member>
        <member name="F:Api.ContentSync.ClusteredServer.PrivateIPv6">
            <summary>
            Private IPv6 address for this server. Often matches the public one.
            </summary>
        </member>
        <member name="F:Api.ContentSync.ClusteredServer.PublicIPv6">
            <summary>
            Public IPv6 address for this server.
            </summary>
        </member>
        <member name="F:Api.ContentSync.ClusteredServer.HostName">
            <summary>
            Hostname of this server. Used to identify if a server has been seen before.
            </summary>
        </member>
        <member name="F:Api.ContentSync.ClusteredServer.ServerTypeId">
            <summary>
            Socialstack server type. Often 0 if undeclared.
            </summary>
        </member>
        <member name="F:Api.ContentSync.ClusteredServer.HostPlatformId">
            <summary>
            Socialstack host platform ID. Often 0 if undeclared.
            </summary>
        </member>
        <member name="F:Api.ContentSync.ClusteredServer.RegionId">
            <summary>
            Socialstack region ID for a given host platform.
            </summary>
        </member>
        <member name="T:Api.ContentSync.ClusteredServerService">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.ContentSync.ClusteredServerService.#ctor">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="T:Api.ContentSync.ContentSyncController">
            <summary>
            Handles an endpoint which describes the permissions on each role.
            </summary>
        </member>
        <member name="T:Api.ContentSync.ContentSyncServerInfo">
            <summary>
            Another ContentSync server in the cluster connected to "us".
            </summary>
        </member>
        <member name="F:Api.ContentSync.ContentSyncServerInfo.RemoteAddress">
            <summary>
            The remote DNS address (or IP).
            </summary>
        </member>
        <member name="F:Api.ContentSync.ContentSyncServerInfo.Port">
            <summary>
            CSync server port on remote host.
            </summary>
        </member>
        <member name="F:Api.ContentSync.ContentSyncServerInfo.ServerId">
            <summary>
            Remote server's declared ID.
            </summary>
        </member>
        <member name="F:Api.ContentSync.ContentSyncServerInfo.BindAddress">
            <summary>
            The IP this server should bind to. Will almost always be on a private LAN, but * is also supported.
            </summary>
        </member>
        <member name="T:Api.ContentSync.ContentSyncService">
            <summary>
            ContentSync manages cache invalidations and related live messaging between a cluster of servers.
            It operates based on simply the amount of servers which start and register themselves in to the database.
            </summary>
        </member>
        <member name="P:Api.ContentSync.ContentSyncService.ServerId">
            <summary>
            This server's ID.
            </summary>
        </member>
        <member name="P:Api.ContentSync.ContentSyncService.HandshakeOpCode">
            <summary>
            Handshake opcode
            </summary>
        </member>
        <member name="F:Api.ContentSync.ContentSyncService.Verbose">
            <summary>
            True if sync should be in verbose mode.
            </summary>
        </member>
        <member name="P:Api.ContentSync.ContentSyncService.Port">
            <summary>
            The port number for contentSync to use.
            </summary>
        </member>
        <member name="F:Api.ContentSync.ContentSyncService._nrts">
            <summary>
            Network room type service.
            </summary>
        </member>
        <member name="M:Api.ContentSync.ContentSyncService.#ctor(Api.ContentSync.ClusteredServerService,Api.ContentSync.NetworkRoomTypeService,Api.WebSockets.WebSocketService)">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="F:Api.ContentSync.ContentSyncService.SyncFileMode">
            <summary>
            True if the sync file is active.
            </summary>
        </member>
        <member name="F:Api.ContentSync.ContentSyncService.HostName">
            <summary>
            The name of this ContentSync host
            </summary>
        </member>
        <member name="M:Api.ContentSync.ContentSyncService.Startup">
            <summary>
            Sets up the config required to connect to other servers.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.ContentSync.ContentSyncService.Self">
            <summary>
            The clustered server representing this specific server. Has IP addresses setup and ready.
            </summary>
        </member>
        <member name="T:Api.ContentSync.PlatformJsonFile">
            <summary>
            The platform JSON file.
            </summary>
        </member>
        <member name="P:Api.ContentSync.PlatformJsonFile.Region">
            <summary>
            The server region ID.
            </summary>
        </member>
        <member name="P:Api.ContentSync.PlatformJsonFile.Host">
            <summary>
            The server host ID.
            </summary>
        </member>
        <member name="P:Api.ContentSync.PlatformJsonFile.Type">
            <summary>
            The server type ID.
            </summary>
        </member>
        <member name="T:Api.ContentSync.ContentSyncServiceConfig">
            <summary>
            The appsettings.json config block for push notification config.
            </summary>
        </member>
        <member name="P:Api.ContentSync.ContentSyncServiceConfig.Port">
            <summary>
            The port number for csync service to use.
            </summary>
        </member>
        <member name="P:Api.ContentSync.ContentSyncServiceConfig.Verbose">
            <summary>
            Verbose messaging mode
            </summary>
        </member>
        <member name="P:Api.ContentSync.ContentSyncServiceConfig.GlobalCluster">
            <summary>
            True if this cluster is global and will instead bind the any interface.
            </summary>
        </member>
        <member name="P:Api.ContentSync.ContentSyncServiceConfig.SyncFileMode">
            <summary>
            True if the sync file should be explicitly enabled/ disabled.
            </summary>
        </member>
        <member name="P:Api.ContentSync.ContentSyncServiceConfig.HostName">
            <summary>
            Custom hostname override. Usually leave this blank.
            </summary>
        </member>
        <member name="P:Api.ContentSync.ContentSyncServiceConfig.UpstreamHost">
            <summary>
            Upstream host when syncing db/files
            </summary>
        </member>
        <member name="P:Api.ContentSync.ContentSyncServiceConfig.UpstreamCookie">
            <summary>
            Upstream cookie when syncing db/files
            </summary>
        </member>
        <member name="T:Api.ContentSync.EventListener">
            <summary>
            Listens for service starts so it can start syncing it.
            </summary>
        </member>
        <member name="M:Api.ContentSync.EventListener.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="T:Api.ContentSync.NetworkRoomLookup">
            <summary>
            Used to find network rooms based on type ID.
            </summary>
        </member>
        <member name="F:Api.ContentSync.NetworkRoomLookup.NetworkRoomSets">
            <summary>
            Network room sets by type ID.
            </summary>
        </member>
        <member name="T:Api.ContentSync.NetworkRoomType">
            <summary>
            Network room type.
            </summary>
        </member>
        <member name="F:Api.ContentSync.NetworkRoomType.TypeName">
            <summary>The unique name of the network room. Always lowercased.</summary>
        </member>
        <member name="T:Api.ContentSync.NetworkRoomTypeService">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.ContentSync.NetworkRoomTypeService.#ctor">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="T:Api.ContentSync.SyncServerHandshake">
            <summary>
            Initial hello message
            </summary>
        </member>
        <member name="F:Api.ContentSync.SyncServerHandshake.ServerId">
            <summary>
            Other server's ID ("mine" when sending this message).
            </summary>
        </member>
        <member name="F:Api.ContentSync.SyncServerHandshake.Signature">
            <summary>
            Signature of A=>B
            </summary>
        </member>
        <member name="T:Api.ContentSync.SyncServerHandshakeResponse">
            <summary>
            Response to handshake
            </summary>
        </member>
        <member name="F:Api.ContentSync.SyncServerHandshakeResponse.ServerId">
            <summary>
            Other server's ID ("mine" when sending this message).
            </summary>
        </member>
        <member name="T:Api.ContentSync.SyncServerRemoteType">
            <summary>
            Used when remote content changed in some way.
            </summary>
        </member>
        <member name="F:Api.ContentSync.SyncServerRemoteType.LocaleId">
            <summary>
            Locale ID.
            </summary>
        </member>
        <member name="F:Api.ContentSync.SyncServerRemoteType.TypeName">
            <summary>
            Type name.
            </summary>
        </member>
        <member name="F:Api.ContentSync.SyncServerRemoteType.RemainingBytes">
            <summary>
            Bytes remaining in the message.
            </summary>
        </member>
        <member name="F:Api.ContentSync.SyncServerRemoteType.Meta">
            <summary>
            The metadata for the current object.
            </summary>
        </member>
        <member name="T:Api.ContentSync.Permissions">
            <summary>
            Instances capabilities during the very earliest phases of startup.
            </summary>
        </member>
        <member name="M:Api.ContentSync.Permissions.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="T:Api.ContentSync.StripeRange">
            <summary>
            The appsettings.json config block for push notification config.
            </summary>
        </member>
        <member name="P:Api.ContentSync.StripeRange.ServerId">
            <summary>
            Numeric server ID.
            </summary>
        </member>
        <member name="P:Api.ContentSync.StripeRange.Port">
            <summary>
            Numeric port.
            </summary>
        </member>
        <member name="P:Api.ContentSync.StripeRange.RemoteAddress">
            <summary>
            When running in production, this is the remote address (DNS/ IP) to connect to in order to sync in realtime.
            Updates, inserts and deletes are informed on all cached services.
            Note that if this address is unreachable, updates are buffered in memory for a set 
            period of time, and connections are repeatedly attempted.
            </summary>
        </member>
        <member name="P:Api.ContentSync.StripeRange.BindAddress">
            <summary>
            Like RemoteAddress, this is used to define which IP "this" machine should bind to.
            </summary>
        </member>
        <member name="P:Api.ContentSync.StripeRange.Min">
            <summary>
            Minimum stripe ID (inclusive).
            </summary>
        </member>
        <member name="P:Api.ContentSync.StripeRange.Max">
            <summary>
            Maximum stripe ID (inclusive).
            </summary>
        </member>
        <member name="P:Api.ContentSync.StripeRange.StepSize">
            <summary>
            You can make multiple ranges overlap by specifying a step size.
            </summary>
        </member>
        <member name="M:Api.ContentSync.StripeRange.Expand(System.Collections.Generic.List{Api.ContentSync.StripeRange})">
            <summary>
            Converts a set of ranges into a set of allocatable IDs.
            </summary>
            <param name="ranges"></param>
            <returns></returns>
        </member>
        <member name="T:Api.ContentSync.LatestId">
            <summary>
            The latest ID in a particular stripe.
            </summary>
        </member>
        <member name="F:Api.ContentSync.LatestId.Id">
            <summary>
            The latest ID in a particular segment.
            </summary>
        </member>
        <member name="T:Api.ContentSync.IdAssigner`1">
            <summary>
            Generates long/ ulong IDs.
            </summary>
        </member>
        <member name="M:Api.ContentSync.IdAssigner`1.Assign">
            <summary>
            Assigns an ID of the given type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.ContentSync.IdAssignerUInt32">
            <summary>
            Assigns IDs for a particular stripe.
            </summary>
        </member>
        <member name="F:Api.ContentSync.IdAssignerUInt32.Current">
            <summary>
            The max ID.
            </summary>
        </member>
        <member name="M:Api.ContentSync.IdAssignerUInt32.#ctor(System.UInt32)">
            <summary>
            Creates an ID assigner
            </summary>
            <param name="current"></param>
        </member>
        <member name="M:Api.ContentSync.IdAssignerUInt32.Assign">
            <summary>
            Gets the next ID in the sequence.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.ContentSync.IdAssignerUInt64">
            <summary>
            Assigns IDs for a particular stripe.
            </summary>
        </member>
        <member name="F:Api.ContentSync.IdAssignerUInt64.Current">
            <summary>
            The max ID.
            </summary>
        </member>
        <member name="M:Api.ContentSync.IdAssignerUInt64.#ctor(System.UInt64)">
            <summary>
            Creates an ID assigner
            </summary>
            <param name="current"></param>
        </member>
        <member name="M:Api.ContentSync.IdAssignerUInt64.Assign">
            <summary>
            Gets the next ID in the sequence.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.ContentSync.SyncServerRemoteReader">
            <summary>
            Used when reading remote type updates.
            </summary>
        </member>
        <member name="F:Api.ContentSync.SyncServerRemoteReader.Action">
            <summary>
            1 = Create, 2 = Update, 3 = Delete.
            </summary>
        </member>
        <member name="F:Api.ContentSync.SyncServerRemoteReader.OpCode">
            <summary>
            The opcode this reader is for.
            </summary>
        </member>
        <member name="F:Api.ContentSync.SyncServerRemoteReader.WebsocketService">
            <summary>
            Content sync service.
            </summary>
        </member>
        <member name="M:Api.ContentSync.SyncServerRemoteReader.#ctor(System.Int32,Api.WebSockets.WebSocketService)">
            <summary>
            Used when reading remote type updates.
            </summary>
            <param name="action"></param>
            <param name="wsService"></param>
        </member>
        <member name="M:Api.ContentSync.SyncServerRemoteReader.Process(Api.SocketServerLibrary.RecvStackFrame@,Api.SocketServerLibrary.Client)">
            <summary>
            Processes this received frame.
            </summary>
            <param name="frame"></param>
            <param name="client"></param>
        </member>
        <member name="T:Api.WebSockets.NetworkRoom`3">
            <summary>
            Stores information for a particular network room for this particular server only.
            You can also add e.g. room state by creating a parent class.
            </summary>
            <summary>
            Stores information for a particular network room for this particular server only.
            You can also add e.g. room state by creating a parent class.
            </summary>
        </member>
        <member name="M:Api.WebSockets.NetworkRoom`3.Send(Api.SocketServerLibrary.Writer,Api.WebSockets.WebSocketClient)">
            <summary>
            Sends a message to all users in this room except the given sender. The message being sent MUST have a network room prefix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.WebSockets.NetworkRoom`3.SendRemote(Api.SocketServerLibrary.Writer)">
            <summary>
            Send to remote servers only.
            </summary>
            <param name="message"></param>
        </member>
        <member name="F:Api.WebSockets.NetworkRoom`3.Id">
            <summary>
            The ID of the content this room is for. Can be default(ID), often a 0, if there isn't any.
            </summary>
        </member>
        <member name="F:Api.WebSockets.NetworkRoom`3.ParentSet">
            <summary>
            The set that this room is in. Always exists.
            </summary>
        </member>
        <member name="P:Api.WebSockets.NetworkRoom`3.MappingService">
            <summary>
            Mapping from the source object -> cluster servers. The mapping is called NetworkRoomServers.
            </summary>
        </member>
        <member name="M:Api.WebSockets.NetworkRoom`3.EmptyLocally">
            <summary>
            Empties the network room forcefully.
            </summary>
        </member>
        <member name="P:Api.WebSockets.NetworkRoom`3.LocalCount">
            <summary>
            Local user count.
            </summary>
        </member>
        <member name="P:Api.WebSockets.NetworkRoom`3.First">
            <summary>
            First local user in this room.
            </summary>
        </member>
        <member name="P:Api.WebSockets.NetworkRoom`3.Last">
            <summary>
            Last local user in this room.
            </summary>
        </member>
        <member name="P:Api.WebSockets.NetworkRoom`3.IsEmpty">
            <summary>
            True if this room is empty.
            </summary>
        </member>
        <member name="M:Api.WebSockets.NetworkRoom`3.MarkEmpty">
            <summary>
            Don't call this - it's used specifically by the last leaving client to mark this room as being empty.
            </summary>
        </member>
        <member name="P:Api.WebSockets.NetworkRoom`3.IsEmptyLocally">
            <summary>
            True if this room is empty locally.
            </summary>
        </member>
        <member name="F:Api.WebSockets.NetworkRoom`3.cacheServerList">
            <summary>
            A weak reference to the cached list of server IDs.
            </summary>
        </member>
        <member name="M:Api.WebSockets.NetworkRoom`3.GetNonAllocEnumerator">
            <summary>
            Gets a non-alloc enumeration tracker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.WebSockets.NetworkRoom`3.IsInRoomSlow(Api.WebSockets.WebSocketClient)">
            <summary>
            Typically use client.GetInNetworkRoom(thisRoom) instead. True if the given client is in this room. Checks by iterating everything.
            </summary>
        </member>
        <member name="M:Api.WebSockets.NetworkRoom`3.Add(Api.WebSockets.WebSocketClient,System.UInt32,Api.Permissions.FilterBase,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Add if the given client is not in the room.
            </summary>
        </member>
        <member name="M:Api.WebSockets.NetworkRoom`3.GetRemoteServers">
            <summary>
            Gets the list of remote servers to to send to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.WebSockets.NetworkRoom`3.SendLocallyIfPermitted(`0,System.Byte,Api.WebSockets.WebSocketClient)">
            <summary>
            Sends the given writer to every relevant room for the given source (local delivery only).
            </summary>
            <param name="src"></param>
            <param name="opcode"></param>
            <param name="sender"></param>
        </member>
        <member name="M:Api.WebSockets.NetworkRoom`3.SendLocally(Api.SocketServerLibrary.Writer,Api.WebSockets.WebSocketClient)">
            <summary>
            Local delivery only.
            </summary>
            <param name="writer"></param>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:Api.WebSockets.NetworkRoom`3.StartSend">
            <summary>
            Starts a writer setup for this particular room. Use .Send(writer) when you've written your payload to it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.WebSockets.NetworkRoom`3.AddUnchecked(Api.WebSockets.WebSocketClient,System.UInt32,Api.Permissions.FilterBase,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Adds the given client to the set. Does not check if the client is already in the set.
            </summary>
        </member>
        <member name="T:Api.WebSockets.NetworkRoomTypeMeta">
            <summary>
            Extending the websocket room type meta.
            </summary>
            <summary>
            Stores sync meta for a given type.
            </summary>
        </member>
        <member name="F:Api.WebSockets.NetworkRoomTypeMeta.OpCode">
            <summary>
            The opcode
            </summary>
        </member>
        <member name="M:Api.WebSockets.NetworkRoomTypeMeta.Handle(Api.SocketServerLibrary.OpCode{Api.ContentSync.SyncServerRemoteType},Api.SocketServerLibrary.Client,Api.ContentSync.SyncServerRemoteType,System.Int32)">
            <summary>
            Reads an object of this type from the given client.
            </summary>
            <param name="opcode"></param>
            <param name="client"></param>
            <param name="remoteType"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="P:Api.WebSockets.NetworkRoomTypeMeta.LoadCapability">
            <summary>
            Gets the load capability from the host service.
            </summary>
        </member>
        <member name="P:Api.WebSockets.NetworkRoomTypeMeta.IsMapping">
            <summary>
            True if this is a mapping type.
            </summary>
        </member>
        <member name="M:Api.WebSockets.NetworkRoomTypeMeta.GetOrCreateRoom(System.UInt64)">
            <summary>
            Gets or creates the network room of the given ID.
            </summary>
            <param name="roomId"></param>
        </member>
        <member name="T:Api.WebSockets.WebSocketEventGroup">
            <summary>
            The group of events for services. See also Events.Service
            </summary>
        </member>
        <member name="F:Api.WebSockets.WebSocketEventGroup.BeforeStart">
            <summary>
            Before a WS server is about to start. Use this to add custom opcodes.
            </summary>
        </member>
        <member name="F:Api.WebSockets.WebSocketEventGroup.SetUniqueTypeId">
            <summary>
            Called when a network room is being loaded. The RoomTypeId must be set on it.
            </summary>
        </member>
        <member name="F:Api.WebSockets.WebSocketEventGroup.Connected">
            <summary>
            A WS connected. This is before their identity is known. The context is always an anonymous one here.
            </summary>
        </member>
        <member name="F:Api.WebSockets.WebSocketEventGroup.AfterLogin">
            <summary>
            WebSocket user login.
            </summary>
        </member>
        <member name="F:Api.WebSockets.WebSocketEventGroup.AfterLogout">
            <summary>
            WebSocket user logout.
            </summary>
        </member>
        <member name="F:Api.WebSockets.WebSocketEventGroup.Disconnected">
            <summary>
            A WS disconnected.
            </summary>
        </member>
        <member name="T:Api.WebSockets.JsonMessageReader">
            <summary>
            Reads wrapped JSON messages. These almost exclusively come from the frontend.
            </summary>
        </member>
        <member name="F:Api.WebSockets.JsonMessageReader.OpCode">
            <summary>
            The opcode this reader is for.
            </summary>
        </member>
        <member name="M:Api.WebSockets.JsonMessageReader.#ctor">
            <summary>
            Used when reading wrapped JSON messages.
            </summary>
        </member>
        <member name="M:Api.WebSockets.JsonMessageReader.Process(Api.SocketServerLibrary.RecvStackFrame@,Api.SocketServerLibrary.Client)">
            <summary>
            Processes this received frame.
            </summary>
            <param name="frame"></param>
            <param name="client"></param>
        </member>
        <member name="T:Api.WebSockets.NetworkRoom">
            <summary>
            Base class of network rooms.
            </summary>
        </member>
        <member name="P:Api.WebSockets.NetworkRoom.IsEmpty">
            <summary>
            True if this room is empty.
            </summary>
        </member>
        <member name="M:Api.WebSockets.NetworkRoom.Add(Api.WebSockets.WebSocketClient,System.UInt32,Api.Permissions.FilterBase,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Add if the given client is not in the room.
            </summary>
        </member>
        <member name="P:Api.WebSockets.NetworkRoom.IsEmptyLocally">
            <summary>
            True if this room is empty locally
            </summary>
        </member>
        <member name="P:Api.WebSockets.NetworkRoom.ShouldBroadcastPresence">
            <summary>
            True if users joining/ leaving the room should be broadcast to other users in the room.
            </summary>
        </member>
        <member name="M:Api.WebSockets.NetworkRoom.EmptyLocally">
            <summary>
            Empties the network room.
            </summary>
        </member>
        <member name="T:Api.WebSockets.NetworkRoomEnum`3">
            <summary>
            Network room enumeration cursor.
            </summary>
        </member>
        <member name="F:Api.WebSockets.NetworkRoomEnum`3.Block">
            <summary>
            Current block.
            </summary>
        </member>
        <member name="M:Api.WebSockets.NetworkRoomEnum`3.HasMore">
            <summary>
            True if there's more.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.WebSockets.NetworkRoomEnum`3.Current">
            <summary>
            Reads the current value and advances by one.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.WebSockets.UserInRoom">
            <summary>
            A particular user in a particular networkRoom as seen by this server.
            </summary>
        </member>
        <member name="F:Api.WebSockets.UserInRoom.Client">
            <summary>
            The client in this room
            </summary>
        </member>
        <member name="F:Api.WebSockets.UserInRoom.PreviousForClient">
            <summary>
            Previous in the chain of entires for a particular client.
            </summary>
        </member>
        <member name="F:Api.WebSockets.UserInRoom.NextForClient">
            <summary>
            Next in the chain of entires for a particular client.
            </summary>
        </member>
        <member name="F:Api.WebSockets.UserInRoom.CustomId">
            <summary>
            A specified ID. Often 0.
            </summary>
        </member>
        <member name="P:Api.WebSockets.UserInRoom.RoomBase">
            <summary>
            The room the user is in (without its concrete type)
            </summary>
        </member>
        <member name="M:Api.WebSockets.UserInRoom.Remove">
            <summary>
            Removes this userInRoom, returning it to its pool.
            </summary>
        </member>
        <member name="T:Api.WebSockets.UserInRoom`3">
            <summary>
            A particular user in a particular networkRoom as seen by this server.
            </summary>
        </member>
        <member name="F:Api.WebSockets.UserInRoom`3.LoadPermission">
            <summary>
            The filter to use when testing if this user can load the object or not.
            If it's null but they're in the room they can receive any message.
            </summary>
        </member>
        <member name="F:Api.WebSockets.UserInRoom`3.UserFilter">
            <summary>
            User filter. Typically for On() based filters as it can specify if it's included or not.
            </summary>
        </member>
        <member name="M:Api.WebSockets.UserInRoom`3.GetPooled">
            <summary>
            Gets a pooled UserInRoom.
            </summary>
        </member>
        <member name="P:Api.WebSockets.UserInRoom`3.RoomBase">
            <summary>
            The room the user is in (without its concrete type)
            </summary>
        </member>
        <member name="F:Api.WebSockets.UserInRoom`3.Room">
            <summary>
            The room they're in.
            </summary>
        </member>
        <member name="F:Api.WebSockets.UserInRoom`3.Previous">
            <summary>
            Previous in the chain of user entries in the room.
            </summary>
        </member>
        <member name="F:Api.WebSockets.UserInRoom`3.Next">
            <summary>
            Next in the chain of user entries in the room.
            </summary>
        </member>
        <member name="M:Api.WebSockets.UserInRoom`3.Remove">
            <summary>
            Removes this client from the room. Returns this UserInRoom node to the pool.
            </summary>
        </member>
        <member name="T:Api.WebSockets.NetworkRoomSet">
            <summary>
            A set of network rooms.
            </summary>
        </member>
        <member name="F:Api.WebSockets.NetworkRoomSet.NodeId">
            <summary>
            The cluster node that we're currently on.
            </summary>
        </member>
        <member name="F:Api.WebSockets.NetworkRoomSet.ServerContext">
            <summary>
            An admin context to use when creating mappings.
            </summary>
        </member>
        <member name="F:Api.WebSockets.NetworkRoomSet.SharedGuestContext">
            <summary>
            A role 3 context for live messages.
            </summary>
        </member>
        <member name="M:Api.WebSockets.NetworkRoomSet.ForwardToRoom(System.UInt64,Api.SocketServerLibrary.Writer)">
            <summary>
            Forwards the given complete message to a room in this set.
            </summary>
            <param name="roomId"></param>
            <param name="completeMessage"></param>
        </member>
        <member name="M:Api.WebSockets.NetworkRoomSet.UniqueName">
            <summary>
            A unique type name for this set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.WebSockets.NetworkRoomSet.SetRoomTypeId(System.UInt32)">
            <summary>
            Sets the room type ID.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.WebSockets.NetworkRoomSet`3">
            <summary>
            Set of network rooms for a given service.
            </summary>
        </member>
        <member name="F:Api.WebSockets.NetworkRoomSet`3.Service">
            <summary>
            The service this set is for.
            </summary>
        </member>
        <member name="F:Api.WebSockets.NetworkRoomSet`3.IdConverter">
            <summary>
            Converts IDs to and from ROOM_ID. It's most often the same as the services IdConverter.
            </summary>
        </member>
        <member name="F:Api.WebSockets.NetworkRoomSet`3.RemoteServers">
            <summary>
            The mapping of servers listening to particular IDs of things in this service.
            Can be null if this is itself a mapping, which are always cached.
            </summary>
        </member>
        <member name="F:Api.WebSockets.NetworkRoomSet`3.AnyUpdateRoom">
            <summary>
            A room used for hosting "any" updates on this type. Not used by mapping network room sets.
            </summary>
        </member>
        <member name="M:Api.WebSockets.NetworkRoomSet`3.UniqueName">
            <summary>
            A unique type name for this set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.WebSockets.NetworkRoomSet`3.SetRoomTypeId(System.UInt32)">
            <summary>
            Sets the room type ID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.WebSockets.NetworkRoomSet`3.CreateSet(AutoService{`0,`1},Api.Startup.MappingService{`2,System.UInt32})">
            <summary>
            Creates a network room set.
            </summary>
            <param name="svc"></param>
            <param name="mapping"></param>
            <returns></returns>
        </member>
        <member name="M:Api.WebSockets.NetworkRoomSet`3.ForwardToRoom(System.UInt64,Api.SocketServerLibrary.Writer)">
            <summary>
            Forwards the given complete message to a room in this set.
            </summary>
            <param name="roomId"></param>
            <param name="completeMessage"></param>
        </member>
        <member name="M:Api.WebSockets.NetworkRoomSet`3.#ctor(AutoService{`0,`1},Api.Startup.MappingService{`2,System.UInt32})">
            <summary>
            Creates a network room set.
            </summary>
            <param name="svc"></param>
            <param name="mapping"></param>
        </member>
        <member name="M:Api.WebSockets.NetworkRoomSet`3.SetupTypeId(Api.Contexts.Context)">
            <summary>
            Sets up the network room type ID.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.WebSockets.NetworkRoomSet`3.RoomTypeId">
            <summary>
            The globally unique room type ID.
            </summary>
        </member>
        <member name="P:Api.WebSockets.NetworkRoomSet`3.AllRooms">
            <summary>
            All rooms in this set.
            </summary>
        </member>
        <member name="M:Api.WebSockets.NetworkRoomSet`3.GetRoom(`2)">
            <summary>
            Gets the room for the object with the given ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Api.WebSockets.NetworkRoomSet`3.GetOrCreateRoom(`2)">
            <summary>
            Gets the room for the object with the given ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Api.WebSockets.WebSocketClient">
            <summary>
            A connected websocket client.
            </summary>
        </member>
        <member name="F:Api.WebSockets.WebSocketClient.FirstRoom">
            <summary>
            Linked list of rooms that this client is currently in.
            </summary>
        </member>
        <member name="F:Api.WebSockets.WebSocketClient.LastRoom">
            <summary>
            Linked list of rooms that this client is currently in.
            </summary>
        </member>
        <member name="M:Api.WebSockets.WebSocketClient.LeaveAllRooms">
            <summary>
            Leaves all rooms that this client is in.
            </summary>
        </member>
        <member name="M:Api.WebSockets.WebSocketClient.GetInNetworkRoom(Api.WebSockets.NetworkRoom)">
            <summary>
            Gets the userInRoom for this client in the given room.
            Null if this user is not in the given room.
            </summary>
            <param name="room"></param>
            <returns></returns>
        </member>
        <member name="M:Api.WebSockets.WebSocketClient.GetRoomById(System.UInt32)">
            <summary>
            Gets the UserInRoom for the given custom ID. 
            Can only be obtained if such an ID was actually set in the first place.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Api.WebSockets.WebSocketClient.Close">
            <summary>
            Called when the client dc's (either intentionally or otherwise).
            </summary>
        </member>
        <member name="M:Api.WebSockets.WebSocketClient.SetContext(Api.Contexts.Context)">
            <summary>
            Sets the context on this client.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Api.WebSockets.WebSocketClient.WebSocketService">
            <summary>
            The websocket service.
            </summary>
        </member>
        <member name="T:Api.WebSockets.WebSocketService">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="F:Api.WebSockets.WebSocketService.PersonalRooms">
            <summary>
            The set of personal rooms.
            </summary>
        </member>
        <member name="M:Api.WebSockets.WebSocketService.#ctor(Api.Contexts.ContextService,Api.Users.UserService)">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="M:Api.WebSockets.WebSocketService.GetClientCount">
            <summary>
            Current client count.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Api.WebSockets.WebSocketService.AllClients">
            <summary>
            A set of all clients (only available if configured, or in debug mode).
            </summary>
        </member>
        <member name="M:Api.WebSockets.WebSocketService.Start(Api.Users.UserService)">
            <summary>
            Starts the ws service.
            </summary>
        </member>
        <member name="M:Api.WebSockets.WebSocketService.GetMeta(System.String)">
            <summary>
            Gets meta by the given lowercase name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:Api.WebSockets.WebSocketService.RemoteTypes">
            <summary>
            The registered remote types in this websocket service. These types are things that end users can tune into updates from.
            </summary>
        </member>
        <member name="M:Api.WebSockets.WebSocketService.EmptyRoomLocally(System.String,System.UInt64)">
            <summary>
            Forcefully empties the room of the given type.
            </summary>
            <param name="typeName"></param>
            <param name="roomId"></param>
        </member>
        <member name="M:Api.WebSockets.WebSocketService.RegisterRoomClient(System.String,System.UInt32,System.UInt64,Api.WebSockets.WebSocketClient,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Adds a network room client.
            </summary>
            <param name="typeName"></param>
            <param name="customId"></param>
            <param name="roomId"></param>
            <param name="client"></param>
            <param name="filter"></param>
        </member>
        <member name="T:Api.WebSockets.WebSocketServiceConfig">
            <summary>
            Config for WS service.
            </summary>
        </member>
        <member name="P:Api.WebSockets.WebSocketServiceConfig.TrackAllClients">
            <summary>
            True if all clients should be available via websocketservice.AllClients.
            </summary>
        </member>
        <member name="T:Api.Contexts.UserAuthenticationExtensions">
            <summary>
            Extensions to enable custom cookie based authentication.
            </summary>
        </member>
        <member name="M:Api.Contexts.UserAuthenticationExtensions.GetContext(Microsoft.AspNetCore.Http.HttpRequest,Api.Signatures.KeyPair)">
            <summary>
            Gets the user ID for the currently authenticated user. It's 0 if they're not logged in.
            </summary>
            <param name="request"></param>
            <param name="keyPair">Optionaly keypair to use to check the HMAC.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Contexts.Context">
            <summary>
            A context constructed primarily from a cookie value. 
            Uses other locale hints such as Accept-Lang when the user doesn't specifically have one set in the cookie.
            </summary>
            <summary>
            A context constructed primarily from a cookie value. 
            Uses other locale hints such as Accept-Lang when the user doesn't specifically have one set in the cookie.
            </summary>
        </member>
        <member name="F:Api.Contexts.Context.ImpersonationCookieName">
            <summary>
            Main cookie name (when impersonating)
            </summary>
        </member>
        <member name="M:Api.Contexts.Context.#ctor">
            <summary>
            Create a default anonymous context.
            </summary>
        </member>
        <member name="F:Api.Contexts.Context._contextService">
            <summary>
            A date in the past used to set expiry on cookies.
            </summary>
        </member>
        <member name="F:Api.Contexts.Context.IgnorePermissions">
            <summary>
            Don't set this! Use the Options argument on e.g. aService.List calls - it will manage this field for you. True if this context will skip permissions checking.
            </summary>
        </member>
        <member name="F:Api.Contexts.Context.PermitEditedUtcChange">
            <summary>
            Set to false if editedUtc values shouldn't be updated.
            </summary>
        </member>
        <member name="M:Api.Contexts.Context.CreateToken">
            <summary>
            Generates a new token for this ctx. Typically put into a cookie.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Contexts.Context.#ctor(Api.Permissions.Role)">
            <summary>
            Create a context for no particular user but with the given role.
            </summary>
            <param name="role"></param>
        </member>
        <member name="F:Api.Contexts.Context._roleId">
            <summary>
            Underlying role ID.
            </summary>
        </member>
        <member name="P:Api.Contexts.Context.RoleId">
            <summary>
            The role ID from the token.
            </summary>
        </member>
        <member name="F:Api.Contexts.Context._role">
            <summary>
            Full role object.
            </summary>
        </member>
        <member name="P:Api.Contexts.Context.Role">
            <summary>
            Role. Null indicates a broken AuthUser instance or user of a Role ID which probably hasn't been setup.
            </summary>
        </member>
        <member name="M:Api.Contexts.Context.CreateRemoteToken(System.String,Api.Signatures.KeyPair)">
            <summary>
            Creates a remote token for this context. 
            Essentially, this allows this context to be used on a remote thirdparty system, provided 
            that the remote system has permitted the public key of the given keypair by adding it to its SignatureService Hosts config.
            </summary>
            <param name="hostName"></param>
            <param name="keyPair"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Contexts.Context.SendToken(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            Sends a token as both a header and a cookie for the given response.
            </summary>
            <param name="response"></param>
        </member>
        <member name="F:Api.Contexts.Context._localeId">
            <summary>
            Underlying locale ID.
            </summary>
        </member>
        <member name="P:Api.Contexts.Context.LocaleId">
            <summary>
            The current locale or the site default.
            </summary>
        </member>
        <member name="F:Api.Contexts.Context._locale">
            <summary>
            The full locale object, if it has been requested.
            </summary>
        </member>
        <member name="M:Api.Contexts.Context.GetLocale">
            <summary>
            Gets the locale for this context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Contexts.Context.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Create a context for no particular user but with the given role.
            </summary>
            <param name="roleId"></param>
            <param name="userId"></param>
            <param name="localeId"></param>
        </member>
        <member name="M:Api.Contexts.Context.#ctor(System.UInt32,Api.Users.User,System.UInt32)">
            <summary>
            Create a context for no particular user but with the given role.
            </summary>
            <param name="roleId"></param>
            <param name="user"></param>
            <param name="localeId"></param>
        </member>
        <member name="F:Api.Contexts.Context._userId">
            <summary>
            Underlying user ID.
            </summary>
        </member>
        <member name="P:Api.Contexts.Context.UserId">
            <summary>
             The logged in users ID.
            </summary>
        </member>
        <member name="F:Api.Contexts.Context._user">
            <summary>
            The full user object, if it has been requested.
            </summary>
        </member>
        <member name="P:Api.Contexts.Context.User">
            <summary>
            Get the user associated to this login token.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Contexts.ContextFieldInfo">
            <summary>
            Stores info about publicly settable context fields.
            </summary>
            <summary>
            Stores info about publicly settable context fields.
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextFieldInfo.Property">
            <summary>
            The source prop.
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextFieldInfo.SkipOutput">
            <summary>
            True if this field should be skipped. RoleId is always obtained through the user row so it is skipped for example.
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextFieldInfo.PrivateFieldInfo">
            <summary>
            Private backing field. Name must be of the form _propertyName.
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextFieldInfo.Name">
            <summary>
            Full name.
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextFieldInfo.Shortcode">
            <summary>
            Shortcode of this field.
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextFieldInfo.DefaultValue">
            <summary>
            Default field value.
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextFieldInfo.ContentTypeId">
            <summary>
            The content type ID of the content of this field.
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextFieldInfo.Service">
            <summary>
            The service for this field. Set on demand internally inside ContextService.
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextFieldInfo.JsonFieldHeader">
            <summary>
            E.g. "user":
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextFieldInfo.ViewCapability">
            <summary>
            The capability which indicates if the field can be loaded.
            </summary>
        </member>
        <member name="T:Api.Contexts.ContextFields">
            <summary>
            Holds useful information about Context objects.
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextFields.FieldsByShortcode">
            <summary>
            Fields by the shortcode, which is usually the first character of a context field name.
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextFields.Fields">
            <summary>
            Maps lowercase field names to the info about them.
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextFields.FieldList">
            <summary>
            The raw list of fields.
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextFields.ContentTypeToFieldInfo">
            <summary>
            Maps a content type ID to the context field info. Your context property must end with 'Id' to get an entry here.
            </summary>
        </member>
        <member name="T:Api.Contexts.ContextService">
            <summary>
            Used to establish primary user context - role, locale and the user ID - when possible.
            This is signature based - it doesn't generate any database traffic.
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextService.NullText">
            <summary>
            "null"
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextService.VersionField">
            <summary>
            "1"
            </summary>
        </member>
        <member name="M:Api.Contexts.ContextService.#ctor(Api.Signatures.SignatureService,Api.Users.UserService)">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="M:Api.Contexts.ContextService.ToJson(Api.Contexts.Context,System.IO.Stream)">
            <summary>
            Serialises the given context.
            </summary>
            <param name="context"></param>
            <param name="targetStream"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Contexts.ContextService.ToJson(Api.Contexts.Context,Api.SocketServerLibrary.Writer)">
            <summary>
            Serialises the given context into the given writer.
            </summary>
            <param name="context"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Contexts.ContextService.ToJsonString(Api.Contexts.Context)">
            <summary>
            Serialises the given context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Contexts.ContextService.ToJsonString(Api.Contexts.Context,Api.SocketServerLibrary.Writer)">
            <summary>
            Serialises the given context.
            </summary>
            <param name="context"></param>
            <param name="writer">A stream to write the JSON string to.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Contexts.ContextService.FieldByContentType(System.Int32)">
            <summary>
            Gets Context field info for the given contentType. Null if it doesn't exist in Context.
            </summary>
        </member>
        <member name="P:Api.Contexts.ContextService.ImpersonationCookieName">
            <summary>
            The name of the cookie in use.
            </summary>
        </member>
        <member name="P:Api.Contexts.ContextService.CookieName">
            <summary>
            The name of the cookie in use.
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextService._domains">
            <summary>
            Cookie domain
            </summary>
        </member>
        <member name="M:Api.Contexts.ContextService.GetDomain(System.UInt32)">
            <summary>
            Cookie domain to use
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Contexts.ContextService.Get(System.String,Api.Signatures.KeyPair)">
            <summary>
            Gets a login token from the given cookie text.
            </summary>
            <param name="tokenStr"></param>
            <param name="customKeyPair">Key pair to use when checking the signature. If null, this uses the internal one used by signature service.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Contexts.ContextService.CreateToken(Api.Contexts.Context)">
            <summary>
            Creates a signed token for the given context.
            </summary>
            <param name="context">The context to create the token for.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Contexts.ContextService.CreateRemoteToken(Api.Contexts.Context,System.String,Api.Signatures.KeyPair)">
            <summary>
            Creates a token for accessing a remote site which permits access to the given hostname.
            The given keypair must contain the private key that we'll use, and the remote system must have the public key in its SignatureService Hosts config.
            </summary>
            <param name="context">The context to create the token for.</param>
            <param name="hostName">If provided, a hostname to use in the token. 
            You can define a lookup of remote public keys in your SignatureService config, 
            allowing third party systems to create valid tokens. This hostname is the key in that lookup.</param>
            <param name="keyPair">A keypair just for the purpose of accessing the remote host. 
            It must not be the same as the main keypair for this site.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Contexts.ContextShortcodeAttribute">
            <summary>
            Add [ContextShortcode(..)] attributes to declare the specific shortcode for a context field.
            </summary>
        </member>
        <member name="F:Api.Contexts.ContextShortcodeAttribute.Shortcode">
            <summary>
            a-z or A-Z shortcode of this ctx field.
            </summary>
        </member>
        <member name="T:Api.Database.DatabaseTableDefinition">
            <summary>
            A database table definition.
            Used during startup table sync.
            </summary>
        </member>
        <member name="M:Api.Database.DatabaseTableDefinition.CreateTableSql">
            <summary>
            Generates a create table SQL command to add this table.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.Database.DatabaseTableDefinition.TableName">
            <summary>
            The name of this table.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseTableDefinition.OwningType">
            <summary>
            The system type that this table relates to. I.e. if it's the user table, this is typeof(User)
            </summary>
        </member>
        <member name="M:Api.Database.DatabaseTableDefinition.GetGroupName">
            <summary>
            Group name from the defining type, if there is one.
            </summary>
        </member>
        <member name="M:Api.Database.DatabaseTableDefinition.RemoveColumn(Api.Database.DatabaseColumnDefinition)">
            <summary>
            Removes the given column from this table definition.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Api.Database.DatabaseTableDefinition.AddColumn(Api.Database.DatabaseColumnDefinition)">
            <summary>
            Adds the given column to this table definition.
            </summary>
            <param name="column"></param>
        </member>
        <member name="F:Api.Database.DatabaseTableDefinition.Columns">
            <summary>
            The columns in this table.
            </summary>
        </member>
        <member name="M:Api.Database.DatabaseTableDefinition.GetColumn(System.String)">
            <summary>
            Gets a column by its case insensitive name. Null if it doesn't exist.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.DatabaseTableDefinition.Diff(Api.Database.DatabaseTableDefinition)">
            <summary>
            Compares this table to the given 'newer' definition.
            </summary>
            <param name="newTable"></param>
            <returns>Null if no changes have been detected.</returns>
        </member>
        <member name="T:Api.Database.DatabaseType">
            <summary>
            Declares a field type within a database. varchar, int, bigint etc.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseType.TypeNameWithLength">
            <summary>
            Optional - used to declare an alternate database type to use if a length is present.
            For example, TypeName is "text" and this field is "varchar" - indicating that we'll use varchar
            if a field length is specified.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseType.LargeLengthThreshold">
            <summary>
            Lengths above this threshold will trigger the column type to be TypeNameWithLargeLength instead.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseType.TypeNameWithLargeLength">
            <summary>
            Optional - used to declare an alternate database type to use if a length is present.
            For example, TypeName is "text" and this field is "varchar" - indicating that we'll use varchar
            if a field length is specified.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseType.TypeName">
            <summary>
            The name of the type - int, bigint, text etc.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseType.IsUnsigned">
            <summary>
            True if this type is unsigned.
            </summary>
        </member>
        <member name="M:Api.Database.DatabaseType.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new database type definition.
            </summary>
            <param name="typeName"></param>
            <param name="typeNameWithLength"></param>
            <param name="typeWithLargeLength"></param>
        </member>
        <member name="M:Api.Database.DatabaseType.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new database type definition.
            </summary>
        </member>
        <member name="T:Api.Database.DatabaseVersion">
            <summary>
            Used to get the version of MySQL.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseVersion.Version">
            <summary>
            The version string.
            </summary>
        </member>
        <member name="T:Api.Database.Init">
            <summary>
            Instances capabilities during the very earliest phases of startup.
            </summary>
        </member>
        <member name="F:Api.Database.Init.VersionCheckResult">
            <summary>
            True if the DB version has been checked.
            </summary>
        </member>
        <member name="F:Api.Database.Init.CurrentDbSchema">
            <summary>
            The current schema for the database.
            </summary>
        </member>
        <member name="F:Api.Database.Init.VersionText">
            <summary>
            Database version text.
            </summary>
        </member>
        <member name="M:Api.Database.Init.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="M:Api.Database.Init.SetupService``2(AutoService{``0,``1})">
            <summary>
            Sets up for the given type with its event group along with updating any DB tables.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
            <param name="service"></param>
        </member>
        <member name="M:Api.Database.Init.TryCheckVersion">
            <summary>
            Checks the DB version to see if we can auto handle schemas.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Database.Init.LoadSchema">
            <summary>
            Loads the complete DB schema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Database.Init.HandleDatabaseType(AutoService)">
            <summary>
            Sets up the table(s) for the given type.
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Database.MySQLDatabaseColumnDefinition">
            <summary>
            A column definition within a database.
            </summary>
        </member>
        <member name="F:Api.Database.MySQLDatabaseColumnDefinition.DataType">
            <summary>
            The format data type, e.g. "varchar".
            </summary>
        </member>
        <member name="F:Api.Database.MySQLDatabaseColumnDefinition.IsAutoIncrement">
            <summary>
            True if this is an auto-inc column. Usually only applies to Id.
            </summary>
        </member>
        <member name="F:Api.Database.MySQLDatabaseColumnDefinition.MaxCharacters">
            <summary>
            Varchar and varbinary mainly - the max number of characters. varchar(x).
            </summary>
        </member>
        <member name="F:Api.Database.MySQLDatabaseColumnDefinition.MaxCharacters2">
            <summary>
            Typically used by e.g. decimal(MaxCharacters2, MaxCharacters). If you only specify one length, that'll be the amount of digits after the decimal point.
            </summary>
        </member>
        <member name="F:Api.Database.MySQLDatabaseColumnDefinition.IsUnsigned">
            <summary>
            True if this is a numeric field which is unsigned.
            </summary>
        </member>
        <member name="M:Api.Database.MySQLDatabaseColumnDefinition.#ctor">
            <summary>
            Creates a new MySQL column def
            </summary>
        </member>
        <member name="M:Api.Database.MySQLDatabaseColumnDefinition.#ctor(Api.Database.Field,System.String)">
            <summary>
            Creates a new MySQL column def for the field
            </summary>
        </member>
        <member name="M:Api.Database.MySQLDatabaseColumnDefinition.TypeAsSql">
            <summary>
            Gets e.g. "varchar(200) not null" - the data type as universal SQL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Database.MySQLDatabaseColumnDefinition.AlterTableSql(System.Boolean,System.String)">
            <summary>
            Generates alter table SQL for this column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Database.MySQLDatabaseColumnDefinition.CreateTableSql">
            <summary>
            Generates SQL for use in a create table command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Database.MySQLDatabaseColumnDefinition.HasChanged(Api.Database.DatabaseColumnDefinition)">
            <summary>
            True if this columns definition has changed from the given newer one.
            </summary>
            <param name="dcd"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Database.MySQLSchema">
            <summary>
            A database schema.
            Used during startup table sync.
            </summary>
        </member>
        <member name="M:Api.Database.MySQLSchema.TableName(System.String)">
            <summary>
            The table name to use for a particular type.
            This is generally used on types which are DatabaseRow instances.
            </summary>
        </member>
        <member name="M:Api.Database.MySQLSchema.CreateAllSql">
            <summary>
            Generates SQL which will add all the tables in this schema. Requires multi-command capability.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Database.MySQLSchema.AddColumn(Api.Database.Field)">
            <summary>
            Add a column to the schema. Returns null if the column was ignored due to the dbfield attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Database.MySQLDatabaseService">
            <summary>
            MySQL database service.
            Connects to a database with the given connection string.
            </summary>
        </member>
        <member name="P:Api.Database.MySQLDatabaseService.ConnectionString">
            <summary>
            The connection string to use.
            </summary>
        </member>
        <member name="P:Api.Database.MySQLDatabaseService.Schema">
            <summary>
            The latest DB schema.
            </summary>
        </member>
        <member name="M:Api.Database.MySQLDatabaseService.#ctor">
            <summary>
            Create a new database connector with the given connection string.
            </summary>
        </member>
        <member name="M:Api.Database.MySQLDatabaseService.LoadFromAppSettings">
            <summary>
            Indicates the connection string should be loaded or reloaded.
            </summary>
        </member>
        <member name="M:Api.Database.MySQLDatabaseService.GetConnection">
            <summary>
            Gets a new database connection. Pools internally.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Database.MySQLDatabaseService.Escape(System.String)">
            <summary>
            Database text escape. You should instead be using the args set (and ? placeholders).
            </summary>
            <param name="text">The text to escape.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.MySQLDatabaseService.BuildInString(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Builds an IN(x,y,z) string using the given value enumerator.
            </summary>
            <param name="intoBuilder"></param>
            <param name="values"></param>
        </member>
        <member name="M:Api.Database.MySQLDatabaseService.Run(System.String)">
            <summary>
            Run a raw query with no arguments. Avoid when possible.
            </summary>
            <param name="query">The query to run.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.MySQLDatabaseService.Run(System.String,System.Int32)">
            <summary>
            Run a raw query with no arguments. Avoid when possible.
            </summary>
            <param name="query">The query to run.</param>
            <param name="timeout">Optional timeout to use.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.MySQLDatabaseService.Run``1(Api.Contexts.Context,Api.Database.Query,System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Usually used for bulk deletes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="q"></param>
            <param name="idsToDelete"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.MySQLDatabaseService.Run``1(Api.Contexts.Context,Api.Database.Query,System.Collections.Generic.List{``0})">
            <summary>
            Used for bulk inserts.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="q"></param>
            <param name="toInsertSet"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.MySQLDatabaseService.Run``2(Api.Contexts.Context,Api.Database.Query,``0,System.Nullable{``1})">
            <summary>
            Runs the given query using the given arguments to bind.
            Does not return any values other than a true/ false if it succeeded.
            </summary>
            <param name="context"></param>
            <param name="q"></param>
            <param name="srcObject"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.MySQLDatabaseService.RunWithId``1(Api.Contexts.Context,Api.Database.Query,``0)">
            <summary>
            Runs the given query using the given ID arg to bind.
            Does not return any values other than a true/ false if it succeeded.
            </summary>
            <param name="context"></param>
            <param name="q"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.MySQLDatabaseService.Select``2(Api.Contexts.Context,Api.Database.Query,System.Type,``1)">
            <summary>
            Runs the given query with the given args to bind. Returns the results mapped as the given object.
            </summary>
            <param name="context"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
            <param name="q"></param>
            <param name="instanceType">The type to instantiate</param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.MySQLDatabaseService.GetResults``2(Api.Contexts.Context,Api.Permissions.QueryPair{``0,``1},System.Func{Api.Contexts.Context,``0,System.Int32,System.Object,System.Object,System.Threading.Tasks.ValueTask},System.Object,System.Object,System.Type,Api.Database.Query)">
            <summary>
            Gets a list of results from the cache, calling the given callback each time one is discovered.
            </summary>
            <param name="context"></param>
            <param name="queryPair">Both filterA and filterB must have values.</param>
            <param name="onResult"></param>
            <param name="srcA"></param>
            <param name="srcB"></param>
            <param name="instanceType"></param>
            <param name="q"></param>
        </member>
        <member name="M:Api.Database.MySQLDatabaseService.List``1(Api.Contexts.Context,Api.Database.Query,System.Type)">
            <summary>
            Runs the given query with the given args to bind. Returns the results mapped as a list of the given type.
            </summary>
            <param name="context"></param>
            <typeparam name="T"></typeparam>
            <param name="q"></param>
            <param name="instanceType">The type to instantiate</param>
            <returns></returns>
        </member>
        <member name="T:Api.Database.Query">
            <summary>
            Extremely similar to WP Query. 
            Essentially an abstraction layer from the underlying database technology.
            Also functions as a place to cache any field mappings or other db handles for performance boosting.
            </summary>
        </member>
        <member name="F:Api.Database.Query.INSERT">
            <summary>
            INSERT queries.
            </summary>
        </member>
        <member name="F:Api.Database.Query.SELECT">
            <summary>
            SELECT queries.
            </summary>
        </member>
        <member name="F:Api.Database.Query.DELETE">
            <summary>
            DELETE queries.
            </summary>
        </member>
        <member name="F:Api.Database.Query.COPY">
            <summary>
            INSERT .. SELECT queries.
            </summary>
        </member>
        <member name="F:Api.Database.Query.Operation">
            <summary>
            The operation to run (insert, select etc).
            </summary>
        </member>
        <member name="F:Api.Database.Query.Raw">
            <summary>
            True if this query gets the 'raw' object or not.
            The raw object is a localised version, exactly as-is from the database.
            </summary>
        </member>
        <member name="F:Api.Database.Query.Fields">
            <summary>
            The field map for any fields that are being inserted/ updated etc.
            Either maps params to object fields or result row fields to object fields
            depending on what the query is being used for.
            </summary>
        </member>
        <member name="F:Api.Database.Query.TransferMap">
            <summary>
            Used when transferring fields between tables (typically a copy statement).
            </summary>
        </member>
        <member name="F:Api.Database.Query._where">
            <summary>
            A custom WHERE .. part of this query.
            </summary>
        </member>
        <member name="F:Api.Database.Query.MainTable">
            <summary>
            Primary table name.
            </summary>
        </member>
        <member name="F:Api.Database.Query.MainEntity">
            <summary>
            Primary table name.
            </summary>
        </member>
        <member name="F:Api.Database.Query.MainTableAs">
            <summary>
            Primary table name with AS followed by the C# entity name.
            </summary>
        </member>
        <member name="F:Api.Database.Query.IdField">
            <summary>
            Id field to write out to.
            </summary>
        </member>
        <member name="F:Api.Database.Query._query">
            <summary>The query to run (cached).</summary>
        </member>
        <member name="F:Api.Database.Query._localisedQuery">
            <summary>
            Language specific variants of the cached query. Generated on demand.
            </summary>
        </member>
        <member name="M:Api.Database.Query.SetMainTable(System.String)">
            <summary>
            Sets the MainTable and MainTableAs fields.
            </summary>
            <param name="entityName">The entity name.</param>
        </member>
        <member name="P:Api.Database.Query.IsInsert">
            <summary>
            True if this is an INSERT query.
            </summary>
        </member>
        <member name="P:Api.Database.Query.IsCopy">
            <summary>
            True if this is an INSERT .. SELECT query.
            </summary>
        </member>
        <member name="P:Api.Database.Query.IsSelect">
            <summary>
            True if this is a SELECT query.
            </summary>
        </member>
        <member name="P:Api.Database.Query.IsDelete">
            <summary>
            True if this is a DELETE query.
            </summary>
        </member>
        <member name="M:Api.Database.Query.#ctor">
            <summary>
            Use Query.Select etc instead.
            </summary>
        </member>
        <member name="M:Api.Database.Query.#ctor(System.String)">
            <summary>
            Use Query.Select etc instead.
            </summary>
            <param name="entityName"></param>
        </member>
        <member name="M:Api.Database.Query.RemoveField(System.String)">
            <summary>
            Removes a field by its case-sensitive name.
            Returns it if it was removed.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.Query.AddField(Api.Database.Field)">
            <summary>
            Adds a new field to this query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Database.Query.GetField(System.String)">
            <summary>
            Finds a field with the given name. Null if not found.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.Query.ApplyQuery``2(Api.Contexts.Context,MySql.Data.MySqlClient.MySqlCommand,Api.Permissions.QueryPair{``0,``1},System.Boolean,System.UInt32,System.String,System.Boolean)">
            <summary>
            Builds the underlying query to run. QueryPair must be fully populated.
            </summary>
        </member>
        <member name="M:Api.Database.Query.GetQuery(System.Boolean,System.UInt32,System.String,System.Boolean)">
            <summary>
            Builds the underlying query to run.
            </summary>
        </member>
        <member name="M:Api.Database.Query.Copy(Api.Database.FieldTransferMap)">
            <summary>
            Generates an insert into {target} {target fields from the map} select {mapped fields} from {source} query.
            </summary>
        </member>
        <member name="M:Api.Database.Query.Select(System.Type,System.String)">
            <summary>
            Generates a select * from rowType.TableName() query.
            Defaults to using where Id=? unless you use a custom where override.
            </summary>
        </member>
        <member name="M:Api.Database.Query.List(System.Type,System.String)">
            <summary>
            The same as select, only it doesn't use a where constraint.
            </summary>
        </member>
        <member name="M:Api.Database.Query.Where(System.String)">
            <summary>
            Start building a custom WHERE filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Database.Query.Insert(System.Type,System.String,System.Boolean)">
            <summary>
            Generates a insert into rowType.TableName() (field,field..) values(?,?,?..) query.
            rowType should be a DatabaseRow derived type. The type of data that will be getting inserted.
            </summary>
        </member>
        <member name="M:Api.Database.Query.Delete(System.Type,System.String)">
            <summary>
            Generates a delete from rowType.TableName() query.
            Defaults to using where Id=? unless you use a custom where override.
            Type should be a DatabaseRow derived type. The type of data that will be getting deleted.
            </summary>
        </member>
        <member name="M:Api.Database.Query.SetRawQuery(System.String)">
            <summary>
            Sets a raw query to run. Avoid using this when possible.
            </summary>
            <param name="qry"></param>
        </member>
        <member name="M:Api.Database.Query.RemoveAllBut(System.String[])">
            <summary>
            Remove all fields except the named ones.
            </summary>
            <param name="fieldNames"></param>
        </member>
        <member name="T:Api.Database.Content`1">
            <summary>
            Used to represent an entity which can either be stored in the cache only or in the database.
            By default, unless you specify [CacheOnly] on your type, the entity will be stored in the database.
            A database table will always have the columns defined here as fields.
            Will often be ContentType{int}
            </summary>
            <typeparam name="ID">The type of ID of your entity. Usually int.</typeparam>
        </member>
        <member name="F:Api.Database.Content`1.Id">
            <summary>
            The row ID.
            </summary>
        </member>
        <member name="P:Api.Database.Content`1.Type">
            <summary>
            The name of the type. Can be used to obtain the content ID.
            </summary>
        </member>
        <member name="M:Api.Database.Content`1.GetId">
            <summary>
            Gets the ID of this row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Database.Content`1.SetId(`0)">
            <summary>
            Sets the ID of this row.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Database.ContentTypeAndId">
            <summary>
            A struct of content type and content ID.
            </summary>
        </member>
        <member name="F:Api.Database.ContentTypeAndId.ContentTypeId">
            <summary>
            Content type. See also: ContentTypes class.
            </summary>
        </member>
        <member name="F:Api.Database.ContentTypeAndId.ContentId">
            <summary>
            Content Id.
            </summary>
        </member>
        <member name="M:Api.Database.ContentTypeAndId.#ctor(System.Int32,System.UInt32)">
            <summary>
            Creates a content type and ID struct (in that order).
            </summary>
            <param name="contentTypeId"></param>
            <param name="id"></param>
        </member>
        <member name="M:Api.Database.ContentTypeAndId.GetHashCode">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Database.ContentTypeAndId.Equals(System.Object)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Database.ContentTypeAndId.Equals(Api.Database.ContentTypeAndId)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Database.ContentTypeAndId.op_Equality(Api.Database.ContentTypeAndId,Api.Database.ContentTypeAndId)">
            <summary>
            Equals convenience shortcut.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.ContentTypeAndId.op_Inequality(Api.Database.ContentTypeAndId,Api.Database.ContentTypeAndId)">
            <summary>
            Not equals convenience shortcut.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Database.ContentTypeMeta">
            <summary>
            Metadata about a content type, such as its ID, the service and the type.
            </summary>
        </member>
        <member name="F:Api.Database.ContentTypeMeta.Name">
            <summary>
            Content type name.
            </summary>
        </member>
        <member name="F:Api.Database.ContentTypeMeta.ContentType">
            <summary>
            Content type.
            </summary>
        </member>
        <member name="F:Api.Database.ContentTypeMeta.Id">
            <summary>
            The ID.
            </summary>
        </member>
        <member name="F:Api.Database.ContentTypeMeta.Service">
            <summary>
            The service.
            </summary>
        </member>
        <member name="T:Api.Database.ContentTypes">
            <summary>
            Types - which must inherit DatabaseRow - can be assigned a numeric ID.
            This numeric ID - the ContentTypeId - is used in a variety of modules (reactions, comments, uploads etc)
            to identify content being related to other content.
            </summary>
        </member>
        <member name="F:Api.Database.ContentTypes.Locales">
            <summary>
            The supported locale set, indexed by locale ID-1. Can be null.
            </summary>
        </member>
        <member name="F:Api.Database.ContentTypes.Map">
            <summary>
            A set of all available content types from lowercase name to ID. Use GetId rather than this directly.
            </summary>
        </member>
        <member name="F:Api.Database.ContentTypes.TypeMap">
            <summary>
            A set of all available content types from lowercase name to ID. Use GetId rather than this directly.
            </summary>
        </member>
        <member name="F:Api.Database.ContentTypes.ReverseMap">
            <summary>
            Reverse mapping from ID to type name.
            Setup during DB service startup.
            </summary>
        </member>
        <member name="M:Api.Database.ContentTypes.IsPersistentType(System.Type)">
            <summary>
            True if the given type is a persistent type (i.e. if it should be stored in the database or not).
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.ContentTypes.StateChange(System.Boolean,AutoService,System.Type)">
            <summary>
            Adds or removes the given type from the lookups.
            </summary>
            <param name="active">True if it's now active, false if it's inactive.</param>
            <param name="service">The content types parent service.</param>
            <param name="type">The contentType.</param>
        </member>
        <member name="M:Api.Database.ContentTypes.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            True if the given type is assignable to the given "open" generic type.
            </summary>
            <param name="givenType"></param>
            <param name="genericType"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.ContentTypes.IsAssignableToGenericType(System.Type,System.Type,System.Type@)">
            <summary>
            True if the given type is assignable to the given "open" generic type.
            </summary>
            <param name="givenType"></param>
            <param name="genericType"></param>
            <param name="concreteType"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.ContentTypes.IsContentType(System.Type)">
            <summary>
            True if given type is a content type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.ContentTypes.GetType(System.String)">
            <summary>
            Gets a content type from its name. E.g. "Forum" -> typeof(Apis.Forums.Forum).
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.ContentTypes.GetType(System.Int32)">
            <summary>
            Gets a content type from its ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.ContentTypes.GetId(System.String)">
            <summary>
            Gets the ContentTypeId from the type name. Just a hash number function.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.ContentTypes.GetId(System.Type)">
            <summary>
            Gets the content ID for the given system type.
            The type itself should be a DatabaseRow derivative - e.g. typeof(User).
            </summary>
            <param name="systemType"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Database.DatabaseFieldAttribute">
            <summary>
            Use this to declare a field's varchar/ varbinary character length.
            If you want your field to be ignored, make it private and use a public property to optionally expose it.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseFieldAttribute.Length">
            <summary>
            Length of the field value
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseFieldAttribute.Length2">
            <summary>
            Secondary length of the field value, used for decimal fields and similar.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseFieldAttribute.PreviousNames">
            <summary>
            Previous field names, if any.
            </summary>
        </member>
        <member name="P:Api.Database.DatabaseFieldAttribute.AutoIncWasSet">
            <summary>
            True if the attribute explicitly set the AutoIncrement field.
            </summary>
        </member>
        <member name="P:Api.Database.DatabaseFieldAttribute.AutoIncrement">
            <summary>
            Use this to declare a column as auto increment.
            If you set it to false on your class, it will block the Id field from being auto increment too.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseFieldAttribute.Ignore">
            <summary>
            Indicates that this field should just be ignored entirely.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseFieldAttribute.Group">
            <summary>
            Class only: Table group name if the underlying storage supports or uses them.
            </summary>
        </member>
        <member name="M:Api.Database.DatabaseFieldAttribute.#ctor(System.String)">
            <summary>
            Indicate that this content type should be stored in the given storage group.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Api.Database.DatabaseFieldAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Typically used for decimals. 
            </summary>
            <param name="afterDecimal"></param>
            <param name="totalLength"></param>
        </member>
        <member name="T:Api.Database.DatabaseIndexAttribute">
            <summary>
            Use this to declare an index. If applied to a class, it can have one or more fields.
            [DatabaseField] will default to a unique index of the field it's on.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseIndexAttribute.Direction">
            <summary>
             Can be either ASC or DESC.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseIndexAttribute.Unique">
            <summary>
            True if this is a unique index.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseIndexAttribute.Fields">
            <summary>
            The fields in this index (case sensitive).
            </summary>
        </member>
        <member name="M:Api.Database.DatabaseIndexAttribute.#ctor(System.String[])">
            <summary>
            Typically used to declare an index in the database consisting of one or more fields.
            </summary>
        </member>
        <member name="M:Api.Database.DatabaseIndexAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            A unique or non-unique index for the given field.
            </summary>
            <param name="unique"></param>
            <param name="field"></param>
        </member>
        <member name="T:Api.Database.DatabaseIndexInfo">
            <summary>
            Information about a particular index.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseIndexInfo.Id">
            <summary>
            The ID for this dbi.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseIndexInfo.Columns">
            <summary>
            The underlying columns in the index. Almost always just one.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseIndexInfo.IndexName">
            <summary>
            A generated index name.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseIndexInfo.Unique">
            <summary>
            True if it's a unique index. True is the default.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseIndexInfo.Direction">
            <summary>
            either "ASC" or "DESC" declaring the sort direction of the index. ASC is the default.
            </summary>
        </member>
        <member name="M:Api.Database.DatabaseIndexInfo.#ctor(Api.Database.DatabaseIndexAttribute,Api.Startup.ContentField[])">
            <summary>
            Creates index info based on the given class attribute.
            It's expected to define the column names.
            </summary>
        </member>
        <member name="M:Api.Database.DatabaseIndexInfo.CreateIndex``1">
            <summary>
            Instances an index of this type. Note that the given type param, T, can only be one type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Api.Database.ChangedColumn">
            <summary>
            Represents a changed database column.
            </summary>
        </member>
        <member name="F:Api.Database.ChangedColumn.FromColumn">
            <summary>
            The column as it currently is in the database.
            </summary>
        </member>
        <member name="F:Api.Database.ChangedColumn.ToColumn">
            <summary>
            The column as it will be.
            </summary>
        </member>
        <member name="T:Api.Database.DatabaseColumnDefinition">
            <summary>
            A column definition within a database.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseColumnDefinition.TableName">
            <summary>
            The name of the table this column is in.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseColumnDefinition.ColumnName">
            <summary>
            The columns name.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseColumnDefinition.IsNullable">
            <summary>
            True if it's nullable.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseColumnDefinition.OwningType">
            <summary>
            The type that 'owns' this column.
            </summary>
        </member>
        <member name="P:Api.Database.DatabaseColumnDefinition.Ignore">
            <summary>
            True if this field should just be ignored.
            </summary>
        </member>
        <member name="P:Api.Database.DatabaseColumnDefinition.FieldType">
            <summary>
            C# type of the field value.
            </summary>
        </member>
        <member name="F:Api.Database.DatabaseColumnDefinition.PreviousNames">
            <summary>
            Previous column names, if there are any.
            </summary>
        </member>
        <member name="M:Api.Database.DatabaseColumnDefinition.#ctor">
            <summary>
            Create a new database column definition.
            </summary>
        </member>
        <member name="M:Api.Database.DatabaseColumnDefinition.#ctor(Api.Database.Field,System.String)">
            <summary>
            Create a new database column definition from a given field for a particular table.
            </summary>
        </member>
        <member name="M:Api.Database.DatabaseColumnDefinition.HasChanged(Api.Database.DatabaseColumnDefinition)">
            <summary>
            True if this columns definition has changed from the given newer one.
            </summary>
            <param name="newColumn"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Database.DiffSet`2">
            <summary>
            Represents a set of changes.
            </summary>
        </member>
        <member name="F:Api.Database.DiffSet`2.Added">
            <summary>
            A list of things that were added.
            </summary>
        </member>
        <member name="F:Api.Database.DiffSet`2.Changed">
            <summary>
            A list of things that were changed.
            </summary>
        </member>
        <member name="F:Api.Database.DiffSet`2.Removed">
            <summary>
            A list of things that were removed.
            </summary>
        </member>
        <member name="T:Api.Database.Schema">
            <summary>
            A database schema.
            Used during startup table sync.
            </summary>
        </member>
        <member name="F:Api.Database.Schema.Tables">
            <summary>
            The tables in this schema.
            </summary>
        </member>
        <member name="M:Api.Database.Schema.GetColumn(System.String,System.String)">
            <summary>
            Gets a column or null if it didn't exist.
            </summary>
            <param name="table"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.Schema.GetTable(System.String,System.Boolean)">
            <summary>
            Gets a table by its case insensitive name. Creates it if it doesn't exist.
            </summary>
            <param name="name"></param>
            <param name="createIfNotExists"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.Schema.AddColumn(Api.Database.Field)">
            <summary>
            Add a column to the schema. Returns null if the column was ignored due to the dbfield attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Database.Schema.Diff(Api.Database.Schema)">
            <summary>
            Compares this schema with the given "newer" one to declare tables that have been added etc.
            </summary>
            <param name="newSchema"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.Schema.Add(System.Collections.Generic.List{Api.Database.DatabaseColumnDefinition})">
            <summary>
            Adds the given columns to this schema, building up the individual tables as needed.
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:Api.Database.Schema.Add(Api.Database.DatabaseColumnDefinition)">
            <summary>
            Adds the given column definition to this schema, setting it into the correct table.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Api.Database.Schema.Remove(Api.Database.DatabaseColumnDefinition)">
            <summary>
            Removes the given column definition from this schema.
            </summary>
            <param name="column"></param>
        </member>
        <member name="T:Api.Database.Field">
            <summary>
            Stores details about a DatabaseRow child type field.
            </summary>
        </member>
        <member name="F:Api.Database.Field.OwningType">
            <summary>
            The type that this field is part of.
            This isn't the same as TargetField.DeclaringType (specifically because Id is declared elsewhere, but is "owned" by the row type).
            </summary>
        </member>
        <member name="F:Api.Database.Field.Type">
            <summary>
            The type of this fields value (int, string etc).
            </summary>
        </member>
        <member name="F:Api.Database.Field.TargetField">
            <summary>
            The field where the value is set to/get from.
            </summary>
        </member>
        <member name="F:Api.Database.Field.Name">
            <summary>
            The name of this field.
            </summary>
        </member>
        <member name="F:Api.Database.Field.FullName">
            <summary>
            The full name of this field. OwningTypeName.`Name`
            </summary>
        </member>
        <member name="F:Api.Database.Field.OwningTypeName">
            <summary>
            The owning type name to use.
            </summary>
        </member>
        <member name="F:Api.Database.Field.LocalisedName">
            <summary>
            The full name of this field, except it ends with an underscore. OwningType.Name.`Name_
            </summary>
        </member>
        <member name="F:Api.Database.Field.IsPrice">
            <summary>
            Does this field have a price attribute? If so, do not use default locale value if null
            </summary>
        </member>
        <member name="F:Api.Database.Field.TargetFieldCustomAttributes">
            <summary>
            Attributes on the field/ property (if any). Can be null.
            </summary>
        </member>
        <member name="M:Api.Database.Field.#ctor(System.Type,System.String)">
            <summary>
            Creates a new empty field
            </summary>
        </member>
        <member name="M:Api.Database.Field.#ctor(System.Type,System.Reflection.FieldInfo,System.String)">
            <summary>
            Creates a new field for the given owning type and field info, with optional field name.
            </summary>
        </member>
        <member name="M:Api.Database.Field.IsNullable">
            <summary>
            True if this fields value is a nullable type. Either it is a reference type, or Nullable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Database.Field.SetFullName(System.String)">
            <summary>
            Updates the FullName and LocalisedName fields.
            </summary>
        </member>
        <member name="M:Api.Database.Field.Clone">
            <summary>
            Creates a clone of this field.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Database.FieldMap">
            <summary>
            Retains a fast lookup for fields of particular types.
            These are stored in the Query objects and essentially map name to the raw field.
            </summary>
        </member>
        <member name="F:Api.Database.FieldMap.Type">
            <summary>
            The type that this is a map for.
            </summary>
        </member>
        <member name="M:Api.Database.FieldMap.#ctor(System.Type,System.String)">
            <summary>
            The field map for the given type. It should inherit DatabaseRow.
            </summary>
        </member>
        <member name="F:Api.Database.FieldMap.Fields">
            <summary>
            All the fields in this map.
            </summary>
        </member>
        <member name="F:Api.Database.FieldMap.Lookup">
            <summary>
            Name lookup.
            </summary>
        </member>
        <member name="M:Api.Database.FieldMap.RemoveAllBut(System.String[])">
            <summary>
            Remove all fields except the named ones.
            </summary>
            <param name="fieldNames"></param>
        </member>
        <member name="M:Api.Database.FieldMap.Find(System.String)">
            <summary>
            Finds a field with the given name. Null if not found.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Database.FieldMap.Add(Api.Database.Field)">
            <summary>
            Adds a field to this map.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Api.Database.FieldMap.Remove(System.String)">
            <summary>
            Remove a field from the map.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Api.Database.FieldMap.Count">
            <summary>
            The number of fields in this map.
            </summary>
        </member>
        <member name="P:Api.Database.FieldMap.Item(System.Int32)">
            <summary>
            Gets a field by its index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Database.FieldTransferMap">
            <summary>
            A mapping of from -> to fields.
            </summary>
        </member>
        <member name="F:Api.Database.FieldTransferMap.Transfers">
            <summary>
            The set of transfers.
            </summary>
        </member>
        <member name="M:Api.Database.FieldTransferMap.Add(System.Type,System.String,System.String,System.Type,System.String,System.String)">
            <summary>
            Adds a transfer to this map.
            </summary>
            <param name="fromType"></param>
            <param name="fromTypeName">Not necessarily the same as fromType.Name (it's different in the case of a mapping).</param>
            <param name="fromFieldName"></param>
            <param name="toType"></param>
            <param name="toTypeName">Not necessarily the same as toType.Name (it's different in the case of a mapping).</param>
            <param name="toFieldName"></param>
        </member>
        <member name="M:Api.Database.FieldTransferMap.AddConstant(System.Type,System.String,System.String,System.Object)">
            <summary>
            Puts a constant value into the target field.
            </summary>
        </member>
        <member name="F:Api.Database.FieldTransferMap.SourceTypeNameExtension">
            <summary>
            An extension to add to the source table name.
            </summary>
        </member>
        <member name="F:Api.Database.FieldTransferMap.TargetTypeNameExtension">
            <summary>
            An extension to add to the target table name.
            </summary>
        </member>
        <member name="P:Api.Database.FieldTransferMap.SourceType">
            <summary>
            The type of the source row.
            </summary>
        </member>
        <member name="P:Api.Database.FieldTransferMap.TargetType">
            <summary>
            The type of the target row.
            </summary>
        </member>
        <member name="P:Api.Database.FieldTransferMap.TargetEntityName">
            <summary>
            The target entity name.
            </summary>
        </member>
        <member name="P:Api.Database.FieldTransferMap.SourceEntityName">
            <summary>
            The source entity name.
            </summary>
        </member>
        <member name="T:Api.Database.FieldTransfer">
            <summary>
            A single from->to field mapping.
            </summary>
        </member>
        <member name="F:Api.Database.FieldTransfer.IsConstant">
            <summary>
            True if it's just a constant value to use for the target field.
            </summary>
        </member>
        <member name="F:Api.Database.FieldTransfer.Constant">
            <summary>
            The constant to use. Can also be a null.
            </summary>
        </member>
        <member name="F:Api.Database.FieldTransfer.From">
            <summary>
            The source field.
            </summary>
        </member>
        <member name="F:Api.Database.FieldTransfer.To">
            <summary>
            The target field.
            </summary>
        </member>
        <member name="T:Api.Database.ListWithTotal`1">
            <summary>
            A section of results with a total.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Api.Database.ListWithTotal`1.Results">
            <summary>
            This particular segment of the results set.
            </summary>
        </member>
        <member name="T:Api.Database.ListWithTotal">
            <summary>
            Raw list of objects with a total.
            </summary>
        </member>
        <member name="F:Api.Database.ListWithTotal.Total">
            <summary>
            The total number of results if there was no pagination.
            This is null unless you explicitly ask for it via sending includeTotal:true, or if you're not using pagination in your request anyway.
            </summary>
        </member>
        <member name="T:Api.Database.Mapping`2">
            <summary>
            Maps e.g. tags to particular content type. Often Mapping[uint, uint].
            If it's e.g. a list of tags on a user, it has a UserId field and a TagId field, which are linked up to SourceId and TargetId.
            These are fully automated and used via the include system.
            </summary>
        </member>
        <member name="F:Api.Database.Mapping`2.CreatedUtc">
            <summary>
            The UTC creation date. Read/ delete only rows so an edited date isn't present here.
            </summary>
        </member>
        <member name="F:Api.Database.Mapping`2.SourceId">
            <summary>
            Source ID.
            </summary>
        </member>
        <member name="F:Api.Database.Mapping`2.TargetId">
            <summary>
            Target ID.
            </summary>
        </member>
        <member name="T:Api.Users.VersionedContent`1">
            <summary>
            Use this to get a UserId, CreatedUtc and EditedUtc with automatic creator user field support, which is also capable of revisions.
            Alternatively use DatabaseRow directly if you want total control over your table.
            </summary>
            <summary>
            Use this to get a UserId, CreatedUtc and EditedUtc with automatic creator user field support, which is also capable of revisions.
            Alternatively use DatabaseRow directly if you want total control over your table.
            </summary>
        </member>
        <member name="F:Api.Users.VersionedContent`1.Revision">
            <summary>
            The revision number of a particular piece of content. Starts at 1 and goes up linearly.
            </summary>
        </member>
        <member name="F:Api.Users.VersionedContent`1._RevisionId">
            <summary>
            This is only set if you have a revision object of the content. This is always null for the latest content.
            This is unique within all revisions for a particular type. It's the row ID for the revisions table, and doesn't exist at all in the main type table.
            </summary>
        </member>
        <member name="P:Api.Users.VersionedContent`1.RevisionId">
            <summary>
            This is only set if you have a revision object of the content. This is always null for the latest content (what you'll have most of the time).
            </summary>
        </member>
        <member name="F:Api.Users.VersionedContent`1._IsDraft">
            <summary>
            This is true if this revision is a draft. It's false if you don't have a revision object.
            </summary>
        </member>
        <member name="P:Api.Users.VersionedContent`1.IsDraft">
            <summary>
            This is true if this revision is a draft. It's false if you don't have a revision object.
            </summary>
        </member>
        <member name="T:Api.Users.EmailAddressValueGenerator`2">
            <summary>
            A virtual field value generator for a field called "emailAddress" which returns the email address IF the user is "myself".
            Only usable on User objects.
            
            Automatically instanced and the include field name is derived from the class name by the includes system. See VirtualFieldValueGenerator for more info.
            </summary>
        </member>
        <member name="M:Api.Users.EmailAddressValueGenerator`2.GetValue(Api.Contexts.Context,`0,Api.SocketServerLibrary.Writer)">
            <summary>
            Generate the value.
            </summary>
            <param name="context"></param>
            <param name="forObject"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Users.EmailAddressValueGenerator`2.GetOutputType">
            <summary>
            The type, if any, associated with the value being outputted.
            For example, if GetValue outputs only strings, this is typeof(string).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Users.User">
            <summary>
            A particular user account.
            </summary>
        </member>
        <member name="F:Api.Users.User.Email">
            <summary>
            The user's email address.
            </summary>
        </member>
        <member name="F:Api.Users.User.EmailOptOutFlags">
            <summary>
            Opt-out flags for different types of email.
            Currently 1=Essential, 2=Marketing.
            </summary>
        </member>
        <member name="F:Api.Users.User.EmailVerifyToken">
            <summary>
            Token used to verify the email of the user.
            </summary>
        </member>
        <member name="F:Api.Users.User.PasswordHash">
            <summary>
            Seeded password hash
            </summary>
        </member>
        <member name="F:Api.Users.User.LoginAttempts">
            <summary>
            Failed login attempt counter.
            </summary>
        </member>
        <member name="F:Api.Users.User.FailedLoginTimeUtc">
            <summary>
            Time of first failed login which updated the login attempt counter.
            </summary>
        </member>
        <member name="P:Api.Users.User.PasswordReset">
            <summary>
            The token provided in the password reset email. Useful for checking whether
            a user update event was triggered by a password reset request.
            </summary>
        </member>
        <member name="F:Api.Users.User.LoginRevokeCount">
            <summary>
            The user's login revoke count. An incrementing number used to revoke login tokens.
            </summary>
        </member>
        <member name="F:Api.Users.User.Role">
            <summary>
            The user's main role.
            </summary>
        </member>
        <member name="F:Api.Users.User.PrivateVerify">
            <summary>
            Private server only data used to verify this user, e.g. during registration.
            </summary>
        </member>
        <member name="F:Api.Users.User.FeatureRef">
            <summary>
            The feature image ref (optionally used on their profile page). See also: "Upload.Ref" in the Uploads module.
            </summary>
        </member>
        <member name="F:Api.Users.User.AvatarRef">
            <summary>
            The avatar upload ref. See also: "Upload.Ref" in the Uploads module.
            </summary>
        </member>
        <member name="F:Api.Users.User.Username">
            <summary>
            The username of the user. 
            </summary>
        </member>
        <member name="F:Api.Users.User.LocaleId">
            <summary>
            The latest locale this user used. Primarily, this is used for emails being sent to them. If it's null or 0, the site default, 1, is assumed.
            </summary>
        </member>
        <member name="P:Api.Users.User.JoinedUtc">
            <summary>
            The UTC date this user was created.
            </summary>
        </member>
        <member name="T:Api.Users.UserController">
            <summary>
            Handles user account endpoints.
            </summary>
            <summary>
            Handles user account endpoints.
            </summary>
        </member>
        <member name="M:Api.Users.UserController.ResendVerificationEmail(Api.Users.UserPasswordForgot)">
            <summary>
            POST /v1/user/sendverifyemail/
            Sends the user a new token to verify their email.
            </summary>
        </member>
        <member name="M:Api.Users.UserController.VerifyUser(System.UInt32,System.String,Api.Users.OptionalPassword)">
            <summary>
            POST /v1/user/verify/{userid}/{token}
            Attempts to verify the users email. If a password is supplied, the users password is also set.
            </summary>
        </member>
        <member name="M:Api.Users.UserController.#ctor(Api.Contexts.ContextService)">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="M:Api.Users.UserController.Self">
            <summary>
            Gets the current context.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.Users.UserController.ThePast">
            <summary>
            A date in the past used to set expiry on cookies.
            </summary>
        </member>
        <member name="M:Api.Users.UserController.Logout">
            <summary>
            Logs out this user account.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.Users.UserController.jsonSettings">
            <summary>
            Json serialization settings for canvases
            </summary>
        </member>
        <member name="M:Api.Users.UserController.Login(Api.Users.UserLogin)">
            <summary>
            POST /v1/user/login/
            Attempts to login. Returns either a Context or a LoginResult.
            </summary>
        </member>
        <member name="M:Api.Users.UserController.Impersonate(System.UInt32)">
            <summary>
            Impersonate a user by their ID. This is a hard cookie switch. You will loose all admin functionality to make the impersonation as accurate as possible.
            </summary>
        </member>
        <member name="M:Api.Users.UserController.Unpersonate">
            <summary>
            Reverses an impersonation.
            </summary>
        </member>
        <member name="T:Api.Users.OptionalPassword">
            <summary>
            Used when setting a password during user verification.
            </summary>
        </member>
        <member name="F:Api.Users.OptionalPassword.Password">
            <summary>
            The new password.
            </summary>
        </member>
        <member name="T:Api.Users.UserService">
            <summary>
            Manages user accounts.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
            <summary>
            Manages user accounts.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Users.UserService.Get(Api.Contexts.Context,System.String)">
            <summary>
            Gets a user by the given email address or username.
            </summary>
            <param name="context"></param>
            <param name="emailOrUsername"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Users.UserService.GetByEmail(Api.Contexts.Context,System.String)">
            <summary>
            Gets a user by the given email.
            </summary>
            <param name="context"></param>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Users.UserService.EmailVerificationHash(Api.Users.User)">
            <summary>
            Generates the email verification hash for the given user.
            </summary>
        </member>
        <member name="M:Api.Users.UserService.CreateMD5(System.String)">
            <summary>
            Gets a hash of the given input.
            </summary>
        </member>
        <member name="M:Api.Users.UserService.SendVerificationEmail(Api.Contexts.Context,Api.Users.User)">
            <summary>
            Send a verification email to the user.
            </summary>
            <param name="context"></param>
            // <param name="user"></param>
            <returns>The token sent to the user</returns>
        </member>
        <member name="M:Api.Users.UserService.VerifyEmail(Api.Contexts.Context,Api.Users.User,System.String)">
            <summary>
            Verify the users email. If a password is supplied, the users password is also set.
            </summary>
            <param name="context"></param>
            <param name="user"></param>
            <param name="newPassword"></param>
            <returns>The user</returns>
        </member>
        <member name="F:Api.Users.UserService.OnSetDefaultRole">
            <summary>
            Optional default role setting action. If you override this, you MUST
            set a default role in all scenarios.
            </summary>
        </member>
        <member name="F:Api.Users.UserService.OnChangeRole">
            <summary>
            Optional role changing action. If you override this, you MUST
            role check in all scenarios.
            </summary>
        </member>
        <member name="F:Api.Users.UserService.OnVerify">
            <summary>
            Optional account verification action. If you override this, you MUST
            role check in all scenarios.
            </summary>
        </member>
        <member name="M:Api.Users.UserService.#ctor">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="F:Api.Users.UserService.CookieName">
            <summary>
            The cookie name to use.
            </summary>
        </member>
        <member name="M:Api.Users.UserService.GetByUsername(Api.Contexts.Context,System.String)">
            <summary>
            Gets a user by the given username.
            </summary>
            <param name="context"></param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Users.UserService.Authenticate(Api.Contexts.Context,Api.Users.UserLogin)">
            <summary>
            Attempt to auth a user now. If successful, returns an auth token to use.
            </summary>
            <param name="context"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Users.UserLogin">
            <summary>
            Used when logging in. This is fully defined by the password auth service(s) that you have available.
            The default one is Api.PasswordAuth
            </summary>
        </member>
        <member name="F:Api.Users.UserLogin.EmailOrUsername">
            <summary>
            The email or username to use.
            </summary>
        </member>
        <member name="F:Api.Users.UserLogin.Password">
            <summary>
            The password to use.
            </summary>
        </member>
        <member name="T:Api.Users.EmailVerifyCustomData">
            <summary>
            Email verification custom data.
            </summary>
        </member>
        <member name="F:Api.Users.EmailVerifyCustomData.Token">
            <summary>
            The secret token which is included in the button's URL.
            </summary>
        </member>
        <member name="F:Api.Users.EmailVerifyCustomData.UserId">
            <summary>
            The userId which is included in the button's URL.
            </summary>
        </member>
        <member name="T:Api.Users.IHaveCreatorUser">
            <summary>
            Implement this interface on a type to add automatic UserProfile support.
            Note that UserProfile objects have a reference to the full user data if you need it - it's just not serialized.
            </summary>
        </member>
        <member name="M:Api.Users.IHaveCreatorUser.GetCreatorUserId">
            <summary>
            The ID of the creator user.
            </summary>
        </member>
        <member name="T:Api.Users.IHaveTimestamps">
            <summary>
            Implement this interface on a type to add automatic CreatedUtc and EditedUtc support.
            </summary>
        </member>
        <member name="M:Api.Users.IHaveTimestamps.GetCreatedUtc">
            <summary>
            The UTC creation date.
            </summary>
        </member>
        <member name="M:Api.Users.IHaveTimestamps.GetEditedUtc">
            <summary>
            The UTC last edited date.
            </summary>
        </member>
        <member name="M:Api.Users.IHaveTimestamps.SetCreatedUtc(System.DateTime)">
            <summary>
            Set the created time (UTC).
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Api.Users.IHaveTimestamps.SetEditedUtc(System.DateTime)">
            <summary>
            Set the edited time (UTC).
            </summary>
            <param name="time"></param>
        </member>
        <member name="T:Api.Users.LoginResult">
            <summary>
            Response from the login process. Gets serialised and sent to the end user.
            </summary>
        </member>
        <member name="F:Api.Users.LoginResult.MoreDetailRequired">
            <summary>
            A login happened, but more information is required. Used by 2FA and similar handlers.
            Its value is canvas compatible object.
            </summary>
        </member>
        <member name="F:Api.Users.LoginResult.CookieName">
            <summary>
            The name of a cookie to store the token in, if it's being held in a cookie.
            </summary>
        </member>
        <member name="F:Api.Users.LoginResult.User">
            <summary>
            The user that got authenticated. This can be null when sent to the client in the scenario of a partial (2FA) auth.
            </summary>
        </member>
        <member name="F:Api.Users.LoginResult.Success">
            <summary>
            The signed token. Usually set to a cookie.
            </summary>
        </member>
        <member name="F:Api.Users.LoginResult.LoginData">
            <summary>
            Original info given during login. Can be null if this is a server driven auth.
            </summary>
        </member>
        <member name="T:Api.Users.LogoutResult">
            <summary>
            Provides the ability to perform custom logout actions.
            </summary>
        </member>
        <member name="F:Api.Users.LogoutResult.SendContext">
            <summary>
            True if the a regular context output should happen instead of clearing the cookie(s).
            </summary>
        </member>
        <member name="T:Api.Users.Permissions">
            <summary>
            Instances capabilities during the very earliest phases of startup.
            </summary>
        </member>
        <member name="M:Api.Users.Permissions.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="T:Api.Users.UserCreatedContent`1">
            <summary>
            Use this to get a UserId, CreatedUtc and EditedUtc with automatic creator user field support.
            Alternatively use DatabaseRow directly if you want total control over your table.
            </summary>
        </member>
        <member name="F:Api.Users.UserCreatedContent`1.UserId">
            <summary>
            The user who created this content.
            </summary>
        </member>
        <member name="F:Api.Users.UserCreatedContent`1.CreatedUtc">
            <summary>
            The UTC creation date.
            </summary>
        </member>
        <member name="F:Api.Users.UserCreatedContent`1.EditedUtc">
            <summary>
            The UTC last edited date.
            </summary>
        </member>
        <member name="M:Api.Users.UserCreatedContent`1.GetCreatedUtc">
            <summary>
            Gets the created UTC time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Users.UserCreatedContent`1.GetEditedUtc">
            <summary>
            Gets the edited UTC time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Users.UserCreatedContent`1.SetCreatedUtc(System.DateTime)">
            <summary>
            Sets the created UTC time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Users.UserCreatedContent`1.SetEditedUtc(System.DateTime)">
            <summary>
            Sets the edited UTC time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Users.UserCreatedContent`1.GetCreatorUserId">
            <summary>
            Gets the ID of the user who created this content.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Users.UserImageUpload">
            <summary>
            Used when uploading user files
            </summary>
        </member>
        <member name="P:Api.Users.UserImageUpload.Type">
            <summary>
            The type of upload this is. avatar etc. Just the field name without 'ref' lowercased.
            </summary>
        </member>
        <member name="P:Api.Users.UserImageUpload.File">
            <summary>
            The file being uploaded.
            </summary>
        </member>
        <member name="T:Api.Users.UserPasswordForgot">
            <summary>
            Used when someone has forgot their password
            </summary>
        </member>
        <member name="P:Api.Users.UserPasswordForgot.Email">
            <summary>
            The email address to submit a request for.
            </summary>
        </member>
        <member name="T:Api.Users.UserServiceConfig">
            <summary>
            Configurations used by the User Service.
            </summary>
        </member>
        <member name="P:Api.Users.UserServiceConfig.InstallDefaultUser">
            <summary>
            True if default user (admin account) should be installed when it doesn't exist. This is only checked at startup.
            </summary>
        </member>
        <member name="P:Api.Users.UserServiceConfig.UniqueEmails">
            <summary>
            Determines if user emails need to be unique.
            </summary>
        </member>
        <member name="P:Api.Users.UserServiceConfig.SendWelcomeEmail">
            <summary>
            True if a welcome email should be sent. Note that if verify emails is turned on, this is ignored.
            </summary>
        </member>
        <member name="P:Api.Users.UserServiceConfig.UniqueUsernames">
            <summary>
            Determines if user usernames need to be unique.
            </summary>
        </member>
        <member name="P:Api.Users.UserServiceConfig.VerifyEmails">
            <summary>
            Email validation required yes/no.
            </summary>
        </member>
        <member name="P:Api.Users.UserServiceConfig.UniqueEmailMessage">
            <summary>
            Message which appears when performing unique email check. Note that this text will also pass through the locale system.
            </summary>
        </member>
        <member name="P:Api.Users.UserServiceConfig.UniqueUsernameMessage">
            <summary>
            Message which appears when performing unique username check. Note that this text will also pass through the locale system.
            </summary>
        </member>
        <member name="P:Api.Users.UserServiceConfig.NoVerificationEmail">
            <summary>
             If this is set to true, a verification email will not be sent to the user on creation.
            </summary>
        </member>
        <member name="P:Api.Users.UserServiceConfig.CookieName">
            <summary>
            The name of the cookie.
            </summary>
        </member>
        <member name="T:Api.EcmaScript.EcmaService">
            <summary>
            Handles both JS &amp; TS generation.
            </summary>
        </member>
        <member name="F:Api.EcmaScript.EcmaService.TypeConversions">
            <summary>
            Used for things like uint => number, int => number, 
            </summary>
        </member>
        <member name="F:Api.EcmaScript.EcmaService.EntityScriptMapping">
            <summary>
            Kinda ironic this generic huh?
            </summary>
        </member>
        <member name="M:Api.EcmaScript.EcmaService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Api.EcmaScript.EcmaService.AddCrudFunctionality(Api.EcmaScript.TypeScript.ClassDefinition)">
            <summary>
            Adds the CRUD Functionality to a class.
            </summary>
            <param name="baseControllerClass"></param>
        </member>
        <member name="M:Api.EcmaScript.EcmaService.AddTypeConversion(System.Type,System.String)">
            <summary>
            Add a type equivalent for JS for the output.
            </summary>
            <param name="t"></param>
            <param name="jsEquivalent"></param>
        </member>
        <member name="M:Api.EcmaScript.EcmaService.GetTypeConversion(System.Type)">
            <summary>
            Returns the JS equivalent for a CS type, when not known returns unknown
            which is an accepted TS keyword.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Api.EcmaScript.EcmaService.LcFirst(System.String)">
            <summary>
            Converts entity properties to have LCFirst names.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Api.EcmaScript.TypeScript.ClassDefinition">
            <summary>
            Represents a TypeScript class definition that can be generated dynamically.
            </summary>
        </member>
        <member name="F:Api.EcmaScript.TypeScript.ClassDefinition.Name">
            <summary>
            The name of the TypeScript class.
            </summary>
        </member>
        <member name="F:Api.EcmaScript.TypeScript.ClassDefinition.GenericTemplate">
            <summary>
            The generic type template if the class has generics.
            </summary>
        </member>
        <member name="F:Api.EcmaScript.TypeScript.ClassDefinition.Extends">
            <summary>
            The name of the class that this class extends, if any.
            </summary>
        </member>
        <member name="F:Api.EcmaScript.TypeScript.ClassDefinition.Implements">
            <summary>
            A list of interfaces that this class implements.
            </summary>
        </member>
        <member name="F:Api.EcmaScript.TypeScript.ClassDefinition.Children">
            <summary>
            All properties &amp; methods
            </summary>
        </member>
        <member name="M:Api.EcmaScript.TypeScript.ClassDefinition.CreateSource">
            <summary>
            Generates the TypeScript class definition as a source code string.
            </summary>
            <returns>The TypeScript class definition as a string.</returns>
        </member>
        <member name="T:Api.EcmaScript.TypeScript.ClassMethod">
            <summary>
            Represents a method within a TypeScript class.
            </summary>
        </member>
        <member name="P:Api.EcmaScript.TypeScript.ClassMethod.Modifier">
            <summary>
            Gets or sets the method's visibility modifier (e.g., public, private).
            </summary>
        </member>
        <member name="P:Api.EcmaScript.TypeScript.ClassMethod.Name">
            <summary>
            Gets or sets the name of the method.
            </summary>
        </member>
        <member name="P:Api.EcmaScript.TypeScript.ClassMethod.GenericTemplate">
            <summary>
            Gets or sets the generic template definition for the method, if applicable.
            </summary>
        </member>
        <member name="P:Api.EcmaScript.TypeScript.ClassMethod.ReturnType">
            <summary>
            Gets or sets the return type of the method.
            </summary>
        </member>
        <member name="P:Api.EcmaScript.TypeScript.ClassMethod.Arguments">
            <summary>
            Gets or sets the list of arguments for the method.
            </summary>
        </member>
        <member name="F:Api.EcmaScript.TypeScript.ClassMethod.Injected">
            <summary>
            Code injected into the function
            </summary>
        </member>
        <member name="M:Api.EcmaScript.TypeScript.ClassMethod.CreateSource">
            <summary>
            Generates the TypeScript method definition as a source code string.
            </summary>
            <returns>The TypeScript method definition as a formatted string.</returns>
        </member>
        <member name="T:Api.EcmaScript.TypeScript.ClassProperty">
            <summary>
            Represents a property within a TypeScript class.
            </summary>
        </member>
        <member name="P:Api.EcmaScript.TypeScript.ClassProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:Api.EcmaScript.TypeScript.ClassProperty.PropertyType">
            <summary>
            Gets or sets the TypeScript type of the property.
            </summary>
        </member>
        <member name="P:Api.EcmaScript.TypeScript.ClassProperty.DefaultValue">
            <summary>
            Gets or sets the default value of the property.
            </summary>
        </member>
        <member name="P:Api.EcmaScript.TypeScript.ClassProperty.Visibility">
            <summary>
            Gets or sets the visibility of the property (e.g., public, private, protected).
            Defaults to "public".
            </summary>
        </member>
        <member name="M:Api.EcmaScript.TypeScript.ClassProperty.CreateSource">
            <summary>
            Generates the TypeScript property definition as a source code string.
            </summary>
            <returns>The TypeScript property definition as a formatted string.</returns>
        </member>
        <member name="T:Api.EcmaScript.TypeScript.IGeneratable">
            <summary>
            The most primitive thing in the TypeScript module
            </summary>
        </member>
        <member name="M:Api.EcmaScript.TypeScript.IGeneratable.CreateSource">
            <summary>
            Takes relevant information and outputs TypeScript Source Code.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.EcmaScript.TypeScript.Import">
            <summary>
            Represents an import statement.
            </summary>
        </member>
        <member name="F:Api.EcmaScript.TypeScript.Import.DefaultImport">
            <summary>
            This is the default import
            </summary>
        </member>
        <member name="F:Api.EcmaScript.TypeScript.Import.Symbols">
            <summary>
            A list of imported objects
            </summary>
        </member>
        <member name="F:Api.EcmaScript.TypeScript.Import.From">
            <summary>
            Where we importin' from?
            </summary>
        </member>
        <member name="M:Api.EcmaScript.TypeScript.Import.CreateSource">
            <summary>
            Outputs the data as an import in TS
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.EcmaScript.TypeScript.Script">
            <summary>
            Represents a script or module within typescript.
            </summary>
        </member>
        <member name="F:Api.EcmaScript.TypeScript.Script.FileName">
            <summary>
            Where will this be saved to.
            </summary>
        </member>
        <member name="F:Api.EcmaScript.TypeScript.Script.Imports">
            <summary>
            A list of imports for the current script/module
            </summary>
        </member>
        <member name="F:Api.EcmaScript.TypeScript.Script.Children">
            <summary>
            A list of all nodes inside the script.
            </summary>
        </member>
        <member name="F:Api.EcmaScript.TypeScript.Script.Injected">
            <summary>
            Inject custom lines of code into the script
            </summary>
        </member>
        <member name="M:Api.EcmaScript.TypeScript.Script.AddImport(Api.EcmaScript.TypeScript.Import)">
            <summary>
            Adds an import to the script/module
            </summary>
            <param name="import"></param>
        </member>
        <member name="M:Api.EcmaScript.TypeScript.Script.AddSLOC(System.String)">
            <summary>
            Add a single source line of code.
            </summary>
            <param name="sloc"></param>
        </member>
        <member name="M:Api.EcmaScript.TypeScript.Script.AddChild(Api.EcmaScript.TypeScript.IGeneratable)">
            <summary>
            Adds a child source generator inside the script.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Api.EcmaScript.TypeScript.Script.CreateSource">
            <summary>
            Generate the TypeScript
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.EcmaScript.TypeScript.TypeDefinition">
            <summary>
            Represents a TypeScript type definition that can be generated dynamically.
            </summary>
        </member>
        <member name="F:Api.EcmaScript.TypeScript.TypeDefinition.Name">
            <summary>
            The name of the TypeScript type.
            </summary>
        </member>
        <member name="F:Api.EcmaScript.TypeScript.TypeDefinition.GenericTemplate">
            <summary>
            The generic type template if the type has generics.
            </summary>
        </member>
        <member name="F:Api.EcmaScript.TypeScript.TypeDefinition.Inheritence">
            <summary>
            A list of inherited types or interfaces.
            </summary>
        </member>
        <member name="F:Api.EcmaScript.TypeScript.TypeDefinition.Properties">
            <summary>
            A dictionary containing the properties of the TypeScript type, where the key is the property name and the value is the type.
            </summary>
        </member>
        <member name="M:Api.EcmaScript.TypeScript.TypeDefinition.SetName(System.String)">
            <summary>
            Sets the name of the type.
            </summary>
            <param name="name">The name to set.</param>
        </member>
        <member name="M:Api.EcmaScript.TypeScript.TypeDefinition.SetGenericTemplate(System.String)">
            <summary>
            Sets the generic type template.
            </summary>
            <param name="template">The generic type template.</param>
        </member>
        <member name="M:Api.EcmaScript.TypeScript.TypeDefinition.AddInheritence(System.String)">
            <summary>
            Adds an inherited type or interface.
            </summary>
            <param name="inherit">The name of the inherited type.</param>
        </member>
        <member name="M:Api.EcmaScript.TypeScript.TypeDefinition.AddProperty(System.String,System.String)">
            <summary>
            Adds a property to the type definition.
            </summary>
            <param name="k">The property name.</param>
            <param name="v">The property type.</param>
        </member>
        <member name="M:Api.EcmaScript.TypeScript.TypeDefinition.CreateSource">
            <summary>
            Generates the TypeScript type definition as a source code string.
            </summary>
            <returns>The TypeScript type definition as a string.</returns>
        </member>
        <member name="T:Api.Emails.EmailConfig">
            <summary>
            The appsettings.json config block for email config.
            </summary>
        </member>
        <member name="P:Api.Emails.EmailConfig.Accounts">
            <summary>
             Scope for multiple sending addresses.
            </summary>
        </member>
        <member name="T:Api.Emails.EmailAccount">
            <summary>
            A specific email account from the appsettings.json.
            </summary>
        </member>
        <member name="P:Api.Emails.EmailAccount.Server">
            <summary>
            The servers DNS or IP address to send via.
            </summary>
        </member>
        <member name="P:Api.Emails.EmailAccount.FromAddress">
            <summary>
            The address that emails using this account will be from.
            </summary>
        </member>
        <member name="P:Api.Emails.EmailAccount.User">
            <summary>
            The username to login to the server with (usually the same as the from address).
            </summary>
        </member>
        <member name="P:Api.Emails.EmailAccount.Password">
            <summary>
            The password to login to the server with.
            </summary>
        </member>
        <member name="P:Api.Emails.EmailAccount.ReplyTo">
            <summary>
            The default address to use as the reply-to field when sending with this account.
            </summary>
        </member>
        <member name="P:Api.Emails.EmailAccount.Port">
            <summary>
            NOTE: Azure blocks port 25. Must issue a support request to unblock it. Use 465 instead.
            </summary>
        </member>
        <member name="P:Api.Emails.EmailAccount.Encrypted">
            <summary>
            True if the email traffic is encrypted.
            </summary>
        </member>
        <member name="T:Api.Emails.EmailTemplate">
            <summary>
            A particular email template.
            </summary>
        </member>
        <member name="F:Api.Emails.EmailTemplate.Key">
            <summary>
            The internal key for this token. E.g. "forgot_password".
            </summary>
        </member>
        <member name="F:Api.Emails.EmailTemplate.Name">
            <summary>
            The internal name for this template.
            </summary>
        </member>
        <member name="F:Api.Emails.EmailTemplate.Subject">
            <summary>
            Email subject - can be overriden by document title when rendering the body.
            </summary>
        </member>
        <member name="F:Api.Emails.EmailTemplate.BodyJson">
            <summary>
            The canvas JSON for this email. This also outputs the emails subject too (as the document title).
            </summary>
        </member>
        <member name="F:Api.Emails.EmailTemplate.Notes">
            <summary>
            The notes for this email.
            </summary>
        </member>
        <member name="F:Api.Emails.EmailTemplate.SendFrom">
            <summary>
            The optional key in the email account config for the account to send these emails as.
            </summary>
        </member>
        <member name="F:Api.Emails.EmailTemplate.EmailType">
            <summary>
            The type of email. 1=Essential, 2=Marketing. Used for opting out of groups of email. 
            These numbers MUST go up in powers of 2, as the opt-out system is flag based.
            </summary>
        </member>
        <member name="T:Api.Emails.EmailTemplateController">
            <summary>Handles emailTemplate endpoints.</summary>
        </member>
        <member name="M:Api.Emails.EmailTemplateController.TestEmail(Api.Emails.EmailTestRequest)">
            <summary>
            Sends a test email.
            </summary>
            <param name="mailTest"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Emails.EmailTestRequest">
            <summary>
            Used to send a test email (admin only). Sends to the person who requests the test.
            </summary>
        </member>
        <member name="F:Api.Emails.EmailTestRequest.TemplateKey">
            <summary>
            Template ID.
            </summary>
        </member>
        <member name="F:Api.Emails.EmailTestRequest.CustomData">
            <summary>
            Custom scope.
            </summary>
        </member>
        <member name="T:Api.Emails.EmailTemplateService">
            <summary>
            Handles emailTemplates.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="F:Api.Emails.EmailTemplateService.EmailHandlerPriority">
            <summary>
            The priority value used when adding an email event handler automatically.
            A high value essentially means everything else happens, then the email is sent.
            </summary>
        </member>
        <member name="M:Api.Emails.EmailTemplateService.#ctor(Api.CanvasRenderer.CanvasRendererService,Api.Users.UserService,Api.Permissions.RoleService)">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Emails.EmailTemplateService.GetByKey(Api.Contexts.Context,System.String)">
            <summary>
            Gets an email template by its key.
            </summary>
            <param name="context"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Emails.EmailTemplateService.Render(System.String,Api.Emails.Recipient)">
            <summary>
            Renders an email with the given key using the given recipient info.
            </summary>
            <param name="key">Template key to use.</param>
            <param name="recipient">Mainly used for localisation. The end user's context.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Emails.EmailTemplateService.InstallNow(Api.Emails.EmailTemplate)">
            <summary>
            Installs a template (Creates it if it doesn't already exist).
            </summary>
        </member>
        <member name="M:Api.Emails.EmailTemplateService.LoadUsers(System.Collections.Generic.IList{Api.Emails.Recipient})">
            <summary>
            Ensures each recipient instance has a User loaded, and that it's also set into the CustomData.
            Note that we don't support sending to emails only, as a user is required to be able to track opt-out state.
            </summary>
            <param name="recipients"></param>
        </member>
        <member name="M:Api.Emails.EmailTemplateService.Send(System.Collections.Generic.IList{Api.Emails.Recipient},System.String,System.String,System.Collections.Generic.IEnumerable{System.Net.Mail.Attachment})">
            <summary>
            Sends emails to the given recipients without waiting for it to complete.
            </summary>
            <param name="recipients"></param>
            <param name="key"></param>
            <param name="messageId"></param>
            <param name="attachments"></param>
        </member>
        <member name="M:Api.Emails.EmailTemplateService.SendAsync(System.Collections.Generic.IList{Api.Emails.Recipient},System.String,System.String,System.Collections.Generic.IEnumerable{System.Net.Mail.Attachment})">
            <summary>
            Sends the given email to the given list of recipients.
            </summary>
            <param name="recipients"></param>
            <param name="key"></param>
            <param name="messageId"></param>
            <param name="attachments">Optional attachments.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Emails.EmailTemplateService.Send(System.String,System.String,System.String,System.String,Api.Emails.EmailAccount,System.Collections.Generic.IEnumerable{System.Net.Mail.Attachment},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Direct sends an email to the given address. Doesn't block this thread.
            </summary>
            <param name="toAddress">Target email address.</param>
            <param name="subject">Email subject.</param>
            <param name="body">Email body (HTML).</param>
            <param name="messageId">Optional message ID.</param>
            <param name="fromAccount">Optionally select a particular from account. The default (in your appsettings.json) is used otherwise.</param>
            <param name="attachments">Optional attachments.</param>
            <param name="additionalHeaders">Optional headers. E.g. put Reply-To in here.</param>
        </member>
        <member name="T:Api.Emails.TemplateAndRecipientSet">
            <summary>
            A pairing of a template and a block of recipients to send it to.
            </summary>
        </member>
        <member name="F:Api.Emails.TemplateAndRecipientSet.Template">
            <summary>
            The email template to receive.
            </summary>
        </member>
        <member name="F:Api.Emails.TemplateAndRecipientSet.Recipients">
            <summary>
            The set of recipients that'll receive this template.
            </summary>
        </member>
        <member name="T:Api.Emails.EmailToSend">
            <summary>
            A request to send an email.
            </summary>
        </member>
        <member name="F:Api.Emails.EmailToSend.Handled">
            <summary>
            True if it has been handled.
            </summary>
        </member>
        <member name="F:Api.Emails.EmailToSend.ToAddress">
            <summary>Target email address.</summary>
        </member>
        <member name="F:Api.Emails.EmailToSend.ToName">
            <summary>
            To name (if any).
            </summary>
        </member>
        <member name="F:Api.Emails.EmailToSend.Subject">
            <summary>Email subject.</summary>
        </member>
        <member name="F:Api.Emails.EmailToSend.Body">
            <summary>Email body (HTML).</summary>
        </member>
        <member name="F:Api.Emails.EmailToSend.BodyPlain">
            <summary>Email body (Plain, if any).</summary>
        </member>
        <member name="F:Api.Emails.EmailToSend.MessageId">
            <summary>Optional message ID.</summary>
        </member>
        <member name="F:Api.Emails.EmailToSend.FromAccount">
            <summary>Optionally select a particular from account. The default (in your appsettings.json) is used otherwise.</summary>
        </member>
        <member name="F:Api.Emails.EmailToSend.Attachments">
            <summary>Optional attachments.</summary>
        </member>
        <member name="F:Api.Emails.EmailToSend.AdditionalHeaders">
            <summary>Optional headers. E.g. put Reply-To in here.</summary>
        </member>
        <member name="T:Api.Emails.Permissions">
            <summary>
            Instances capabilities during the very earliest phases of startup.
            </summary>
        </member>
        <member name="M:Api.Emails.Permissions.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="T:Api.Emails.Recipient">
            <summary>
            A recipient of an email.
            </summary>
        </member>
        <member name="F:Api.Emails.Recipient.User">
            <summary>
            User if there is one.
            </summary>
        </member>
        <member name="F:Api.Emails.Recipient.UserId">
            <summary>
            User ID, if there is one.
            </summary>
        </member>
        <member name="F:Api.Emails.Recipient.Context">
            <summary>
            Context to send to. Locale comes from this, as well as the user to send to *if* Email isn't also set.
            </summary>
        </member>
        <member name="F:Api.Emails.Recipient.CustomData">
            <summary>
            Optional custom data to use in rendering the email. This arrives as the primary object inside react 
            (Use either &lt;Content primary&gt; or Content.getPrimary(this.context) to access it).
            </summary>
        </member>
        <member name="F:Api.Emails.Recipient.EmailAddress">
            <summary>
            Just their email address if this email is not targeted at a user.
            </summary>
        </member>
        <member name="M:Api.Emails.Recipient.#ctor(Api.Contexts.Context)">
            <summary>
            Email recipient for the user and locale defined in the context.
            </summary>
            <param name="contextForUserAndLocale"></param>
        </member>
        <member name="M:Api.Emails.Recipient.#ctor(Api.Users.User)">
            <summary>
            Emails the given user. Uses their last seen locale.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Api.Emails.Recipient.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Emails the given user ID, using the given optional locale. Uses their last seen locale otherwise.
            </summary>
            <param name="userId"></param>
            <param name="localeId"></param>
        </member>
        <member name="M:Api.Emails.Recipient.#ctor(System.String,Api.Contexts.Context)">
            <summary>
            Emails the given address.
            </summary>
            <param name="emailAddress"></param>
            <param name="localeContext"></param>
        </member>
        <member name="M:Api.Emails.Recipient.#ctor(System.String,System.UInt32)">
            <summary>
            Emails the given address.
            </summary>
            <param name="emailAddress"></param>
            <param name="localeId"></param>
        </member>
        <member name="T:Api.ErrorLogging.Init">
            <summary>
            Instanced automatically at startup.
            </summary>
        </member>
        <member name="M:Api.ErrorLogging.Init.#ctor">
            <summary>
            Instanced automatically at startup.
            </summary>
        </member>
        <member name="M:Api.ErrorLogging.Init.OnConfigureApplication(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Called when the underlying HTTP handling application is configured.
            </summary>
        </member>
        <member name="T:Api.ErrorLogging.LogTransactionReader">
            <summary>
            Lumity transaction reader used to read binary log files.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.IsLoading">
            <summary>
            True if the transaction reader is loading from a file vs. it loading from a just occurred transaction.
            </summary>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.#ctor">
            <summary>
            Creates a txn reader.
            </summary>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.Init(Api.ErrorLogging.Schema,System.Action{Api.ErrorLogging.LogTransactionReader},System.UInt64)">
            <summary>
            Sets up this transaction reader
            </summary>
            <param name="schema"></param>
            <param name="onTransaction"></param>
            <param name="blockchainOffset"></param>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.SetCallback(System.Action{Api.ErrorLogging.LogTransactionReader})">
            <summary>
            Update the callback method.
            </summary>
            <param name="onTransaction"></param>
        </member>
        <member name="P:Api.ErrorLogging.LogTransactionReader.Schema">
            <summary>
            The schema of this reader.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.Halt">
            <summary>
            Set this to true to stop the reader.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.CacheSet">
            <summary>
            The cache being used by the current transaction.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.FieldCount">
            <summary>
            The number of fields.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.Fields">
            <summary>
            The fields in this transaction. Use FieldCount to identify how many are in use.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.FirstBuffer">
            <summary>
            Linked list of buffers for storing binary transaction fields whilst the transaction is being read.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.LastBuffer">
            <summary>
            Linked list of buffers for storing binary transaction fields whilst the transaction is being read.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.BufferFill">
            <summary>
            Current buffer fill.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.Definition">
            <summary>
            The definition for the last read transaction.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.TransactionId">
            <summary>
            Current transaction ID. This is either simply the byte offset at the very first byte of the transaction (the first transaction therefore has a TxId of 0)
            or it is the value of the Id field, if the Id common field has been specified in the transaction.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.RelevantObject">
            <summary>
            An object just updated by a transaction. Could be a definition, project, entity etc.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.CurrentBlockId">
            <summary>
            The block ID of the current block. Starts at 1.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.TransactionByteOffset">
            <summary>
            The original, unaltered transaction ID. The transaction byte offset.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.NodeId">
            <summary>
            NodeId of the transaction, or 0 if none.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.UpdateSchema">
            <summary>
            True if this reader should update the schema.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.InvalidTransactions">
            <summary>
            Used to track invalid transactions within the current block.
            Most transactions will be valid as they're submitted by validators with knowledge of the state, so it will generally be that this set is very small.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.InvalidTransactionCounter">
            <summary>
            Pointer to the number of used slots in InvalidTransactions set.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.BlockBoundaryTransactionId">
            <summary>
            Current location of the block header. When a boundary is encountered this is updated.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.Timestamp">
            <summary>
            The latest transaction timestamp.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.StartFieldsOffset">
            <summary>
            The offset to the first user field in the transaction.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader.TransactionsInBlockSoFar">
            <summary>
            The number of txns read from the current block so far.
            </summary>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.ApplyTransaction">
            <summary>
            Applies the transaction currently in the reader buffer which has been initialised.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.InitialiseStartFields">
            <summary>
            May be called during InitialiseTransaction to setup the core start fields.
            </summary>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.InitialiseTransaction">
            <summary>
            Initialises the current transaction and sets up any useful state fields in the reader.
            </summary>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.IsTransactionInBlockValid(System.UInt64)">
            <summary>
            True if the given transaction (which must be in the current block) is valid.
            </summary>
            <param name="txId"></param>
            <returns></returns>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.AddInvalidTransactionId(System.UInt64)">
            <summary>
            Adds an invalid txn ID to the set.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.GetFieldOrdinal(System.UInt64)">
            <summary>
            Gets the field ordinal (its index in Fields) for the field by the given field Id.
            </summary>
            <param name="fieldId"></param>
            <returns></returns>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.TransactionInForwardBuffer">
            <summary>
            Called when a transaction is in the buffer
            </summary>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.ObtainBuffer">
            <summary>
            Obtains a buffer to store binary field data very briefly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.WriteToFieldBuffers(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes the given amount of data at the given offset from the given buffer into the field buffers via block transfer.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="setStart">True if DataStart should be set on the current field.</param>
        </member>
        <member name="F:Api.ErrorLogging.LogTransactionReader._compressedNumber">
            <summary>
            The stateful nature of this reader is because it can ingest packets from a network over time as well.
            </summary>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.ResetState">
            <summary>
            Resets the state of this reader.
            </summary>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.ReadHeadLocation">
            <summary>
            Current location of the read head.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.SetupFirstBlock(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            Sets up the state for the first block.
            </summary>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.SetupPreviousBlock(System.Span{System.Byte},System.UInt64,System.UInt64,System.Int32)">
            <summary>
            Sets up the info for the previous block.
            </summary>
            <param name="blockHash"></param>
            <param name="blockchainOffset"></param>
            <param name="currentBlockId"></param>
            <param name="bufferSize">The size of the read buffer. Usually you don't need to change this.</param>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.StartReadForwards(System.UInt64,System.Int32)">
            <summary>Sets up this reader for forward reading.</summary>
            <param name="bufferSize">The size of the read buffer. Usually you don't need to change this.</param>
            <param name="blockchainOffset">
            The total size, in bytes, of other parts of the blockchain before the one that is being read from here.
            If the blockchain is in one file, this value is 0. If you have partial files, you can obtain it via the "Byte Offset" field in the nearest block boundary transaction.
            </param>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.StartReadForwards(System.IO.Stream)">
            <summary>
            Loads the transactions from the open read stream in the forwards direction. This must be called on a transaction boundary.
            </summary>
            <param name="str"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.ProcessBuffer(Api.SocketServerLibrary.BufferedBytes)">
            <summary>
            Adds the given buffer to this processor.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.TransactionInBackwardBuffer">
            <summary>
            Called when a transaction is in the buffer
            </summary>
        </member>
        <member name="M:Api.ErrorLogging.LogTransactionReader.StartReadBackwards(System.IO.Stream,System.UInt64,System.Int32)">
            <summary>
            Loads the transactions from the open read stream in the backwards direction.
            This is useful for state loading, as you can e.g. skip setting values which are overriden by future transactions.
            </summary>
            <param name="str"></param>
            <param name="blockchainOffset"></param>
            <param name="bufferSize"></param>
        </member>
        <member name="T:Api.ErrorLogging.Definition">
            <summary>
            A definition of something. Can inherit other definitions.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.Definition.Id">
            <summary>
            ID of the definition. Simply the incremental number, starting from 1, of the definition as seen in the blockchain defined order.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.Definition.Schema">
            <summary>
            Parent schema
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.Definition.InheritedId">
            <summary>
            Inherited definition ID.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.Definition.Name">
            <summary>
            Standard name for the name of a content type (field 1 on the ContentType type)
            </summary>
        </member>
        <member name="T:Api.ErrorLogging.FieldData">
            <summary>
            A particular field.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.FieldData.Field">
            <summary>
            The field definition
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.FieldData.IsNull">
            <summary>
            True if the value is null.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.FieldData.DataStart">
            <summary>
            Offset to where this fields data starts
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.FieldData.DataLength">
            <summary>
            The length of the data
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.FieldData.NumericValue">
            <summary>
            This is set if the value is just a compressed number (Field.SizeIsValue is true)
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.FieldData.FirstBuffer">
            <summary>
            First buffer that variable data is in. It's a linked list.
            </summary>
        </member>
        <member name="M:Api.ErrorLogging.FieldData.GetUInt">
            <summary>
            For "uint" dataType fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.ErrorLogging.FieldData.GetInt">
            <summary>
            For "int" dataType fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.ErrorLogging.FieldData.GetToWriter(Api.SocketServerLibrary.Writer)">
            <summary>
            For "bytes" dataType fields. Writes the data into the given writer. No-op if the data is null.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Api.ErrorLogging.FieldData.GetBytes">
            <summary>
            For "bytes" dataType fields. Allocates a byte array. Avoid unless necessary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.ErrorLogging.FieldData.GetString">
            <summary>
            For "string" dataType fields. Allocates a byte array and a ustring object. Avoid unless necessary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.ErrorLogging.FieldData.GetNativeString">
            <summary>
            For "string" dataType fields. Gets a C# string instead of a ustring. Slower but more generally useful.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.ErrorLogging.FieldDefinition">
            <summary>
            Schema for a particular field.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.FieldDefinition.Id">
            <summary>
            Global field ID.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.FieldDefinition.Schema">
            <summary>
            Parent schema
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.FieldDefinition.Name">
            <summary>
            Standard name for the name of a field
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.FieldDefinition._dataType">
            <summary>
            Standard name for the data type of a field
            </summary>
        </member>
        <member name="P:Api.ErrorLogging.FieldDefinition.DataType">
            <summary>
            Standard name for the data type of a field
            </summary>
        </member>
        <member name="P:Api.ErrorLogging.FieldDefinition.FieldDataSize">
            <summary>
            The field data size. If this is -1, there is a compressed number at the start of the field value.
            </summary>
        </member>
        <member name="P:Api.ErrorLogging.FieldDefinition.SizeIsValue">
            <summary>
            True if the field data size is actually just the value to use (if a variable size is in the field). There may be some additional manipulation of that value required.
            </summary>
        </member>
        <member name="P:Api.ErrorLogging.FieldDefinition.IsNullable">
            <summary>
            True if the field value is nullable. Size is actually +1 as 0 indicates null, and a size of 1 indicates a 0 length entity.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.FieldDefinition._fieldDataSize">
            <summary>
            The field data size. If this is -1, there is a compressed number at the start of the field value.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.FieldDefinition._sizeIsValue">
            <summary>
            True if the field data size is actually just the value to use. There may be some additional manipulation required.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.FieldDefinition._isNullable">
            <summary>
            True if the field value is nullable. Size is actually +1 as 0 indicates null, and a size of 1 indicates a 0 length entity.
            </summary>
        </member>
        <member name="M:Api.ErrorLogging.FieldDefinition.BuildDataTypeMeta">
            <summary>
            Gets the atom reader to use for this field.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.ErrorLogging.Schema">
            <summary>
            Block chain schema
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.Schema.Definitions">
            The content types in the schema.
        </member>
        <member name="F:Api.ErrorLogging.Schema.TimestampFieldDefId">
            <summary>
            Field Id for the "Timestamp" field
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.Schema.TagFieldDefId">
            <summary>
            Field Id for the "Tag" field
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.Schema.MessageFieldDefId">
            <summary>
            Field Id for the "Message" field
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.Schema.StackTraceFieldDefId">
            <summary>
            Field Id for the "ExceptionMessage" field
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.Schema.MetaFieldDefId">
            <summary>
            Field Id for the "Meta" (json) field
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.Schema.OkId">
            <summary>
            Id for the "Ok" definition.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.Schema.InfoId">
            <summary>
            Id for the "Info" definition.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.Schema.WarnId">
            <summary>
            Id for the "Warn" definition.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.Schema.ErrorId">
            <summary>
            Id for the "Error" definition.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.Schema.FatalId">
            <summary>
            Id for the "Fatal" definition.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.Schema.Fields">
            <summary>
            Current field count.
            </summary>
        </member>
        <member name="M:Api.ErrorLogging.Schema.#ctor">
            <summary>
            Creates a new schema instance.
            </summary>
        </member>
        <member name="M:Api.ErrorLogging.Schema.CreateDefaults">
            <summary>
            Creates default schema entries.
            </summary>
        </member>
        <member name="M:Api.ErrorLogging.Schema.DefineField(System.String,System.String)">
            <summary>
            Defines a field on the given definition.
            </summary>
            <param name="name"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:Api.ErrorLogging.Schema.FindDefinition(System.String)">
            <summary>
            Find a definition by exact name match. Case sensitive.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.ErrorLogging.Schema.FindField(System.String,System.String)">
            <summary>
            Find a field definition by exact name match. Case sensitive.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Api.ErrorLogging.Schema.Define(System.String)">
            <summary>
            Defines an entity type in the schema of the blockchain.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.ErrorLogging.Schema.Define(System.String,System.UInt64)">
            <summary>
            Defines something in the schema of the blockchain.
            </summary>
            <param name="name"></param>
            <param name="inheritId">Id of the content type to inherit from.</param>
            <returns></returns>
        </member>
        <member name="M:Api.ErrorLogging.Schema.Get(System.Int32)">
            <summary>
            Gets a definition by the given ID.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Api.ErrorLogging.Schema.GetField(System.Int32)">
            <summary>
            Gets a field definition by the given ID.
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Api.ErrorLogging.ValidationState">
            <summary>
            Validation state of a transaction.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.ValidationState.Valid">
            <summary>
            This transaction is valid.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.ValidationState.Invalid">
            <summary>
            This transaction is invalid.
            </summary>
        </member>
        <member name="F:Api.ErrorLogging.ValidationState.Pending">
            <summary>
            This transaction is currently waiting for some additional information.
            </summary>
        </member>
        <member name="T:Api.GenerateDevFiles.DevFileGenerationService">
            <summary>
            Generation service, adds support for generated files based off reflection.
            </summary>
        </member>
        <member name="M:Api.GenerateDevFiles.DevFileGenerationService.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Api.NavMenus.AdminNavMenuItem">
            <summary>
            A particular entry within a navigation menu.
            </summary>
        </member>
        <member name="F:Api.NavMenus.AdminNavMenuItem.Title">
            <summary>
            The title of this nav menu entry.
            </summary>
        </member>
        <member name="F:Api.NavMenus.AdminNavMenuItem.Target">
            <summary>
            Often a URL but is be whatever the item wants to emit when it's clicked.
            </summary>
        </member>
        <member name="F:Api.NavMenus.AdminNavMenuItem.IconRef">
            <summary>
            Optional image to show with this item.
            </summary>
        </member>
        <member name="F:Api.NavMenus.AdminNavMenuItem.VisibilityRuleJson">
            <summary>
            Enforce visibility rules.
            </summary>
        </member>
        <member name="T:Api.NavMenus.AdminNavMenuItemController">
            <summary>
            Handles admin nav menu item endpoints.
            </summary>
        </member>
        <member name="M:Api.NavMenus.AdminNavMenuItemController.List(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Overriden endpoint 
            </summary>
            <param name="filters"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="T:Api.NavMenus.AdminNavMenuItemService">
            <summary>
            Handles navigation menu items.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.NavMenus.AdminNavMenuItemService.#ctor">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.NavMenus.AdminNavMenuItemService.InstallAdminEntry(System.String,System.String,System.String,System.String)">
            <param name="targetUrl">The target page url, e.g. /en-admin/page</param>
            <param name="iconRef">The ref to use for the icon. Typically these are fontawesome refs, of the form fa:fa-thing</param>
            <param name="label">The text that appears on the menu</param>
            <param name="visibilityJson">Any visibility rules</param>
        </member>
        <member name="M:Api.NavMenus.AdminNavMenuItemService.Install(Api.NavMenus.AdminNavMenuItem)">
            <summary>
            Installs an item (Creates it if it doesn't already exist). MenuKey is required, but MenuId is not.
            </summary>
        </member>
        <member name="T:Api.NavMenus.AdminNavPermissions">
            <summary>
            A structure defining the available permission rules on a navigation menu item.
            </summary>
        </member>
        <member name="P:Api.NavMenus.AdminNavPermissions.RequiredPermissions">
            <summary>
            The list of required permissions, the user will need all of these permissions.
            </summary>
        </member>
        <member name="T:Api.NavMenus.NavMenu">
            <summary>
            A particular nav menu.
            </summary>
        </member>
        <member name="F:Api.NavMenus.NavMenu.Key">
            <summary>
            A key used to identify a menu by its purpose.
            E.g. "primary" or "admin_primary"
            </summary>
        </member>
        <member name="F:Api.NavMenus.NavMenu.Name">
            <summary>
            The name of the menu in the site default language.
            </summary>
        </member>
        <member name="F:Api.NavMenus.NavMenu.Target">
            <summary>
            Often a URL but is be whatever the item wants to emit when it's clicked.
            NB: Only applies if this menu has no subitems
            </summary>
        </member>
        <member name="F:Api.NavMenus.NavMenu.Order">
            <summary>
            Optional sort order. Higher numbers list first.
            </summary>
        </member>
        <member name="T:Api.NavMenus.NavMenuController">
            <summary>
            Handles nav menu endpoints.
            </summary>
        </member>
        <member name="T:Api.NavMenus.NavMenuItem">
            <summary>
            A particular entry within a navigation menu.
            </summary>
        </member>
        <member name="F:Api.NavMenus.NavMenuItem.NavMenuId">
            <summary>
            The ID of the nav menu this item belongs to.
            </summary>
        </member>
        <member name="F:Api.NavMenus.NavMenuItem.MenuKey">
            <summary>
            The key value of the host menu. Used to find these items quicker.
            </summary>
        </member>
        <member name="F:Api.NavMenus.NavMenuItem.ParentItemId">
            <summary>
            ID of a parent nav menu item, if this is on a submenu. Null otherwise.
            </summary>
        </member>
        <member name="F:Api.NavMenus.NavMenuItem.BodyJson">
            <summary>
            The visual content of this menu item. Can contain imagery etc.
            </summary>
        </member>
        <member name="F:Api.NavMenus.NavMenuItem.Target">
            <summary>
            Often a URL but is be whatever the item wants to emit when it's clicked.
            </summary>
        </member>
        <member name="F:Api.NavMenus.NavMenuItem.IconRef">
            <summary>
            Optional image to show with this item.
            </summary>
        </member>
        <member name="F:Api.NavMenus.NavMenuItem.Order">
            <summary>
            Optional sort order. Higher numbers list first.
            </summary>
        </member>
        <member name="T:Api.NavMenus.NavMenuItemController">
            <summary>
            Handles nav menu item endpoints.
            </summary>
        </member>
        <member name="T:Api.NavMenus.NavMenuItemService">
            <summary>
            Handles navigation menu items.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.NavMenus.NavMenuItemService.#ctor(Api.NavMenus.NavMenuService)">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="T:Api.NavMenus.NavMenuService">
            <summary>
            Handles navigation menus.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.NavMenus.NavMenuService.#ctor">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="T:Api.Pages.AdminPageType">
            <summary>
            The types of admin page.
            </summary>
        </member>
        <member name="F:Api.Pages.AdminPageType.List">
            <summary>
            Admin pages of the form /en-admin/{CONTENT_TYPE_NAME}
            </summary>
        </member>
        <member name="F:Api.Pages.AdminPageType.Single">
            <summary>
            Admin pages of the form /en-admin/{CONTENT_TYPE_NAME}/{ID}
            </summary>
        </member>
        <member name="F:Api.Pages.AdminPageType.Key">
            <summary>
            A key for this admin page type.
            </summary>
        </member>
        <member name="M:Api.Pages.AdminPageType.#ctor(System.String)">
            <summary>
            Create a new admin page type with the given key.
            </summary>
        </member>
        <member name="T:Api.Pages.CachedPageData">
            <summary>
            Stores cached page data for faster regeneration of pages.
            </summary>
        </member>
        <member name="M:Api.Pages.CachedPageData.#ctor(System.Collections.Generic.List{Api.Pages.DocumentNode})">
            <summary>
            Creates a new cached page data set with the given documents in it.
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:Api.Pages.CachedPageData.#ctor(System.Collections.Generic.List{Api.Pages.DocumentNode},System.Byte[],System.String,System.UInt64)">
            <summary>
            Creates a new cached page data set with the given nodes in it.
            </summary>
            <param name="nodes"></param>
            <param name="anonymousCompressedPage"></param>
            <param name="hash"></param>
            <param name="cacheMaxAge"></param>
        </member>
        <member name="F:Api.Pages.CachedPageData.Nodes">
            <summary>
            A node set which is safe for use by any role.
            </summary>
        </member>
        <member name="F:Api.Pages.CachedPageData.AnonymousCompressedState">
            <summary>
            Pre-compressed complete state response for anonymous users.
            </summary>
        </member>
        <member name="F:Api.Pages.CachedPageData.AnonymousCompressedPage">
            <summary>
            Pre-compressed complete page for anon users.
            </summary>
        </member>
        <member name="F:Api.Pages.CachedPageData.Hash">
            <summary>
            Hash of the compressed page for ETag http header
            </summary>
        </member>
        <member name="F:Api.Pages.CachedPageData.LastModifiedHeader">
            <summary>
            The ISO string for when the hash was created
            </summary>
        </member>
        <member name="F:Api.Pages.CachedPageData.ExpiresHeader">
            <summary>
            The ISO string for when the content should expire from external cache
            </summary>
        </member>
        <member name="T:Api.Pages.DocumentNode">
            <summary>
            A node in the HTML of a page being generated.
            </summary>
        </member>
        <member name="F:Api.Pages.DocumentNode.NodeName">
            <summary>
            The HTML node name, in lowercase.
            </summary>
        </member>
        <member name="F:Api.Pages.DocumentNode.Parent">
            <summary>
            Parent doc node.
            </summary>
        </member>
        <member name="F:Api.Pages.DocumentNode.Attributes">
            <summary>
            The attributes for this node.
            </summary>
        </member>
        <member name="F:Api.Pages.DocumentNode.ChildNodes">
            <summary>
            The child nodes.
            </summary>
        </member>
        <member name="F:Api.Pages.DocumentNode.SupressSelfClose">
            <summary>
            True if you want to supress the closing / if childNodes is null. Only applicable to !doctype.
            </summary>
        </member>
        <member name="M:Api.Pages.DocumentNode.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Pages.DocumentNode.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="nodeName"></param>
            <param name="selfClosing"></param>
        </member>
        <member name="P:Api.Pages.DocumentNode.Item(System.String)">
            <summary>
            Get/ set attributes on this node.
            </summary>
        </member>
        <member name="M:Api.Pages.DocumentNode.InsertBefore(Api.Pages.DocumentNode,Api.Pages.DocumentNode)">
            <summary>
            Inserts the given node before the given one, which should be a child of this. 
            Use e.g. beforeThis.Parent.InsertBefore(thing, beforeThis); if you don't know what the parent is.
            </summary>
            <param name="addThis"></param>
            <param name="beforeThis"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.DocumentNode.AppendChild(Api.Pages.DocumentNode)">
            <summary>
            Chainable append child.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.DocumentNode.With(System.String,System.String)">
            <summary>
            Sets an attribute of the given name to an optional value in a chainable way.
            </summary>
        </member>
        <member name="M:Api.Pages.DocumentNode.FlattenChildren(System.Collections.Generic.List{Api.Pages.DocumentNode},System.Text.StringBuilder)">
            <summary>
            stringifys the child nodes into the given builder.
            </summary>
        </member>
        <member name="M:Api.Pages.DocumentNode.Flatten(System.Collections.Generic.List{Api.Pages.DocumentNode},System.Text.StringBuilder)">
            <summary>
            Flattens the hierarchy into a list of TextNode and SubstiteNode. Any 'static' html becomes part of TextNode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.DocumentNode.Flatten">
            <summary>
            Flattens the hierarchy into a list of TextNode and SubstiteNode. Any 'static' html becomes part of TextNode.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Pages.SubstituteNode">
            <summary>
            A HTML substitute node. These are special nodes which are evaluated on a per page load basis, unlike the rest of the document which is cached.
            </summary>
        </member>
        <member name="M:Api.Pages.SubstituteNode.#ctor(System.Func{Api.Contexts.Context,Api.SocketServerLibrary.Writer,Api.Pages.PageWithTokens,System.Threading.Tasks.ValueTask})">
            <summary>
            Create a new substitution node
            </summary>
        </member>
        <member name="F:Api.Pages.SubstituteNode.OnGenerate">
            <summary>
            The action to run during page loads.
            </summary>
        </member>
        <member name="M:Api.Pages.SubstituteNode.Flatten(System.Collections.Generic.List{Api.Pages.DocumentNode},System.Text.StringBuilder)">
            <summary>
            Flattens the DOM into a list of TextNode for any static html, and SubstituteNode's for any that changes per request.
            </summary>
        </member>
        <member name="T:Api.Pages.TextNode">
            <summary>
            A HTML text node.
            </summary>
        </member>
        <member name="M:Api.Pages.TextNode.#ctor(System.String)">
            <summary>
            Create a new text node
            </summary>
            <param name="text"></param>
        </member>
        <member name="F:Api.Pages.TextNode.TextContent">
            <summary>
            The text in this text node.
            </summary>
        </member>
        <member name="M:Api.Pages.TextNode.Flatten(System.Collections.Generic.List{Api.Pages.DocumentNode},System.Text.StringBuilder)">
            <summary>
            Convert to suitable html
            </summary>
            <param name="results"></param>
            <param name="builder"></param>
        </member>
        <member name="T:Api.Pages.RawBytesNode">
            <summary>
            A TextNode that has had its text encoded as utf8 bytes.
            </summary>
        </member>
        <member name="F:Api.Pages.RawBytesNode.Bytes">
            <summary>
            The raw bytes
            </summary>
        </member>
        <member name="M:Api.Pages.RawBytesNode.#ctor(System.Byte[])">
            <summary>
            Create a new bytes node
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:Api.Pages.RawBytesNode.Flatten(System.Collections.Generic.List{Api.Pages.DocumentNode},System.Text.StringBuilder)">
            <summary>
            Convert to suitable html
            </summary>
            <param name="results"></param>
            <param name="currentText"></param>
        </member>
        <member name="T:Api.Pages.Document">
            <summary>
            A document used when pre-rendering a page.
            </summary>
        </member>
        <member name="F:Api.Pages.Document.Title">
            <summary>
            The generated doc title. This originated from the source page's title field.
            </summary>
        </member>
        <member name="F:Api.Pages.Document.SourcePage">
            <summary>
            The Page that this doc originated from.
            </summary>
        </member>
        <member name="F:Api.Pages.Document.PrimaryContentTypeId">
            <summary>
            The contentTypeId of the primary object, if there is one. 0 otherwise.
            </summary>
        </member>
        <member name="F:Api.Pages.Document.PrimaryObject">
            <summary>
            The primary object, if there is one.
            </summary>
        </member>
        <member name="F:Api.Pages.Document.PrimaryObjectType">
            <summary>
            The type of the primary object, if there is one. Same as PrimaryObject.GetType()
            </summary>
        </member>
        <member name="F:Api.Pages.Document.PrimaryObjectService">
            <summary>
            The AutoService that provided the primary object, if there is one.
            </summary>
        </member>
        <member name="F:Api.Pages.Document.Path">
            <summary>
            site relative URL of this doc.
            </summary>
        </member>
        <member name="M:Api.Pages.Document.#ctor">
            <summary>
            Create a blank html doc
            </summary>
        </member>
        <member name="F:Api.Pages.Document._pageService">
            <summary>
            The pageService.
            </summary>
        </member>
        <member name="M:Api.Pages.Document.GetMeta(Api.Contexts.Context,System.String)">
            <summary>
            Gets a named meta field from the primary object. You can specify a meta field with [meta("fieldName")] in your entity.
            Note that [meta("title")] and [meta("description")] are 'guessed' automatically if you haven't explicitly declared them in your entity.
            If the meta field is not set on the primary object, this function will then attempt to read the meta field from the Page object instead.
            </summary>
            <param name="context"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="P:Api.Pages.Document.Doctype">
            <summary>
            The doctype node.
            </summary>
        </member>
        <member name="F:Api.Pages.Document.MainJs">
            <summary>
            A reference to the main js script element. Useful for inserting before it.
            </summary>
        </member>
        <member name="P:Api.Pages.Document.Html">
            <summary>
            The root html node.
            </summary>
        </member>
        <member name="P:Api.Pages.Document.Head">
            <summary>
            The head node.
            </summary>
        </member>
        <member name="P:Api.Pages.Document.Body">
            <summary>
            The body node.
            </summary>
        </member>
        <member name="M:Api.Pages.Document.Flatten(System.Collections.Generic.List{Api.Pages.DocumentNode},System.Text.StringBuilder)">
            <summary>
            Convert to suitable html
            </summary>
            <param name="results"></param>
            <param name="builder"></param>
        </member>
        <member name="T:Api.Pages.HtmlCacheStatus">
            <summary>
            status of the html cache.
            </summary>
        </member>
        <member name="F:Api.Pages.HtmlCacheStatus.Locales">
            <summary>
            Locales in the cache currently. Null if cache is empty.
            </summary>
        </member>
        <member name="T:Api.Pages.HtmlCachedLocaleStatus">
            <summary>
            Particular cached locale in the html cache.
            </summary>
        </member>
        <member name="F:Api.Pages.HtmlCachedLocaleStatus.LocaleId">
            <summary>
            Id of the locale.
            </summary>
        </member>
        <member name="F:Api.Pages.HtmlCachedLocaleStatus.CachedPages">
            <summary>
            The list of cached pages.
            </summary>
        </member>
        <member name="T:Api.Pages.HtmlCachedPageStatus">
            <summary>
            Info about a particular cached page.
            </summary>
        </member>
        <member name="F:Api.Pages.HtmlCachedPageStatus.Url">
            <summary>
            The cached URL.
            </summary>
        </member>
        <member name="F:Api.Pages.HtmlCachedPageStatus.NodeCount">
            <summary>
            Html node count. Null if nodes not in cache.
            </summary>
        </member>
        <member name="F:Api.Pages.HtmlCachedPageStatus.AnonymousStateSize">
            <summary>
            Compressed size of anon state. Null if state is not anon cached.
            </summary>
        </member>
        <member name="F:Api.Pages.HtmlCachedPageStatus.AnonymousDataSize">
            <summary>
            Compressed data size. Null if not anon cached.
            </summary>
        </member>
        <member name="T:Api.Pages.HtmlController">
            <summary>
            This is the main frontend controller - its job is to serve html for URLs.
            If you're looking for the handlers for /content/ etc, you'll find that over in Api/Uploads/EventListener.cs
            </summary>
        </member>
        <member name="M:Api.Pages.HtmlController.#ctor(Api.Pages.HtmlService)">
            <summary>
            Instanced automatically per request.
            </summary>
            <param name="htmlService"></param>
        </member>
        <member name="M:Api.Pages.HtmlController.GetMobileHtml(Api.Pages.MobilePageMeta)">
            <summary>
            Lists all available static files.
            </summary>
        </member>
        <member name="M:Api.Pages.HtmlController.GetRteConfigPage">
            <summary>
            RTE config popup base HTML.
            </summary>
        </member>
        <member name="M:Api.Pages.HtmlController.CatchAllAdmin">
            <summary>
            The catch all admin panel handler. If you're looking for /content/ etc, you'll find that over in Uploads/EventListener.cs
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlController.CatchAll">
            <summary>
            The catch all handler. If you're looking for /content/ etc, you'll find that over in Uploads/EventListener.cs
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlController.Robots">
            <summary>
            Gets or generates the robots.txt file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlController.Sitemap">
            <summary>
            Sitemap.xml
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Pages.HtmlService">
            <summary>
            Handles the main generation of HTML from the index.html base template at UI/public/index.html and Admin/public/index.html
            </summary>
        </member>
        <member name="M:Api.Pages.HtmlService.#ctor(Api.Pages.PageService,Api.CanvasRenderer.CanvasRendererService,Api.CanvasRenderer.FrontendCodeService,Api.Contexts.ContextService,Api.Translate.LocaleService,Api.Configuration.ConfigurationService,Api.Themes.ThemeService)">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="M:Api.Pages.HtmlService.GetCacheStatus">
            <summary>
            Generates information about the HTML cache. Result object is JSON serialisable via newtonsoft.
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlService.Version">
            <summary>
            The frontend version.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.Pages.HtmlService._configurationTable">
            <summary>
            Configs indexed by locale.
            This set is fully populated: It has no nulls. If a slot is null for a given locale ID, it used the entry in slot 1. 
            If slot 1 was also null, it used the entry for slot 0. However if a locale is beyond the end of the set, use slot 0.
            </summary>
        </member>
        <member name="F:Api.Pages.HtmlService.eventHandlersByContentTypeId">
            <summary>
            Types that have had an update event handler added to them. These handlers listen for updates (including remote ones), 
            obtain the URL of the thing that changed, and then clear the cached entry if there is one.
            </summary>
        </member>
        <member name="F:Api.Pages.HtmlService.cacheLock">
            <summary>
            Used for thread aware cache updates.
            </summary>
        </member>
        <member name="F:Api.Pages.HtmlService._robots">
            <summary>
            robots.txt
            </summary>
        </member>
        <member name="M:Api.Pages.HtmlService.GetRobotsTxt(Api.Contexts.Context)">
            <summary>
            Gets robots.txt as a byte[].
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlService.BuildUserGlobalStateJs(Api.Contexts.Context)">
            <summary>
            User specific state data. This combined with pageState indicates a page load.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.Pages.HtmlService.cache">
            <summary>
            Url -> nodes that are as pre-generated as possible. For example, for anon users it is completely precompressed. 
            Locale sensitive; indexed by locale.Id-1.
            </summary>
        </member>
        <member name="M:Api.Pages.HtmlService.ClearCache">
            <summary>
            Clear the cache
            </summary>
        </member>
        <member name="M:Api.Pages.HtmlService.RenderState(Api.Contexts.Context,Api.Pages.PageWithTokens,Microsoft.AspNetCore.Http.HttpResponse,System.String)">
            <summary>
            Renders the state only of a page to a JSON string.
            </summary>
            <param name="context"></param>
            <param name="pageAndTokens"></param>
            <param name="response"></param>
            <param name="cacheUrl">Provide this if you would like your state response to potentially come from the cache for the given URL.
            The URL itself will be ignored if pageAndTokens.StatusCode is 404 - it just has to be not null for the cache behaviour to potentially occur.</param>
            <returns></returns>
        </member>
        <member name="F:Api.Pages.HtmlService._blockPage">
            <summary>
            Generated block page (it's always the same).
            </summary>
        </member>
        <member name="M:Api.Pages.HtmlService.GenerateBlockPage">
            <summary>
            Typically only on stage. It's the same every time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlService.GenerateErrorPage(System.Collections.Generic.List{Api.CanvasRenderer.UIBuildError})">
            <summary>
            Only on development.
            </summary>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlService.RenderHeaderOnly(Api.Contexts.Context,Api.Translate.Locale)">
            <summary>
            Only renders the header. The body is blank.
            </summary>
            <param name="context"></param>
            <param name="locale"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlService.RenderNativeAppPage(Api.Contexts.Context,Api.Translate.Locale,Api.Pages.MobilePageMeta)">
            <summary>
            Note that context may only be used for the role information, not specific user details.
            </summary>
            <param name="context"></param>
            <param name="locale"></param>
            <param name="pageMeta"></param>
            <returns></returns>
        </member>
        <member name="F:Api.Pages.HtmlService._configJson">
            <summary>
            The config json, if there is any.
            </summary>
        </member>
        <member name="M:Api.Pages.HtmlService.RenderPage(Api.Contexts.Context,Api.Pages.PageWithTokens,System.String,System.Nullable{System.Boolean})">
            <summary>
            Note that context may only be used for the role information, not specific user details.
            </summary>
            <param name="context"></param>
            <param name="pageAndTokens"></param>
            <param name="path"></param>
            <param name="preRender">Optionally override if SSR should execute.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlService.GetAvailableDomains">
            <summary>
            Get all the site domains for use in tokeniser and url links
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlService.ReplaceTokens(Api.Contexts.Context,System.String,System.Object)">
            <summary>
            Used to replace tokens within a string with Primary object content
            </summary>
            <param name="context"></param>
            <param name="pageField"></param>
            <param name="primaryObject"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlService.AttachPrimaryObjectEventHandler``2(Api.Eventing.EventGroup{``0,``1})">
            <summary>
            Adds the primary object event handlers to the given event group.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
            <param name="evtGroup"></param>
        </member>
        <member name="M:Api.Pages.HtmlService.HandleCustomHeadList(System.Collections.Generic.List{Api.Pages.HeadTag},Api.Pages.DocumentNode,System.Boolean)">
            <summary>
            Handles adding a custom script list (if there even is one set) into the given node. They'll be appended.
            </summary>
        </member>
        <member name="M:Api.Pages.HtmlService.HandleCustomScriptList(System.Collections.Generic.List{Api.Pages.BodyScript},Api.Pages.DocumentNode,System.Boolean)">
            <summary>
            Handles adding a custom script list (if there even is one set) into the given node. They'll be appended.
            </summary>
        </member>
        <member name="M:Api.Pages.HtmlService.GetCachedAnonymousPage(Api.Contexts.Context,System.String)">
            <summary>
            Obtains bytes of a memory cached anonymous page. These pages are stored in memory compressed.
            </summary>
            <param name="context"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlService.BuildPage(Api.Contexts.Context,Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,System.Boolean,System.Boolean)">
            <summary>
            Generates the base HTML for the given site relative url.
            </summary>
            <param name="context"></param>
            <param name="request"></param>
            <param name="response"></param>
            <param name="updateContext"></param>
            <param name="isAdmin"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlService.BuildHeaderOnly(Api.Contexts.Context,System.IO.Stream)">
            <summary>
            Generates the base HTML for native mobile apps.
            </summary>
            <param name="context"></param>
            <param name="responseStream"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlService.BuildMobileHomePage(Api.Contexts.Context,System.IO.Stream,Api.Pages.MobilePageMeta)">
            <summary>
            Generates the base HTML for native mobile apps.
            </summary>
            <param name="context"></param>
            <param name="responseStream"></param>
            <param name="mobileMeta"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlService.GetAllLocales(Api.Contexts.Context)">
            <summary>
            Get all the active locales 
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlService.GetCanonicalUrl(System.String,System.Collections.Generic.List{Api.Translate.Locale})">
            <summary>
            Return the canonical version of the given URL.
            </summary>
            <param name="url"></param>
            <param name="locales"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlService.GetLocaleUrl(Api.Translate.Locale,System.String)">
            <summary>
            Return a locale-specific version of the given URL.
            </summary>
            <param name="locale"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlService.GetPathWithoutLocale(System.String)">
            <summary>
            Strips any locale prefix (e.g. /en-us/) from the given path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlService.GetLocaleFromUrl(System.String)">
            <summary>
            Return the locale supplied in the given URL.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.HtmlService.UrlCombine(System.String[])">
            <summary>
            Combine segments of a URL, ensuring no double slashes.
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Pages.HtmlServiceConfig">
            <summary>
            Config for HtmlService
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.LocaleId">
            <summary>
            Can specify more than one html config for different locales.
            LocaleId of 0 or 1 is the fallback. If both exist, 0 is used as the fallback.
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.CacheAnonymousPages">
            <summary>
            Turn on caching of pages. This also implies PreRender of true for requests where the contextual role is public and the user is 0.
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.FullyQualifyUrls">
            <summary>
            True if core URLs should be fully qualified with your site's PublicUrl.
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.BlockWallPassword">
            <summary>
            Block wall password. Explicitly don't define this if you don't want the block wall to appear.
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.BlockWallActiveUntil">
            <summary>
            A date that the block wall is active until (UTC)
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.ForceLowercaseUrls">
            <summary>
            True if all URLs should be forced to lowercase.
            Don't use this if you have case-sensitive tokens in your URLs (excluding the query string).
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.PreRender">
            <summary>
            True if React should be pre-rendered on pages.
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.PreExecuteGraphs">
            <summary>
            True if the page graphs should be executed server side
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.DeferMainJs">
            <summary>
            Defer the main js file.
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.StartHeadTags">
            <summary>
            Tags added to the beginning of the head.
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.EndHeadTags">
            <summary>
            Tags added to the end of the head.
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.StartHeadScripts">
            <summary>
            Scripts added to the beginning of the head.
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.EndHeadScripts">
            <summary>
            Scripts added to the end of the head.
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.StartBodyJs">
            <summary>
            Scripts added to the config that will be added at the start of the body.
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.BeforeMainJs">
            <summary>
            Scripts added before the main.generated script
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.AfterMainJs">
            <summary>
            Scripts added after the main.generated script
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.EndBodyJs">
            <summary>
            Scripts added to the config that will be added at the end of the body.
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.RobotsTxt">
            <summary>
            Lines to be added to the robots.txt file
            </summary>
        </member>
        <member name="F:Api.Pages.HtmlServiceConfig.CacheMaxAge">
            <summary>
            The maximum time in seconds cacheable page should be stored in an external cache
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.AppThemeColor">
            <summary>
            Theme colour of an app
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.DebugLogRequests">
            <summary>
            Log requests. Take care not to leave this set to true for extended periods!
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.DisablePageCache">
            <summary>
            Disable internal page cache. Take care not to leave this set to true for extended periods!
            </summary>
        </member>
        <member name="P:Api.Pages.HtmlServiceConfig.RedirectPrimaryLocale">
            <summary>
            True if requests to the primary locale should be redirected to the root
            (e.g. www.mydomain.com/en-gb/my-page -> www.mydomain.com/my-page)
            </summary>
        </member>
        <member name="F:Api.Pages.HtmlServiceConfig.PermanentRedirect">
            <summary>
            True if this redirect should be considered permanent (i.e. a 301);
            Will default to a temporary 302 redirect if not set
            </summary>
        </member>
        <member name="F:Api.Pages.HtmlServiceConfig.EnableCanonicalTag">
            <summary>
            True if link rel="canonical" href="https://www.mydomain.com" entry should be excluded from the head
            </summary>
        </member>
        <member name="F:Api.Pages.HtmlServiceConfig.EnableHrefLangTags">
            <summary>
            True if link rel="alternate" hreflang="xx-XX" href="https://www.mydomain.com/xx-XX" style entries should be excluded from the head
            </summary>
        </member>
        <member name="T:Api.Pages.HeadTag">
            <summary>
            A head tag.
            </summary>
        </member>
        <member name="P:Api.Pages.HeadTag.Rel">
            <summary>
            Link rel="" attribute.
            </summary>
        </member>
        <member name="P:Api.Pages.HeadTag.CrossOrigin">
            <summary>
            Link crossorigin="" attribute used by preloads.
            </summary>
        </member>
        <member name="P:Api.Pages.HeadTag.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="P:Api.Pages.HeadTag.As">
            <summary>
            Link as="" attribute for preloads.
            </summary>
        </member>
        <member name="P:Api.Pages.HeadTag.Href">
            <summary>
            Link href="" attribute.
            </summary>
        </member>
        <member name="P:Api.Pages.HeadTag.Content">
            <summary>
            Meta content="" attribute.
            </summary>
        </member>
        <member name="P:Api.Pages.HeadTag.Name">
            <summary>
            Meta name="" attribute.
            </summary>
        </member>
        <member name="T:Api.Pages.BodyScript">
            <summary>
            A script tag for use in the body of the page.
            </summary>
        </member>
        <member name="P:Api.Pages.BodyScript.Src">
            <summary>
            Script src.
            </summary>
        </member>
        <member name="P:Api.Pages.BodyScript.Async">
            <summary>
            True if is async.
            </summary>
        </member>
        <member name="P:Api.Pages.BodyScript.Type">
            <summary>
            Usually "text/javascript".
            </summary>
        </member>
        <member name="P:Api.Pages.BodyScript.Id">
            <summary>
            Optional ID.
            </summary>
        </member>
        <member name="P:Api.Pages.BodyScript.Defer">
            <summary>
            Defer the script until later
            </summary>
        </member>
        <member name="P:Api.Pages.BodyScript.Content">
            <summary>
            Raw js. Not recommended but available for quick and dirty drop-ins.
            </summary>
        </member>
        <member name="P:Api.Pages.BodyScript.NoScriptText">
            <summary>
            Raw html content. Used for quick dropins. 
            </summary>
        </member>
        <member name="P:Api.Pages.BodyScript.Attributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="T:Api.Pages.MobilePageMeta">
            <summary>
            Page metadata for the native mobile page.
            </summary>
        </member>
        <member name="F:Api.Pages.MobilePageMeta.ApiHost">
            <summary>
            Api host.
            </summary>
        </member>
        <member name="F:Api.Pages.MobilePageMeta.LocaleId">
            <summary>
            Locale ID
            </summary>
        </member>
        <member name="F:Api.Pages.MobilePageMeta.Cordova">
            <summary>
            Includes cordova.js
            </summary>
        </member>
        <member name="F:Api.Pages.MobilePageMeta.IncludePages">
            <summary>
            Includes all non-admin pages
            </summary>
        </member>
        <member name="F:Api.Pages.MobilePageMeta.CustomJs">
            <summary>
            Custom JS to include on the mobile page.
            </summary>
        </member>
        <member name="T:Api.Pages.Page">
            <summary>
            A page.
            </summary>
        </member>
        <member name="F:Api.Pages.Page.Url">
            <summary>
            The URL for this page.
            </summary>
        </member>
        <member name="F:Api.Pages.Page.Title">
            <summary>
            The default title for this page.
            </summary>
        </member>
        <member name="F:Api.Pages.Page.BodyJson">
            <summary>
            The pages content (as canvas JSON).
            </summary>
        </member>
        <member name="F:Api.Pages.Page.Description">
            <summary>
            The default description for this page.
            </summary>
        </member>
        <member name="F:Api.Pages.Page.NoIndex">
            <summary>
            Prevent this page from being indexed by search crawlers.
            </summary>
        </member>
        <member name="F:Api.Pages.Page.NoFollow">
            <summary>
            Prevent links on this page from being followed by search crawlers.
            </summary>
        </member>
        <member name="F:Api.Pages.Page.PreferIfLoggedIn">
            <summary>
            A disambiguation mechanism when the permission system returns multiple pages.
            Typically happens on the homepage.
            </summary>
        </member>
        <member name="T:Api.Pages.PageCacheSet">
            <summary>
            The set of caches in the page system.
            </summary>
        </member>
        <member name="F:Api.Pages.PageCacheSet.GenerationCache">
            <summary>
            The generation cache.
            </summary>
        </member>
        <member name="F:Api.Pages.PageCacheSet.LookupCache">
            <summary>
            The lookup caches.
            </summary>
        </member>
        <member name="T:Api.Pages.PageController">
            <summary>
            Handles page endpoints.
            </summary>
        </member>
        <member name="M:Api.Pages.PageController.#ctor(Api.Pages.PageService)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Pages.PageController.PageState(Api.Pages.PageController.PageDetails)">
            <summary>
            Attempts to get the page state of a page given the url and the version.
            </summary>
            <param name="pageDetails"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Pages.PageController.PageDetails">
            <summary>
            Used when getting the page state.
            </summary>
        </member>
        <member name="F:Api.Pages.PageController.PageDetails.Url">
            <summary>
            The url of the page we are getting the state for.
            </summary>
        </member>
        <member name="F:Api.Pages.PageController.PageDetails.version">
            <summary>
            The version
            </summary>
        </member>
        <member name="T:Api.Pages.PageIdAndUrl">
            <summary>
            A minimalist variant of page. Used when building pregenerated pages - they no longer download the complete page list, but rather just this URL info.
            </summary>
        </member>
        <member name="F:Api.Pages.PageIdAndUrl.Url">
            <summary>
            Page URL (with tokens in it).
            </summary>
        </member>
        <member name="F:Api.Pages.PageIdAndUrl.PageId">
            <summary>
            Page ID that the above URL is from.
            </summary>
        </member>
        <member name="T:Api.Pages.PageService">
            <summary>
            Handles pages.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Pages.PageService.#ctor">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Pages.PageService.ClearCaches">
            <summary>
            Clears the page lookup tree and URL generation caches.
            They will be regenerated when next requested.
            </summary>
        </member>
        <member name="F:Api.Pages.PageService._urlGenerationCache">
            <summary>
            A cache used to identify which pages on the site are the canonical pages for each content type. Not locale sensitive.
            </summary>
        </member>
        <member name="F:Api.Pages.PageService._urlLookupCache">
            <summary>
            A cache used to identify which page to use for a particular URL, per locale.
            </summary>
        </member>
        <member name="M:Api.Pages.PageService.GetPage(Api.Contexts.Context,System.String,System.String,Microsoft.AspNetCore.Http.QueryString,System.Boolean)">
            <summary>
            Get the page to use for the given URL.
            </summary>
        </member>
        <member name="M:Api.Pages.PageService.GetCachedNotFoundPage(Api.Contexts.Context)">
            <summary>
            Cache must be available for this. It will be available if you previously made a call to GetPage.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.PageService.GetPageTree(Api.Contexts.Context)">
            <summary>
            Gets the tree of raw pages for the given context. Don't modify the response.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.PageService.GetUrlGenerationMeta(System.Type,Api.Pages.UrlGenerationScope)">
            <summary>
            Gets the URL generation engine for the given piece of generic content. Pages are very often cached so this usually returns instantly.
            </summary>
            <param name="contentType">The contentType you want the meta for.</param>
            <param name="scope">State which type of URL you want - either a frontend URL or admin panel. Default is frontend if not specified.</param>
            <returns>A url which is relative to the site root.</returns>
        </member>
        <member name="M:Api.Pages.PageService.IsUrlCacheStale(Api.Pages.UrlGenerationCache)">
            <summary>
            True if the given cache is stale.
            </summary>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.PageService.GetUrlGenerationCache">
            <summary>
            Gets the current URL generation cache. Creates one if it does not currently exist.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.PageService.GetUrl(Api.Contexts.Context,System.Object,Api.Pages.UrlGenerationScope)">
            <summary>
            Gets the URL for the given piece of generic content. Pages are very often cached so this usually returns instantly.
            </summary>
            <param name="context"></param>
            <param name="contentObject"></param>
            <param name="scope">State which type of URL you want - either a frontend URL or admin panel. Default is frontend if not specified.</param>
            <returns>A url which is relative to the site root.</returns>
        </member>
        <member name="F:Api.Pages.PageService.TemporaryBodyJson">
            <summary>
            Used as a temporary piece of JSON when setting up admin pages to help avoid people setting the bodyJson field incorrectly.
            </summary>
        </member>
        <member name="M:Api.Pages.PageService.InstallAdminPages(System.Type,System.String[],Api.Startup.ChildAdminPageOptions)">
            <summary>
            Installs generic admin pages using the given fields to display on the list page.
            </summary>
            <param name="type">The content type that is being installed (Page, Blog etc)</param>
            <param name="fields"></param>
            <param name="childAdminPage">
            A shortcut for specifying that your type has some kind of sub-type.
            For example, the NavMenu admin page specifies a child type of NavMenuItem, meaning each NavMenu ends up with a list of NavMenuItems.
            Make sure you specify the fields that'll be visible from the child type in the list on the parent type.
            For example, if you'd like each child entry to show its Id and Title fields, specify new string[]{"id", "title"}.
            </param>
        </member>
        <member name="M:Api.Pages.PageService.Install(Api.Pages.Page[])">
            <summary>
            Installs the given page(s). It checks if they exist by their URL (or ID, if you provide that instead), and if not, creates them.
            </summary>
            <param name="pages"></param>
        </member>
        <member name="M:Api.Pages.PageService.DeleteOldInternal(System.String)">
            <summary>
            Used to uninstall internal pages that were once in use such as /en-admin/typeName/:id or /en-admin/typeName/:adminId
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.PageService.InstallInternal(Api.Pages.Page[])">
            <summary>
            Installs the given page(s). It checks if they exist by their URL (or ID, if you provide that instead), and if not, creates them.
            </summary>
            <param name="pages"></param>
        </member>
        <member name="T:Api.Pages.PageServiceConfig">
            <summary>
            Config for PageService
            </summary>
        </member>
        <member name="P:Api.Pages.PageServiceConfig.InstallDefaultPages">
            <summary>
            True if default pages should be installed when they don't exist. This is only checked at startup.
            </summary>
        </member>
        <member name="T:Api.Pages.Permissions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.Pages.Permissions.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Api.Pages.PrimaryUrlValueGenerator`2">
            <summary>
            A virtual field value generator for a field called "primaryUrl".
            You can include this field on any type and it will provide the URL of the 
            page where the object is the primary content. See also: Primary Content on the wiki.
            
            Automatically instanced and the include field name is derived from the class name by the includes system. See VirtualFieldValueGenerator for more info.
            </summary>
        </member>
        <member name="M:Api.Pages.PrimaryUrlValueGenerator`2.GetValue(Api.Contexts.Context,`0,Api.SocketServerLibrary.Writer)">
            <summary>
            Generate the value.
            </summary>
            <param name="context"></param>
            <param name="forObject"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.PrimaryUrlValueGenerator`2.GetOutputType">
            <summary>
            The type, if any, associated with the value being outputted.
            For example, if GetValue outputs only strings, this is typeof(string).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Pages.Substitution">
            <summary>
            A substitution for a {KEY} within generated HTML.
            </summary>
        </member>
        <member name="F:Api.Pages.Substitution.Key">
            <summary>
            The key in the HTML.
            </summary>
        </member>
        <member name="F:Api.Pages.Substitution.OnGenerate">
            <summary>
            The method to run when this sub occurs.
            </summary>
        </member>
        <member name="T:Api.Pages.UrlGenerationCache">
            <summary>
            Caches information about URLs on the site in order to aid with generating a URL for a particular piece of content.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlGenerationCache.MetasPerScope">
            <summary>
            The mapping of content type -> its generation meta, per scope.
            </summary>
        </member>
        <member name="M:Api.Pages.UrlGenerationCache.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Api.Pages.UrlGenerationCache.Load(System.Collections.Generic.List{Api.Pages.Page})">
            <summary>
            Loads the cache from the given list of all pages.
            </summary>
            <param name="allPages"></param>
        </member>
        <member name="M:Api.Pages.UrlGenerationCache.GetLookup(Api.Pages.UrlGenerationScope)">
            <summary>
            Gets the lookup for a particular scope. Defaults to the UI scope if not specified.
            </summary>
        </member>
        <member name="T:Api.Pages.UrlGenerationMeta">
            <summary>
            Stores information about URLs which helps in generating them.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlGenerationMeta.Cache">
            <summary>
            The cache that this meta is a part of. Used to identify when generation meta is stale and needs to be re-obtained.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlGenerationMeta.PrimaryType">
            <summary>
            The primary type for this meta. This is just the key in the dictionary of the cache.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlGenerationMeta.Pages">
            <summary>
            Possible pages. This is almost always just 1 option.
            </summary>
        </member>
        <member name="M:Api.Pages.UrlGenerationMeta.#ctor(System.Type,Api.Pages.UrlGenerationCache)">
            <summary>
            Creates a new meta object for the given primary type.
            </summary>
            <param name="primaryType"></param>
            <param name="cache"></param>
        </member>
        <member name="M:Api.Pages.UrlGenerationMeta.AddPage(System.UInt32,System.String[],System.Int32)">
            <summary>
            Adds the given page info to this meta. Most have just one suitable page.
            The lowest "piecesAfter" wins. If there are multiple at this same depth, they both win and a condition 
            is required to select the correct one for a given piece of content. It raises an event and the conditional is handled by code.
            </summary>
            <param name="pageId"></param>
            <param name="urlPieces"></param>
            <param name="piecesAfter"></param>
        </member>
        <member name="M:Api.Pages.UrlGenerationMeta.Generate(System.Object)">
            <summary>
            Generates a URL for the given piece of content which MUST be of the primary type.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Pages.UrlGenerator">
            <summary>
            Url generation info for a particular URL pattern.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlGenerator.PageId">
            <summary>
            The page ID
            </summary>
        </member>
        <member name="F:Api.Pages.UrlGenerator.PiecesAfter">
            <summary>
            The # of url pieces after the primary content type is referenced. 
            In the url /news/{blogpost.slug}/edit, {blogpost.slug} is the primary content type reference. It has one piece after it.
            /news/{blogpost.slug}/edit/permissions has 2 pieces after it and is therefore more specific and not the main page for the content type.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlGenerator.UrlPieces">
            <summary>
            The raw set of url/pieces (the url split by /).
            </summary>
        </member>
        <member name="F:Api.Pages.UrlGenerator.LoadedUrlPieces">
            <summary>
            Url pieces that have been fully parsed, such as converting {contentType.field} into an actual field that can be read from a given object.
            </summary>
        </member>
        <member name="M:Api.Pages.UrlGenerator.#ctor(System.String[])">
            <summary>
            Creates a URL generator from the given URL fragments.
            </summary>
            <param name="urlPieces"></param>
        </member>
        <member name="M:Api.Pages.UrlGenerator.#ctor(System.String)">
            <summary>
            Creates a URL generator from the given URL.
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Api.Pages.UrlGenerator.Generate(System.Object)">
            <summary>
            Generates a URL for the given piece of content which MUST be of the primary type.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.UrlGenerator.Generate(System.Object,Api.SocketServerLibrary.Writer)">
            <summary>
            Generates a URL for the given piece of content which MUST be of the primary type.
            Puts the output in to the given writer.
            </summary>
            <param name="content"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.UrlGenerator.LoadPieces">
            <summary>
            Loads the url pieces, resolving via reflection fields etc.
            </summary>
        </member>
        <member name="T:Api.Pages.UrlGenerationUrlFragment">
            <summary>
            A fully parsed url fragment.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlGenerationUrlFragment.LiteralText">
            <summary>
            Set if this is literal text.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlGenerationUrlFragment.LiteralBytes">
            <summary>
            The literal text but as UTF8 bytes.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlGenerationUrlFragment.FieldReaders">
            <summary>
            Consecutive field reads required to resolve to the final value. Either FieldInfo or Property get methods.
            </summary>
        </member>
        <member name="M:Api.Pages.UrlGenerationUrlFragment.#ctor(System.String)">
            <summary>
            Creates a literal text URL fragment.
            </summary>
            <param name="literalText"></param>
        </member>
        <member name="M:Api.Pages.UrlGenerationUrlFragment.Resolve(System.Object)">
            <summary>
            Resolves this field reference fragment - e.g. {contentType.field} - to an actual textual value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Pages.UrlGenerationScope">
            <summary>
            The "scope" of a particular URL. Each scope of URLs can have one canonical URL per content type.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlGenerationScope.UI">
            <summary>
            Main frontend of the site. This is everything that isn't /en-admin/.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlGenerationScope.Admin">
            <summary>
            The admin panel.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlGenerationScope.All">
            <summary>
            All scopes, sorted by priority.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlGenerationScope.Prefix">
            <summary>
            The prefix of URLs that will end up in this scope.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlGenerationScope.Id">
            <summary>
            The ID of this scope. Used as an array index for an array of scopes.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlGenerationScope.Priority">
            <summary>
            The higher this number is, the later the scope is collected.
            We loop over scopes by order of their priority to collect URLs that the scope will handle.
            </summary>
        </member>
        <member name="M:Api.Pages.UrlGenerationScope.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="T:Api.Pages.UrlLookupCache">
            <summary>
            Caches information about URLs on the site in order to resolve a URL quickly for a given role.
            </summary>
        </member>
        <member name="M:Api.Pages.UrlLookupCache.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Api.Pages.UrlLookupCache.Root">
            <summary>
            Gets the root node.
            </summary>
        </member>
        <member name="P:Api.Pages.UrlLookupCache.NotFoundPage">
            <summary>
            The 404 page. Its url is always /404
            </summary>
        </member>
        <member name="F:Api.Pages.UrlLookupCache.NotFoundTerminal">
            <summary>
            The 404 terminal in the URL tree. Its url is always /404.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlLookupCache.PageUrlList">
            <summary>
            List of page URLs and their associated page ID.
            </summary>
        </member>
        <member name="M:Api.Pages.UrlLookupCache.Add(Api.Contexts.Context,System.String,System.Func{Api.Pages.UrlInfo,Api.Pages.UrlLookupNode,System.Collections.Generic.List{System.String},System.Threading.Tasks.ValueTask{System.String}})">
            <summary>
            Add a redirect to the cache.
            </summary>
            <param name="context"></param>
            <param name="url"></param>
            <param name="redirectTo"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.UrlLookupCache.AddInternal(Api.Contexts.Context,System.String,Api.Pages.Page)">
            <summary>
            Adds the given url to the cache, returning the node that it ended at and the index as well.
            </summary>
            <param name="context"></param>
            <param name="url"></param>
            <param name="page"></param>
        </member>
        <member name="M:Api.Pages.UrlLookupCache.Add(Api.Contexts.Context,Api.Pages.Page)">
            <summary>
            Adds the given page to the cache.
            </summary>
            <param name="context"></param>
            <param name="page"></param>
        </member>
        <member name="M:Api.Pages.UrlLookupCache.Load(Api.Contexts.Context,System.Collections.Generic.List{Api.Pages.Page})">
            <summary>
            Loads the cache from the given list of all pages.
            </summary>
            <param name="context"></param>
            <param name="allPages"></param>
        </member>
        <member name="M:Api.Pages.UrlLookupCache.GetPage(Api.Contexts.Context,Api.Pages.UrlInfo,Microsoft.AspNetCore.Http.QueryString,Api.Pages.UrlInfo)">
            <summary>
            Gets the page to use for the given URL.
            </summary>
            <param name="context"></param>
            <param name="urlInfo"></param>
            <param name="searchQuery">Optional, Including the ? at the start</param>
            <param name="srcUrlInfo">The original urlInfo, before any processing occurred. Used for redirecting to the login page.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Pages.UrlInfo">
            <summary>
            URL lookup information.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlInfo.Url">
            <summary>
            The URL. Start and length can be used to indicate the URL lookup engine should ignore some part of this string.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlInfo.Start">
            <summary>
            Defaults to 0. Set this to avoid allocating substrings.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlInfo.Length">
            <summary>
            Defaults to Url.Length. Set this to avoid allocating substrings.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlInfo.Host">
            <summary>
            The host domain of the current request.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlInfo.RedirectTo">
            <summary>
            Optionally request a redirect to the given URL. It will be a 302/ non-permanent.
            </summary>
        </member>
        <member name="M:Api.Pages.UrlInfo.Matches(System.String)">
            <summary>
            True if the substring identified by this UrlInfo matches the given text (exactly, case sensitive).
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.UrlInfo.ToLower">
            <summary>
            Allocates a lowercased substring
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.UrlInfo.AllocateString">
            <summary>
            Allocates a substring
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Pages.UrlInfo.LowercaseSubstring(System.Int32,System.Int32)">
            <summary>
            A substring which also lowercases to avoid a double allocation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Pages.PageWithTokens">
            <summary>
            A page and token values from the URL.
            </summary>
        </member>
        <member name="F:Api.Pages.PageWithTokens.PrimaryObject">
            <summary>
            The primary object for this page.
            </summary>
        </member>
        <member name="F:Api.Pages.PageWithTokens.PrimaryService">
            <summary>
            The service for the primary object for this page.
            </summary>
        </member>
        <member name="F:Api.Pages.PageWithTokens.StatusCode">
            <summary>
            Custom set the http status code.
            </summary>
        </member>
        <member name="F:Api.Pages.PageWithTokens.UrlInfo">
            <summary>
            The full info about the URL for this page.
            </summary>
        </member>
        <member name="F:Api.Pages.PageWithTokens.TokenValues">
            <summary>
            Any token values in the URL.
            </summary>
        </member>
        <member name="F:Api.Pages.PageWithTokens.RedirectTo">
            <summary>
            Set if this is a redirection (to the given URL, as a 302).
            </summary>
        </member>
        <member name="F:Api.Pages.PageWithTokens.Multiple">
            <summary>
            True if there are multiple variants of a page and it shouldn't get cached
            </summary>
        </member>
        <member name="F:Api.Pages.PageWithTokens.PageTerminal">
            <summary>
            The page terminal in the lookup tree.
            </summary>
        </member>
        <member name="P:Api.Pages.PageWithTokens.Page">
            <summary>
            The page.
            </summary>
        </member>
        <member name="T:Api.Pages.UrlLookupTerminal">
            <summary>
            A leaf node in the URL lookup tree.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlLookupTerminal.Node">
            <summary>
            The node that this terminal is on.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlLookupTerminal.Redirection">
            <summary>
            Set if this node performs a redirect.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlLookupTerminal.Page">
            <summary>
            Page, if there is one.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlLookupTerminal.Generator">
            <summary>
            The canvas generator for the associated page.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlLookupTerminal.UrlTokens">
            <summary>
            If this node has a page associated with it, this is the set of url tokens. The primary object is always derived from the last one.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlLookupTerminal.UrlTokenNames">
            <summary>
            If this node has a page associated with it, this is the set of url tokens. The primary object is always derived from the last one. This is just the names only.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlLookupTerminal.IsAdmin">
            <summary>
            True if this is an admin page terminal.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlLookupTerminal.UrlTokenNamesJson">
            <summary>
            Preformatted JSON array of the url token names. ["A", "B", ..]. will be the string "null" if it is null.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlLookupTerminal.FilterString">
            <summary>
            The filter string if it does not contain an ID based token.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlLookupTerminal.PrimaryDataOptions">
            <summary>
            The data options to use when looking up objects for this terminal.
            </summary>
        </member>
        <member name="T:Api.Pages.UrlLookupNode">
            <summary>
            A node in the URL lookup tree.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlLookupNode.Terminals">
            <summary>
            Usually only has one page in it, but multiple pages on the same URL can happen with e.g. the homepage, if there are permission based matchings.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlLookupNode.IsAdmin">
            <summary>
            True if this node (or any of its parents) are /en-admin/.
            </summary>
        </member>
        <member name="F:Api.Pages.UrlLookupNode.Wildcard">
            <summary>
            The wildcard resolver if there is one for this node. Same as Children["*"].
            </summary>
        </member>
        <member name="F:Api.Pages.UrlLookupNode.Children">
            <summary>
            The child nodes.
            </summary>
        </member>
        <member name="T:Api.Pages.PageUrlToken">
            <summary>
            A particular {urltoken} with the content type and field ref loaded.
            </summary>
        </member>
        <member name="F:Api.Pages.PageUrlToken.RawToken">
            <summary>
            The raw token value.
            </summary>
        </member>
        <member name="F:Api.Pages.PageUrlToken.TypeName">
            <summary>
            The type name.
            </summary>
        </member>
        <member name="F:Api.Pages.PageUrlToken.FieldName">
            <summary>
            The field name.
            </summary>
        </member>
        <member name="F:Api.Pages.PageUrlToken.ContentType">
            <summary>
            The content type.
            </summary>
        </member>
        <member name="F:Api.Pages.PageUrlToken.IsId">
            <summary>
            True if this id the ID field.
            </summary>
        </member>
        <member name="F:Api.Pages.PageUrlToken.Service">
            <summary>
            The service for the content type (if there is one).
            </summary>
        </member>
        <member name="F:Api.Pages.PageUrlToken.FieldOrProperty">
            <summary>
            The field/ property info.
            </summary>
        </member>
        <member name="F:Api.Pages.PageUrlToken.ContentTypeId">
            <summary>
            THe ID of the content type.
            </summary>
        </member>
        <member name="T:Api.ThirdParty.Pages.CacheHandlerService">
            <summary>
            Handles the page cache.
            </summary>
        </member>
        <member name="M:Api.ThirdParty.Pages.CacheHandlerService.#ctor(Api.Pages.HtmlService)">
            <summary>
            Instanced automatically.
            </summary>
            <param name="htmlService"></param>
        </member>
        <member name="M:Api.ThirdParty.Pages.CacheHandlerService.SetupForType``2(AutoService{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
            <param name="service"></param>
        </member>
        <member name="T:Api.PasswordAuth.PasswordAuthConfig">
            <summary>
            The appsettings.json config block for password auth.
            </summary>
        </member>
        <member name="P:Api.PasswordAuth.PasswordAuthConfig.CheckIfExposed">
            <summary>
            Check if password is exposed or not.
            </summary>
        </member>
        <member name="P:Api.PasswordAuth.PasswordAuthConfig.MinLength">
            <summary>
            Min length.
            </summary>
        </member>
        <member name="P:Api.PasswordAuth.PasswordAuthConfig.DisableDefaultUser">
            <summary>
            If true, the API will not create a default user if no users are present.
            </summary>
        </member>
        <member name="T:Api.PasswordAuth.PasswordAuthService">
            <summary>
            The default password based authentication scheme. Note that other variants of this exist such as one which uses
            the same password hash format as Wordpress for easy porting.
            You can either add additional schemes or just outright replace this one if you want something else.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="F:Api.PasswordAuth.PasswordAuthService.MinLength">
            <summary>
            Min password length.
            </summary>
        </member>
        <member name="F:Api.PasswordAuth.PasswordAuthService.OnSelectUser">
            <summary>
            Custom function to select the user to use.
            </summary>
        </member>
        <member name="F:Api.PasswordAuth.PasswordAuthService.CheckIfExposed">
            <summary>
            True if new passwords should be checked for public exposure.
            </summary>
        </member>
        <member name="M:Api.PasswordAuth.PasswordAuthService.#ctor(Api.Users.UserService)">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.PasswordAuth.PasswordAuthService.CreateDefaultUser">
            <summary>
            Creates default user if it is needed.
            </summary>
        </member>
        <member name="M:Api.PasswordAuth.PasswordAuthService.AuthenticatePassword(Api.Contexts.Context,Api.Users.UserLogin)">
            <summary>
            Attempt to authenticate the user by password
            </summary>
            <param name="context"></param>
            <param name="loginDetails"></param>
            <returns></returns>
            <exception cref="T:Api.Startup.PublicException"></exception>
        </member>
        <member name="M:Api.PasswordAuth.PasswordAuthService.EnforcePolicy(System.String)">
            <summary>
            Enforces pwd policy on the given password.
            </summary>
        </member>
        <member name="T:Api.PasswordAuth.PasswordStorage">
            <summary>
            Wordpress compatible password storage via Phpass.
            </summary>
        </member>
        <member name="M:Api.PasswordAuth.PasswordStorage.CreateHash(System.String)">
            <summary>
            Creates a Wordpress compatible hash.
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Api.PasswordAuth.PasswordStorage.VerifyPassword(System.String,System.String)">
            <summary>
            Verifies a Wordpress compatible hash.
            </summary>
            <param name="password"></param>
            <param name="goodHash"></param>
            <returns></returns>
        </member>
        <member name="T:Api.PasswordAuth.PwnedPasswords">
            <summary>
            Check if passwords have been pwned using https://haveibeenpwned.com/API/v2#PwnedPasswords
            </summary>
        </member>
        <member name="M:Api.PasswordAuth.PwnedPasswords.IsPasswordPwned(System.String,System.Threading.CancellationToken,System.Net.Http.HttpClient)">
            <summary>
            Check if the password is pwned.
            </summary>
            <param name="password">The password you want to check</param>
            <param name="cancellationToken">Cancellationtoken to abort the http request</param>
            <param name="httpClient">In web-based projects it's recommended that you re-ues existing httpclients</param>
            <returns></returns>
        </member>
        <member name="T:Api.PasswordResetRequests.PasswordResetCustomEmailData">
            <summary>
            A password reset request.
            </summary>
        </member>
        <member name="F:Api.PasswordResetRequests.PasswordResetCustomEmailData.Token">
            <summary>
            The randomly generated token, used by the client, to prove ownership of the 2nd channel.
            </summary>
        </member>
        <member name="F:Api.PasswordResetRequests.PasswordResetCustomEmailData.Reset">
            <summary>
            The complete request.
            </summary>
        </member>
        <member name="T:Api.PasswordResetRequests.PasswordResetRequest">
            <summary>
            A password reset request.
            </summary>
        </member>
        <member name="F:Api.PasswordResetRequests.PasswordResetRequest.Token">
            <summary>
            The randomly generated token, used by the client, to prove ownership of the 2nd channel.
            </summary>
        </member>
        <member name="F:Api.PasswordResetRequests.PasswordResetRequest.IsUsed">
            <summary>
            True if this token was used.
            </summary>
        </member>
        <member name="F:Api.PasswordResetRequests.PasswordResetRequest.Email">
            <summary>
            The email address that is being reset.
            </summary>
        </member>
        <member name="F:Api.PasswordResetRequests.PasswordResetRequest.CreatedUtc">
            <summary>
            Created date UTC. This is used to establish if the token has expired yet.
            </summary>
        </member>
        <member name="F:Api.PasswordResetRequests.PasswordResetRequest.UserId">
            <summary>
            The user this reset request is for.
            </summary>
        </member>
        <member name="T:Api.PasswordResetRequests.PasswordResetRequestController">
            <summary>Handles passwordResetRequest endpoints.</summary>
        </member>
        <member name="M:Api.PasswordResetRequests.PasswordResetRequestController.#ctor(Api.Users.UserService)">
            <summary>
            Instanced automatically.
            </summary>
            <param name="users"></param>
        </member>
        <member name="M:Api.PasswordResetRequests.PasswordResetRequestController.CheckTokenExists(System.String)">
            <summary>
            Check if token exists and has not expired yet.
            </summary>
        </member>
        <member name="M:Api.PasswordResetRequests.PasswordResetRequestController.LoginWithToken(System.String,Api.PasswordResetRequests.NewPassword)">
            <summary>
            Attempts to login with a submitted new password.
            </summary>
        </member>
        <member name="M:Api.PasswordResetRequests.PasswordResetRequestController.Generate(System.UInt32)">
            <summary>
            Admin link generation.
            </summary>
        </member>
        <member name="T:Api.PasswordResetRequests.NewPassword">
            <summary>
            Used when setting a new password.
            </summary>
        </member>
        <member name="F:Api.PasswordResetRequests.NewPassword.Password">
            <summary>
            The new password.
            </summary>
        </member>
        <member name="T:Api.PasswordResetRequests.PasswordResetRequestService">
            <summary>
            Handles passwordResetRequests.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="F:Api.PasswordResetRequests.PasswordResetRequestService.DefaultExpiryTime">
            <summary>
            Request expiry time, in hours.
            </summary>
        </member>
        <member name="F:Api.PasswordResetRequests.PasswordResetRequestService.ExpiryTime">
            <summary>
            The request expiry time, in hours.
            </summary>
        </member>
        <member name="M:Api.PasswordResetRequests.PasswordResetRequestService.#ctor(Api.Emails.EmailTemplateService,Api.Users.UserService)">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.PasswordResetRequests.PasswordResetRequestService.HasExpired(Api.PasswordResetRequests.PasswordResetRequest)">
            <summary>
            True if given req has expired.
            </summary>
        </member>
        <member name="M:Api.PasswordResetRequests.PasswordResetRequestService.IsUsed(Api.PasswordResetRequests.PasswordResetRequest)">
            <summary>
            True if given req has been used already.
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Api.PasswordResetRequests.PasswordResetRequestService.Get(Api.Contexts.Context,System.String)">
            <summary>
            Gets a reset request by the given token. This overload is always permitted (be careful!).
            </summary>
            <param name="context"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Api.PasswordResetRequests.Permissions">
            <summary>
            Instances capabilities during the very earliest phases of startup.
            </summary>
        </member>
        <member name="M:Api.PasswordResetRequests.Permissions.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="T:Api.PasswordResetRequests.RandomToken">
            <summary>
            Used for generating random strings.
            </summary>
        </member>
        <member name="M:Api.PasswordResetRequests.RandomToken.Generate(System.Int32)">
            <summary>
            Generates a crypto safe random token of the given length.
            </summary>
            <param name="maxSize">The length of the token you'd like.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Signatures.KeyPair">
            <summary>
            A crypto keypair. Used for sign/ verify.
            </summary>
        </member>
        <member name="M:Api.Signatures.KeyPair.LoadPublicKeyHex(System.String)">
            <summary>
            Loads a public key from a base64 string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Signatures.KeyPair.LoadPublicKey(System.String)">
            <summary>
            Loads a public key only pair from a base64 string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Signatures.KeyPair.LoadPublicKey(System.Byte[])">
            <summary>
            Loads a public key only pair from its raw bytes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Signatures.KeyPair.Generate">
            <summary>
            Generates a secp256k1 key pair.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Signatures.KeyPair.FromSerialized(System.String,System.String)">
            <summary>
            Gets a keypair from the serialised pub/ priv pair.
            </summary>
            <param name="pub"></param>
            <param name="priv"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Signatures.KeyPair.FromSerialized(System.String)">
            <summary>
            Gets a keypair from the serialised text version.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="F:Api.Signatures.KeyPair.PrivateKeyBytes">
            <summary>
            The bytes of the private key.
            </summary>
        </member>
        <member name="M:Api.Signatures.KeyPair.Serialize">
            <summary>
            Gets this key pair as serialized json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Signatures.KeyPair.PrivateKeyBase64">
            <summary>
            Base64 PK
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Signatures.KeyPair.PublicKeyBase64">
            <summary>
            Base64 PK
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.Signatures.KeyPair.PrivateKey">
            <summary>
            The private key parameters.
            </summary>
        </member>
        <member name="F:Api.Signatures.KeyPair.PublicKey">
            <summary>
            The public key parameters.
            </summary>
        </member>
        <member name="M:Api.Signatures.KeyPair.SignBase64(System.String)">
            <summary>
            Signs the given message, returning the signature as base 64.
            </summary>
            <param name="message">The bytes to sign.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Signatures.KeyPair.Verify(System.String,System.String)">
            <summary>
            Verifies the given base64 signature for the given message.
            </summary>
            <param name="message"></param>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Signatures.KeyPair.Verify(System.String,System.Byte[])">
            <summary>
            Verifies the given base64 signature for the given message.
            </summary>
            <param name="message"></param>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Signatures.KeyPair.SignBase64(System.Byte[])">
            <summary>
            Signs the given message, returning the signature as base 64.
            </summary>
            <param name="message">The bytes to sign.</param>
            <returns></returns>
        </member>
        <member name="M:Api.Signatures.KeyPair.Sign(System.String)">
            <summary>
            Signs the given message.
            </summary>
            <param name="message">The bytes of the message to sign.</param>
            <returns>A 64 byte signature.</returns>
        </member>
        <member name="M:Api.Signatures.KeyPair.Sign(System.Byte[])">
            <summary>
            Signs the given message.
            </summary>
            <param name="message">The bytes of the message to sign.</param>
            <returns>A 64 byte signature.</returns>
        </member>
        <member name="T:Api.Signatures.JsonKeyData">
            <summary>
            A public/private ecdsa keypair from a JSON file.
            </summary>
        </member>
        <member name="F:Api.Signatures.JsonKeyData.Public">
            <summary>
            The public key, base64.
            </summary>
        </member>
        <member name="F:Api.Signatures.JsonKeyData.Private">
            <summary>
            The private key, base64.
            </summary>
        </member>
        <member name="T:Api.Signatures.SignatureService">
            <summary>
            Handles generation and validation of signatures used for e.g. serving of private files.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Signatures.SignatureService.#ctor">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Signatures.SignatureService.CreateHmac(Api.Signatures.KeyPair)">
            <summary>
            Creates a HMAC generator for the given key pair. It's internally stateful.
            </summary>
            <param name="keyPair"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Signatures.SignatureService.GetHmac">
            <summary>
            Gets a hmac helper, which may come from a pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Signatures.SignatureService.ValidateHmac256AlphaChar(System.String,Api.Signatures.KeyPair)">
            <summary>
            Validates that the given string ends with an alphachar signature.
            </summary>
            <param name="str"></param>
            <param name="customKeyPair"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Signatures.SignatureService.SignHmac256AlphaChar(Api.SocketServerLibrary.Writer,Api.Signatures.KeyPair)">
            <summary>
            Signs the given writer content with a sha256 HMAC using the internal private key.
            The outputted HMAC goes into the writer's buffer as hex.
            </summary>
            <param name="writer"></param>
            <param name="customKeyPair">Optional keypair to use for the HMAC.</param>
        </member>
        <member name="M:Api.Signatures.SignatureService.Sign(System.String,System.Int64)">
            <summary>
            Generates a signature for the given piece of text.
            The timestamp will be appended to the end of the valueToSign as ?t={timestamp}.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Signatures.SignatureService.ValidateSignatureFromHost(System.String,System.String,System.String)">
            <summary>
            Validates a signature for a given signed value.
            </summary>
            <param name="signedValue">The value - usually a URL - being signed.</param>
            <param name="signature">Signature value</param>
            <param name="hostName">Host name to look up the key for. Host name is case sensitive, and will not be trimmed. Lowercase recommended.
            If null, uses the main keypair.</param>
        </member>
        <member name="M:Api.Signatures.SignatureService.ValidateSignature(System.String,System.String,System.String)">
            <summary>
            Validates a signature for a given signed value.
            </summary>
            <param name="signedValue">The value - usually a URL - being signed.</param>
            <param name="signatureB64">Base64</param>
            <param name="publicKeyHex">Hex formatted public key</param>
            <returns>True if the signature is valid.</returns>
        </member>
        <member name="M:Api.Signatures.SignatureService.ValidateSignature(System.String,System.Int64,System.String)">
            <summary>
            Validates a signature for a given signed value. The timestamp will be appended to the end as ?t={timestamp}.
            </summary>
            <param name="signedValue">The value - usually the URL itself - being signed.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="signature"></param>
            <returns>True if the signature is valid.</returns>
        </member>
        <member name="M:Api.Signatures.SignatureService.Sign(System.String)">
            <summary>
            Generates a signature for the given piece of text as-is.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Signatures.SignatureService.ValidateSignature(System.String,System.String)">
            <summary>
            Validates a signature for a given signed value as-is.
            </summary>
            <param name="signedValue">The value - usually the URL itself - being signed.</param>
            <param name="signature"></param>
            <returns>True if the signature is valid.</returns>
        </member>
        <member name="T:Api.Signatures.PooledHMac">
            <summary>
            A pooled reusable hmac helper.
            </summary>
        </member>
        <member name="F:Api.Signatures.PooledHMac.Mac">
            <summary>
            The hmac engine.
            </summary>
        </member>
        <member name="F:Api.Signatures.PooledHMac.Next">
            <summary>
            Next in pool.
            </summary>
        </member>
        <member name="T:Api.Signatures.SignatureServiceConfig">
            <summary>
            The appsettings.json config for the sig service. Usually used for prod/ stage.
            </summary>
        </member>
        <member name="P:Api.Signatures.SignatureServiceConfig.Private">
            <summary>
            Private key (base 64).
            </summary>
        </member>
        <member name="P:Api.Signatures.SignatureServiceConfig.Public">
            <summary>
            Public key (base 64).
            </summary>
        </member>
        <member name="P:Api.Signatures.SignatureServiceConfig.Hosts">
            <summary>
            Host name -> public key lookup (if there are any additional keys). Host name is case sensitive, and will not be trimmed. Lowercase recommended.
            </summary>
        </member>
        <member name="T:Api.Signatures.SignatureServiceHostConfig">
            <summary>
            Additional host config.
            </summary>
        </member>
        <member name="P:Api.Signatures.SignatureServiceHostConfig.Public">
            <summary>
            Remote host public key (base 64).
            </summary>
        </member>
        <member name="F:Api.Signatures.SignatureServiceHostConfig._key">
            <summary>
            The pubkey only (doesn't have a private key).
            </summary>
        </member>
        <member name="M:Api.Signatures.SignatureServiceHostConfig.GetKey">
            <summary>
            Get the pubkey parameters (they can be cached).
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.BinaryBufferPool">
            <summary>
            This pools the allocation of blocks of n bytes.
            Used primarily by messages being sent and received.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BinaryBufferPool.OneKb">
            <summary>
            1024 buffers
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BinaryBufferPool.PoolLock">
            <summary>
            A lock for thread safety.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BinaryBufferPool.BufferSize">
            <summary>The size of buffers in this pool.</summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BinaryBufferPool.BufferSpaceSize">
            <summary>The size of buffers in this pool minus the start offset.</summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BinaryBufferPool.StartOffset">
            <summary>
            When a buffer is taken from this pool, this is the offset to use.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BinaryBufferPool.FirstCached">
            <summary>
            First writer in the pool.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BinaryBufferPool.WriterPoolLock">
            <summary>
            Thread safety for the writer pool.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BinaryBufferPool.Pinned">
            <summary>
            True if the buffers are pinned.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BinaryBufferPool.First">
            <summary>The current front of the pool.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.BinaryBufferPool.#ctor(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Creates a pool of units of the given size
            </summary>
            <param name="bufferSize"></param>
            <param name="pinned"></param>
            <param name="startOffset"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.BinaryBufferPool.Clear">
            <summary>
            Clears the writer pool.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.BinaryBufferPool.WriterPoolSize">
            <summary>
            Counts the current size of buffers in the pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.BinaryBufferPool.BufferPoolSize">
            <summary>
            Counts the current size of buffers in the pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.BinaryBufferPool.GetWriter">
            <summary>
            Gets a writer which builds a series of the buffers from this pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.BinaryBufferPool.Get">
            <summary>
            Get or create a buffer from this pool.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.SocketServerLibrary.BinaryBufferPool`1">
            <summary>
            This pools the allocation of blocks of n bytes.
            Used primarily by messages being sent and received.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.BinaryBufferPool`1.#ctor(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Create a new pool.
            </summary>
            <param name="bufferSize"></param>
            <param name="pinned"></param>
            <param name="startOffset"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.BinaryBufferPool`1.PoolSize">
            <summary>
            Finds the current pool size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.BinaryBufferPool`1.Get">
            <summary>
            Gets a buffer from this pool.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.SocketServerLibrary.BoltFieldMeta">
            <summary>
            Field metadata.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BoltFieldMeta.Field">
            <summary>
            The field itself.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BoltFieldMeta.OutputType">
            <summary>
            The output type of this field.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BoltFieldMeta.Name">
            <summary>
            The name of this field.
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.BoltFieldInfo">
            <summary>
            Shared metadata about a particular type.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BoltFieldInfo._lookup">
            <summary>
            lookup of existing field info.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.BoltFieldInfo.Get(System.Type)">
            <summary>
            Gets (or creates) the .Writer(..) and Read method to use for the given type.
            The meta also includes a sendable name which can also be used to obtain the same output type on a remote server.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:Api.SocketServerLibrary.BoltFieldInfo.WriteMethod">
            <summary>
            The Writer.Write() method to use when outputting this.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BoltFieldInfo.ReadMethod">
            <summary>
            The Client.Read*() method to use when reading this from the client.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BoltFieldInfo.TypeName">
            <summary>
            A simple type matching mechanism.
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.BoltIgnoreAttribute">
            <summary>
            Much like the bolt equiv of JsonIgnore. This tells bolt to act like a field does not exist.
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.BoltReaderWriter">
            <summary>
            Creates bolt reader/ writers and caches them for given types.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.BoltReaderWriter.Get``1">
            <summary>
            Gets a bolt reader/ writer for the given type. Note that this does not write the type name etc - 
            it purely writes the fields, and provides a portable field description.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="F:Api.SocketServerLibrary.BoltReaderWriter.counter">
            <summary>
            Ensures unique names for assemblies generated during this session.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.BoltReaderWriter.Generate``1">
            <summary>
            Creates a reader/ writer for the given message or content type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.BoltReaderWriter.BuildDescription(System.Collections.Generic.List{Api.SocketServerLibrary.BoltFieldMeta},System.Text.StringBuilder)">
            <summary>
            Writes the given meta fields to the given builder, in a human readable way.
            </summary>
            <param name="fields"></param>
            <param name="builder"></param>
        </member>
        <member name="T:Api.SocketServerLibrary.BoltReaderWriter`1">
            <summary>
            Reads/writes in the binary bolt format.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Api.SocketServerLibrary.BoltReaderWriter`1.Write(`0,Api.SocketServerLibrary.Writer)">
            <summary>
            Writes the given object to the given writer in raw bolt continuous field format.
            </summary>
            <param name="obj"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.BoltReaderWriter`1.ReadGeneric(Api.SocketServerLibrary.Client)">
            <summary>
            Reads the type from the reader and removes the concrete type ref.
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.BoltReaderWriter`1.Read(Api.SocketServerLibrary.Client)">
            <summary>
            Allocates an object of the given type and reads it from the given client.
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.BoltReaderWriter`1.Read(`0,Api.SocketServerLibrary.Client)">
            <summary>
            Reads to the given object from the given writer in raw bolt continuous field format.
            </summary>
            <param name="obj"></param>
            <param name="reader"></param>
        </member>
        <member name="F:Api.SocketServerLibrary.BoltReaderWriter`1.Description">
            <summary>
            Field description.
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.BufferedBytes">
            <summary>
            A block of bytes which can be stored in a pool.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BufferedBytes.Length">
            <summary>The length of Bytes.</summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BufferedBytes.Offset">
            <summary>The starting point in bytes to send from.</summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BufferedBytes.Bytes">
            <summary>The bytes themselves.</summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BufferedBytes.After">
            <summary>When this object is in the pool, this is the object after.</summary>
        </member>
        <member name="F:Api.SocketServerLibrary.BufferedBytes.Pool">
            <summary>
            The pool this block came from.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.BufferedBytes.#ctor">
            <summary>
            Instances a new block of bytes.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.BufferedBytes.#ctor(System.Byte[],System.Int32,Api.SocketServerLibrary.BinaryBufferPool)">
            <summary>
            Instances a new block of bytes.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.BufferedBytes.Init(System.Byte[],System.Int32,Api.SocketServerLibrary.BinaryBufferPool)">
            <summary>
            Instances a new block of bytes.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.BufferedBytes.#ctor(System.Byte[],System.Int32,System.Int32,Api.SocketServerLibrary.BinaryBufferPool)">
            <summary>
            Instances a new block of bytes.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.BufferedBytes.Release">
            <summary>Returns this bytes object to the pool it came from.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.BufferedBytes.CopyFrom(System.Byte[],System.Int32,System.Int32)">
            <summary>Copies data from the given buffer into these buffers.
            Uses Offset on these buffer objects to track how full they are.</summary>
            <returns>May internally add to the linked list of buffers. 
            Returns the last buffer in the list (which might just be this if no extra ones were needed).</returns>
        </member>
        <member name="T:Api.SocketServerLibrary.Ciphers.SrtpCipherCTR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Ciphers.SrtpCipherCTR.Cipher">
            <summary>
            Cipher is stateless in that it doesn't contain any per-call state, only unchanging key material. I.e. instance cannot be shared.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Ciphers.SrtpCipherCTR.Process(System.Byte[],System.Int32,System.Int32,System.Span{System.Byte})">
            <summary>
            Thread safe - you can call this with as many threads as you want simultaneously.
            </summary>
            <param name="buff"></param>
            <param name="off"></param>
            <param name="len"></param>
            <param name="iv"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Ciphers.SrtpCipherCTR.GetCipherStream(System.Byte[],System.Int32,System.Span{System.Byte})">
            <summary>
            section 4.1.1 in RFC3711. Thread safe - you can call this with as many threads as you want.
            </summary>
            <param name="_out"></param>
            <param name="length"></param>
            <param name="iv"></param>
        </member>
        <member name="T:Api.SocketServerLibrary.Client">
            <summary>
            A socket client.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.Id">
            <summary>
            An ID for this client assigned by the parent server on creation.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.Socket">
            <summary>The underlying socket.</summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.AsyncArgs">
            <summary>Args used when sending messages.</summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.Hello">
            <summary>True if hello is required.</summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.CurrentBufferPointer">
            <summary>
            Current byte index in the buffer.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.First">
            <summary>
            First buffer in a chain of pending buffers.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.CanProcessSend">
            <summary>
            True if sending can happen. It's false (and sent messages will be queued) if e.g. the connection hasn't completed yet or a send is currently in progress.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.WaitForTaskBeforeReceive">
            <summary>
            Task to wait for before processing anything else, if it exists.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.SetContext(Api.Contexts.Context)">
            <summary>
            Sets the context on this client.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.Last">
            <summary>
            Last buffer in a chain of pending buffers.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.FirstSendFrame">
            <summary>
            Front of the send queue.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.LastSendFrame">
            <summary>
            Back of the send queue.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.ScratchSpace">
            <summary>
            Scratch space whilst reading values from the stream.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.Server">
            <summary>
            The server this reader is related to.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.Context">
            <summary>
            The context of this client.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.BytesInBuffer">
            <summary>
            # of bytes in the buffer.
            </summary>
        </member>
        <member name="P:Api.SocketServerLibrary.Client.IP">
            <summary>Remote IP.</summary>
        </member>
        <member name="P:Api.SocketServerLibrary.Client.BytesAvailable">
            <summary>
            Current amount of unprocessed bytes in the buffers.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.WebsocketHeader">
            <summary>
            WS header used when sending out messages via a websocket. The header is sent when a queue starts being processed.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.SetupWebsocketHeader(System.Int64)">
            <summary>
            Sets up the websocket header, and returns the number of bytes that should be sent.
            </summary>
            <param name="length"></param>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.RecvStackPointer">
            <summary>
            Current index of the top of the recv stack. The stack always has an opcode frame on it, so the pointer starts at 0.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.RecvStack">
            <summary>
            The stack of things being received.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.WebsocketMask">
            <summary>
            Websocket mask info used if in websocket mode.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.BytesUntilWebsocketHeader">
            <summary>
            Current # of bytes until next WS header.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Client.WebsocketMaskIndex">
            <summary>0-3 index in the websocket mask.</summary>
        </member>
        <member name="P:Api.SocketServerLibrary.Client.IsWebsocketMode">
            <summary>True if this reader is running in websocket mode. It dumps websocket headers and handles xor masking.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.Pop">
            <summary>
            Pops from the receive stack, excluding websocket header readers.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.PopIgnoreWsHeader">
            <summary>
            Pops from the receive stack.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.Send(Api.SocketServerLibrary.Writer)">
            <summary>
            Sends the given writer contents.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.Close">
            <summary>
            Shuts down the socket that this sendqueue is associated to.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.CompletedCurrentSend">
            <summary>
            Called when the current send operation has completed.
            Proceeds to send the next thing in the queue.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.NextNoMask">
            <summary>
            Next byte without the WS mask.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.BlockTransfer(System.Int32,Api.SocketServerLibrary.Writer)">
            <summary>
            Transfers a block of bytes
            </summary>
            <param name="bytes"></param>
            <param name="intoWriter"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.Next">
            <summary>
            Gets the next byte in the current buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.#ctor">
            <summary>
            Creates a new client.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.Start">
            <summary>Start listening for data.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.DoReceive">
            <summary>
            Receive the next frame. Never call this directly except in very specific circumstances.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.OnReceiveData(System.IAsyncResult)">
            <summary>
            Used for handling all data.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.TaskCompletedContinueReceive">
            <summary>
            If you set WaitForTaskBeforeReceive to true, call this when you're done in order to continue receiving the latest message.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadBool">
            <summary>
            Reads a bool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadNBool">
            <summary>
            Reads a nullable bool
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadByte">
            <summary>
            Reads a byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadInt16">
            <summary>
            Reads an int16.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadUInt16">
            <summary>
            Reads a uint16.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadInt32">
            <summary>
            Reads an int32.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadUInt32">
            <summary>
            Reads a uint32.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadInt64">
            <summary>
            Reads an int64.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadUInt64">
            <summary>
            Reads a uint64.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadFloat">
            <summary>
            Reads a 4 byte float.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadDouble">
            <summary>
            Reads an 8 byte double.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadDateTime">
            <summary>
            Reads an 8 byte datetime.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadNInt16">
            <summary>
            Reads a nullable int16.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadNUInt16">
            <summary>
            Reads a nullable uint16.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadNInt32">
            <summary>
            Reads a nullable int32.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadNUInt32">
            <summary>
            Reads a nullable uint32.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadNInt64">
            <summary>
            Reads a nullable int64.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadNUInt64">
            <summary>
            Reads a nullable uint64.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadNFloat">
            <summary>
            Reads a nullable 4 byte float.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadNDouble">
            <summary>
            Reads a nullable 8 byte double.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadNDateTime">
            <summary>
            Reads a nullable 8 byte datetime.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadUTF16">
            <summary>
            Reads a UTF16 string, allocating it once.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadCompressed">
            <summary>
            Reads a compressed number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadUString">
            <summary>
            Reads a ustring.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.ReadBytes">
            <summary>
            Reads a block of bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Client.Skip(System.Int32)">
            <summary>
            Skips x bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.SocketServerLibrary.CompleteMessageReader">
            <summary>
            Used when reading a complete message. It is outputted as a writer, opcode included.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.CompleteMessageReader.#ctor(Api.SocketServerLibrary.CompleteMessageOpCode)">
            <summary>
            Used when reading a complete message, typically for forwarding to other servers.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.CompleteMessageReader.Process(Api.SocketServerLibrary.RecvStackFrame@,Api.SocketServerLibrary.Client)">
            <summary>
            Processes this received frame.
            </summary>
            <param name="frame"></param>
            <param name="client"></param>
        </member>
        <member name="T:Api.SocketServerLibrary.Crc32">
            <summary>
            Computes the CRC32 of blocks of bytes.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Crc32.DefaultSeed">
            <summary>Seed</summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Crc32.DefaultPolynomial">
            <summary>Polynomial</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crc32.GetTable">
            <summary>Gets the raw table</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crc32.Compute(System.Byte[],System.Byte[],System.Int32)">
            <summary>Computes the default CRC32 for the given input data and 
            writes it into the given block of bytes (little endian).</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crc32.GetBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Gets the bytes of the given uint.
            </summary>
            <param name="value"></param>
            <param name="result"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crc32.Compute(System.Byte[])">
            <summary>Computes the default CRC32 for the given input data.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crc32.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>Computes the default CRC32 for the given input data.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crc32.Compute(System.Byte[],System.Int32,System.Int32,System.UInt32)">
            <summary>Computes the CRC32, applying it to the given one, for the given input data.</summary>
        </member>
        <member name="T:Api.SocketServerLibrary.Crypto.Aes128Cm">
            <summary>
            AES-128-CM, hardware accelerated on X86 architectures only.
            This is the cipher used by SRTP/ WebRTC and note that it is not quite the same as AES-GCM.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.Aes128Cm.#ctor(System.Span{System.Byte})">
            <summary>
            Creates a new accelerated AES128 instance. The resulting object is thread safe as it is internally stateless.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.Aes128Cm.Init(System.Span{System.Byte})">
            <summary>
            Sets up the given key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.Aes128Cm.DumpKeys">
            <summary>
            Displays the round keys
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.Aes128Cm.Process(System.Byte[],System.Int32,System.Int32,System.Span{System.Byte})">
            <summary>
            Thread safe.
            Encrypts the given plaintext, or decrypts the given ciphertext, in place. 
            Note that this method expects that the plaintext is relatively short (typically a single packet).
            </summary>
            <param name="buff"></param>
            <param name="off"></param>
            <param name="len"></param>
            <param name="iv"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.Aes128Cm.GetCipherStream(System.Byte[],System.Int32,System.Span{System.Byte})">
            <summary>
            section 4.1.1 in RFC3711. Thread safe - you can call this with as many threads as you want.
            </summary>
            <param name="output"></param>
            <param name="length"></param>
            <param name="iv"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.Aes128Cm.GetCipherStream(System.Span{System.Byte},System.Span{System.Byte})">
            <summary>
            section 4.1.1 in RFC3711. Thread safe - you can call this with as many threads as you want.
            </summary>
            <param name="output"></param>
            <param name="iv"></param>
        </member>
        <member name="T:Api.SocketServerLibrary.Crypto.AesEngine">
            <summary>
            AES 2nd tier perfomance vs. memory. Originally from BouncyCastle and upgraded to support stackalloc spans.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.AesEngine.DumpKeys">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.AesEngine.GenerateWorkingKey(System.Byte[],System.Boolean)">
            Calculate the necessary round keys
            The number of calculations depends on key size and block size
            AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits
            This code is written assuming those are the only possible values
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.AesEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.AesEngine.Init(System.Boolean,System.Byte[])">
             initialise an AES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="P:Api.SocketServerLibrary.Crypto.AesEngine.AlgorithmName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Api.SocketServerLibrary.Crypto.AesEngine.IsPartialBlockOkay">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.AesEngine.GetBlockSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.AesEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="inOff"></param>
            <param name="output"></param>
            <param name="outOff"></param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.AesEngine.ProcessBlock(System.Span{System.Byte},System.Int32,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="inOff"></param>
            <param name="output"></param>
            <param name="outOff"></param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.AesEngine.ProcessBlock(System.Span{System.Byte},System.Int32,System.Span{System.Byte},System.Int32)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="inOff"></param>
            <param name="output"></param>
            <param name="outOff"></param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.AesEngine.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.AesEngine.EncryptBlock(System.Span{System.Byte},System.Int32,System.Span{System.Byte},System.Int32)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="inOff"></param>
            <param name="output"></param>
            <param name="outOff"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.AesEngine.EncryptBlock(System.Span{System.Byte},System.Int32,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="inOff"></param>
            <param name="output"></param>
            <param name="outOff"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.AesEngine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="inOff"></param>
            <param name="output"></param>
            <param name="outOff"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.AesEngine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="inOff"></param>
            <param name="output"></param>
            <param name="outOff"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.AesEngine.DecryptBlock(System.Span{System.Byte},System.Int32,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.AesEngine.DecryptBlock(System.Span{System.Byte},System.Int32,System.Span{System.Byte},System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.Crypto.DigestState">
            <summary>
            Stores digest state
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Crypto.DigestState.State">
            <summary>
            The main digest state in 4 byte words
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Crypto.DigestState.XBuffer">
            <summary>
            Bytes to be processed
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Crypto.DigestState.XBufOffset">
            <summary>
            0-3 value offset in the xbuffer (bytes yet to be processed)
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Crypto.DigestState.ByteCount">
            <summary>
            Total bytes processed
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.DigestState.#ctor(System.Span{System.UInt32},System.Span{System.Byte},System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <param name="xBuffer"></param>
            <param name="xOffset"></param>
            <param name="byteCount"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.DigestState.CopyTo(System.Span{System.UInt32},System.Span{System.Byte})">
            <summary>
            
            </summary>
            <param name="state"></param>
            <param name="xBuffer"></param>
        </member>
        <member name="T:Api.SocketServerLibrary.Crypto.GeneralDigest">
            <summary>
            base implementation of MD4 family style digest as outlined in "Handbook of Applied Cryptography", pages 344 - 347.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.GeneralDigest.Update(System.Byte,System.Span{System.UInt32},System.Span{System.Byte},System.Int32@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="runningState"></param>
            <param name="xBuf"></param>
            <param name="xBufOff"></param>
            <param name="byteCount"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.GeneralDigest.WordUpdate(System.UInt32,System.Span{System.UInt32},System.Span{System.Byte},System.Int32@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="runningState"></param>
            <param name="xBuf"></param>
            <param name="xBufOff"></param>
            <param name="byteCount"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.GeneralDigest.BlockUpdate(System.Span{System.Byte},System.Int32,System.Int32,System.Span{System.UInt32},System.Span{System.Byte},System.Int32@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="inOff"></param>
            <param name="length"></param>
            <param name="runningState"></param>
            <param name="xBuf"></param>
            <param name="xBufOff"></param>
            <param name="byteCount"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.GeneralDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32,System.Span{System.UInt32},System.Span{System.Byte},System.Int32@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="inOff"></param>
            <param name="length"></param>
            <param name="runningState"></param>
            <param name="xBuf"></param>
            <param name="xBufOff"></param>
            <param name="byteCount"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.GeneralDigest.Finish(System.Span{System.UInt32},System.Span{System.Byte},System.Int32@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="runningState"></param>
            <param name="xBuf"></param>
            <param name="xBufOff"></param>
            <param name="byteCount"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.GeneralDigest.Reset(System.Span{System.UInt32})">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.GeneralDigest.GetBufferSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.GeneralDigest.ProcessWord(System.Byte[],System.Int32,System.Span{System.UInt32})">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="inOff"></param>
            <param name="runningState"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.GeneralDigest.ProcessWord(System.Span{System.Byte},System.Int32,System.Span{System.UInt32})">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="inOff"></param>
            <param name="runningState"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.GeneralDigest.ProcessLength(System.Int64,System.Span{System.UInt32})">
            <summary>
            
            </summary>
            <param name="bitLength"></param>
            <param name="runningState"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.GeneralDigest.ProcessBlock(System.Span{System.UInt32})">
            <summary>
            
            </summary>
            <param name="runningState"></param>
        </member>
        <member name="P:Api.SocketServerLibrary.Crypto.GeneralDigest.AlgorithmName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.GeneralDigest.GetDigestSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.GeneralDigest.DoFinalNoReset(System.Byte[],System.Int32,System.Span{System.UInt32},System.Span{System.Byte},System.Int32@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="output"></param>
            <param name="outOff"></param>
            <param name="X"></param>
            <param name="xBuf"></param>
            <param name="xBufOff"></param>
            <param name="byteCount"></param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.GeneralDigest.DoFinalNoReset(System.Span{System.Byte},System.Int32,System.Span{System.UInt32},System.Span{System.Byte},System.Int32@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="output"></param>
            <param name="outOff"></param>
            <param name="X"></param>
            <param name="xBuf"></param>
            <param name="xBufOff"></param>
            <param name="byteCount"></param>
            <returns></returns>
        </member>
        <member name="T:Api.SocketServerLibrary.Crypto.HMac">
             HMAC implementation based on RFC2104
            
             H(K XOR opad, H(K XOR ipad, text))
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.HMac.#ctor(Api.SocketServerLibrary.Crypto.GeneralDigest)">
            <summary>
            
            </summary>
            <param name="digest"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.HMac.StatelessOutput(System.Byte[],System.Int32,System.Int32,System.UInt32,System.Span{System.Byte})">
            <summary>
            Can be called by multiple threads simultaneously. This generates a hash exclusively on the stack using the local keying material as readonly.
            </summary>
            <param name="packetBuffer"></param>
            <param name="startIndex"></param>
            <param name="size"></param>
            <param name="rocIn"></param>
            <param name="outputBuffer"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.HMac.StatelessOutputSingleBlock(System.Byte[],System.Int32,System.Int32,System.Span{System.Byte})">
            <summary>
            Can be called by multiple threads simultaneously. This generates a hash exclusively on the stack using the local keying material as readonly.
            </summary>
            <param name="packetBuffer"></param>
            <param name="startIndex"></param>
            <param name="size"></param>
            <param name="outputBuffer"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.HMac.Init(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="keyOffset"></param>
            <param name="keyLength"></param>
        </member>
        <member name="T:Api.SocketServerLibrary.Crypto.Sha1Digest">
            <summary>
            Stateless implementation of SHA1.
            This object can be instanced once globally and reused by stack based state.
            </summary>
        </member>
        <member name="P:Api.SocketServerLibrary.Crypto.Sha1Digest.AlgorithmName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.Sha1Digest.GetDigestSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.Sha1Digest.GetBufferSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.Sha1Digest.DoFinalNoReset(System.Byte[],System.Int32,System.Span{System.UInt32},System.Span{System.Byte},System.Int32@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="output"></param>
            <param name="outOff"></param>
            <param name="X"></param>
            <param name="xBuf"></param>
            <param name="xBufOff"></param>
            <param name="byteCount"></param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.Sha1Digest.DoFinalNoReset(System.Span{System.Byte},System.Int32,System.Span{System.UInt32},System.Span{System.Byte},System.Int32@,System.Int64@)">
            <summary>
            
            </summary>
            <param name="output"></param>
            <param name="outOff"></param>
            <param name="X"></param>
            <param name="xBuf"></param>
            <param name="xBufOff"></param>
            <param name="byteCount"></param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.Sha1Digest.Reset(System.Span{System.UInt32})">
            reset the chaining variables
        </member>
        <member name="T:Api.SocketServerLibrary.Crypto.Sha3Digest">
            <summary>
            Implementation of SHA-3 based on following KeccakNISTInterface.c from http://keccak.noekeon.org/
            </summary>
            <remarks>
            Following the naming conventions used in the C source code to enable easy review of the implementation.
            </remarks>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.Sha3Digest.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.Sha3Digest.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="bitLength"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.Sha3Digest.#ctor(Api.SocketServerLibrary.Crypto.Sha3Digest)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Api.SocketServerLibrary.Crypto.Sha3Digest.AlgorithmName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.Sha3Digest.DoFinal(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="output"></param>
            <param name="outOff"></param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.Sha3Digest.DoFinal(System.Span{System.Byte},System.Int32)">
            <summary>
            
            </summary>
            <param name="output"></param>
            <param name="outOff"></param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.Sha3Digest.DoFinal(System.Byte[],System.Int32,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="output"></param>
            <param name="outOff"></param>
            <param name="partialByte"></param>
            <param name="partialBits"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Api.SocketServerLibrary.Crypto.KeccakDigest">
            <summary>
            Implementation of Keccak based on following KeccakNISTInterface.c from http://keccak.noekeon.org/
            </summary>
            <remarks>
            Following the naming conventions used in the C source code to enable easy review of the implementation.
            </remarks>
        </member>
        <member name="F:Api.SocketServerLibrary.Crypto.KeccakDigest.state">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Crypto.KeccakDigest.dataQueue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Crypto.KeccakDigest.rate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Crypto.KeccakDigest.bitsInQueue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Crypto.KeccakDigest.fixedOutputLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Crypto.KeccakDigest.squeezing">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="bitLength"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.#ctor(Api.SocketServerLibrary.Crypto.KeccakDigest)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Api.SocketServerLibrary.Crypto.KeccakDigest.AlgorithmName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.GetDigestSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.Update(System.Byte)">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="inOff"></param>
            <param name="len"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.DoFinal(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="output"></param>
            <param name="outOff"></param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.DoFinal(System.Span{System.Byte},System.Int32)">
            <summary>
            
            </summary>
            <param name="output"></param>
            <param name="outOff"></param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.DoFinal(System.Byte[],System.Int32,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="output"></param>
            <param name="outOff"></param>
            <param name="partialByte"></param>
            <param name="partialBits"></param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.GetByteLength">
            <summary>
            Return the size of block that the compression function is applied to in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.Init(System.Int32)">
            <summary>
            
            </summary>
            <param name="bitLength"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.InitSponge(System.Int32)">
            <summary>
            
            </summary>
            <param name="rate"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.Absorb(System.Byte)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.Absorb(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="off"></param>
            <param name="len"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.AbsorbBits(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="bits"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.PadAndSwitchToSqueezingPhase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.Squeeze(System.Byte[],System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="output"></param>
            <param name="offset"></param>
            <param name="outputLength"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.Squeeze(System.Span{System.Byte},System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="output"></param>
            <param name="offset"></param>
            <param name="outputLength"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.KeccakAbsorb(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="off"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.KeccakExtract">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Crypto.KeccakDigest.KeccakPermutation">
            <summary>
            
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.FloatBits">
            <summary>
            A rapid way for converting between raw bytes and a float by making a uint overlap a float.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.FloatBits.Float">
            <summary>
            The float value. Used to read the float value.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.FloatBits.Int">
            <summary>
            The uint value. Used to read the bytes.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.FloatBits.#ctor(System.Single)">
            <summary>
            Sets up for a given float.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.FloatBits.#ctor(System.UInt32)">
            <summary>
            Sets up for a given set of 4 bytes in a uint.
            </summary>
            <param name="v"></param>
        </member>
        <member name="T:Api.SocketServerLibrary.DoubleBits">
            <summary>
            A rapid way for converting between raw bytes and a double by making a ulong overlap a double.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.DoubleBits.Double">
            <summary>
            The double value. Used to read the float value.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.DoubleBits.Int">
            <summary>
            The ulong value. Used to read the bytes.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.DoubleBits.#ctor(System.Double)">
            <summary>
            Sets up for a given double.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.DoubleBits.#ctor(System.UInt64)">
            <summary>
            Sets up for a given set of 8 bytes in a ulong.
            </summary>
            <param name="v"></param>
        </member>
        <member name="T:Api.SocketServerLibrary.GenericMessageReader`1">
            <summary>
            Reads generic messages which start with [opcode][4 byte int size][payload]
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.GenericMessageReader`1.#ctor(Api.SocketServerLibrary.BoltReaderWriter{`0},Api.SocketServerLibrary.OpCode{`0})">
            <summary>
            Creates a message reader for the given bolt IO.
            </summary>
            <param name="boltIO"></param>
            <param name="opcode"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.GenericMessageReader`1.Process(Api.SocketServerLibrary.RecvStackFrame@,Api.SocketServerLibrary.Client)">
            <summary>
            
            </summary>
            <param name="frame"></param>
            <param name="client"></param>
        </member>
        <member name="T:Api.SocketServerLibrary.Hex">
            <summary>
            Fast byte arrays to/from hex.
            Use only if really necessary.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Hex.Lookup">
            <summary>
            Raw hex lookup.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Hex.Convert(System.Byte[])">
            <summary>
            Converts given byte array to hex string.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Hex.Convert(System.Span{System.Byte})">
            <summary>
            Converts given byte array to hex string.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Hex.ConvertWithSeparator(System.Byte[],System.Char)">
            <summary>
            Converts given byte array to hex string, with a separator between the chars.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Hex.ConvertWithSeparator(System.Byte[],System.Int32,System.Int32,System.Char)">
            <summary>
            Converts given byte array to hex string, with a separator between the chars.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Hex.Convert(System.Byte[],System.Int32)">
            <summary>
            Converts given byte array to hex string.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Hex.ToByte(System.String)">
            <summary>
            Converts the given 2 character hex string to a byte.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Hex.Convert(System.String)">
            <summary>
            Converts given hex string to byte array.
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.Message`1">
            <summary>
            A particular message received by a socket. These objects are pooled.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Message`1.PoolLock">
            <summary>
            Handles thread access to the pool.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Message`1.First">
            <summary>
            First pooled object
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Message`1.Release">
            <summary>
            Releases this message object back to the pool.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Message`1.Get">
            <summary>
            Gets a message of this type from a pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Message`1.Write(System.Byte,Api.SocketServerLibrary.Writer)">
            <summary>
            Writes this message to a writer.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.SocketServerLibrary.Message`1.OpCode">
            <summary>
            The opcode this message is for.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Message`1.Client">
            <summary>
            The reader that read this message.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Message`1.After">
            <summary>
            Next message when this one is in the pool.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Message`1.Pooled">
            <summary>
            True if this object is currently pooled.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Message`1.#ctor">
            <summary>
            Instances a new message. These are often pooled.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Message`1.AsyncHandler">
            <summary>
            Cached delegate to avoid instancing one.
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.MessageReader">
            <summary>
            Handles reading bytes from the stream for the current message.
            Note that these are shared instances and must not store any reader-specific state.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.MessageReader.Process(Api.SocketServerLibrary.RecvStackFrame@,Api.SocketServerLibrary.Client)">
            <summary>
            Process is called when the reader has enough data available.
            </summary>
            <param name="frame"></param>
            <param name="client"></param>
        </member>
        <member name="F:Api.SocketServerLibrary.MessageReader.FirstDataRequired">
            <summary>
            Number of bytes required for phase 0 to start reading.
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.MetaFieldType">
            <summary>
            Used by the probe when defining what raw bytes on the line mean.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MetaFieldType.Nothing">
            <summary>
            No type.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MetaFieldType.Done">
            <summary>
            Indicates the end of a message.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MetaFieldType.Signed">
            <summary>
            Indicates a signed number.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MetaFieldType.Buffer">
            <summary>
            Indicates a raw buffer, but also strings.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MetaFieldType.NulString">
            <summary>
            Indicates nul strings.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MetaFieldType.Compressed">
            <summary>
            Indicates a compressed number.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MetaFieldType.Packed">
            <summary>
            Indicates a packed number.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MetaFieldType.Float">
            <summary>
            Indicates a float.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MetaFieldType.Bytes">
            <summary>
            Indicates a block of bytes.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MetaFieldType.Unsigned">
            <summary>
            Indicates an unsigned number.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MetaFieldType.Opcode">
            <summary>
            Indicates an opcode.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MetaFieldType.Date">
            <summary>
            Indicates a datetime.
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.OpCode">
            <summary>
            An opcode for a message to/ from the server.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.OpCode.Code">
            <summary>
            The numeric opcode.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.OpCode.MessageReader">
            <summary>
            A message reader. Often this is a generated class, but can be custom crafted.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.OpCode.HasSomethingToDo">
            <summary>
            True if this opcode has some sort of handler. Set this false to ignore an opcode entirely.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.OpCode.IsHello">
            <summary>
            True if this opcode is for a hello message.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.OpCode.Start(Api.SocketServerLibrary.Client)">
            <summary>
            Starts handling this opcode.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.SocketServerLibrary.MessageFieldMeta`1">
            <summary>
            Meta about a field in a message.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MessageFieldMeta`1.OnWrite">
            <summary>
            Called to write the field value to the message.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.MessageFieldMeta`1.SetWrite(System.Object)">
            <summary>
            Sets the write method handler.
            </summary>
            <param name="action">An Action with writer and a field of the value type T.</param>
        </member>
        <member name="M:Api.SocketServerLibrary.MessageFieldMeta`1.Write(Api.SocketServerLibrary.Writer,System.Object,System.Object@)">
            <summary>
            Writes to the given writer
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="message">The message object.</param>
            <param name="currentObject">The current object being sent.</param>
        </member>
        <member name="T:Api.SocketServerLibrary.MessageFieldMeta">
            <summary>
            Meta about a field in a message.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MessageFieldMeta.FieldDescription">
            <summary>
            A textual description of the field such that a 
            remote host can establish how to read it.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MessageFieldMeta.ChangeToFieldValue">
            <summary>
            Changes the current context to the field's value.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MessageFieldMeta.ChangeToMessage">
            <summary>
            Changes the current context back to the message.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MessageFieldMeta.Field">
            <summary>
            Get/ set the value here.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.MessageFieldMeta.Next">
            <summary>
            Next field
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.MessageFieldMeta.Write(Api.SocketServerLibrary.Writer,System.Object,System.Object@)">
            <summary>
            Writes to the given write stream
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="message">The message object.</param>
            <param name="currentObject">The current object being sent.</param>
        </member>
        <member name="M:Api.SocketServerLibrary.MessageFieldMeta.SetWrite(System.Object)">
            <summary>
            Sets the write method handler.
            </summary>
            <param name="action">An Action with writer and a field of the value type T.</param>
        </member>
        <member name="T:Api.SocketServerLibrary.CompleteMessageOpCode">
            <summary>
            Used when reading a complete message as-is into a writer.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.CompleteMessageOpCode.OnRequest">
            <summary>
            The action to use
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.CompleteMessageOpCode.Start(Api.SocketServerLibrary.Client)">
            <summary>
            Start receive
            </summary>
            <param name="client"></param>
        </member>
        <member name="T:Api.SocketServerLibrary.OpCode`1">
            <summary>
            An opcode handling the given message type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Api.SocketServerLibrary.OpCode`1.OnRequest">
            <summary>
            The delegate which runs when this opcode triggers.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.OpCode`1.OnRequestAsync">
            <summary>
            The delegate which runs when this opcode triggers (async callback)
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.OpCode`1.#ctor">
            <summary>
            Creates a new opcode.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.OpCode`1.Async">
            <summary>
            True if this opcode uses the async mode, where OnReceiveAsync will be called. Note that it MUST have a message type.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.OpCode`1.Start(Api.SocketServerLibrary.Client)">
            <summary>
            Starts handling this opcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.OpCode`1.OnReceive(Api.SocketServerLibrary.Client,`0)">
            <summary>
            Runs when the given message has been completely received. The message object can be null.
            </summary>
            <param name="client"></param>
            <param name="message"></param>
        </member>
        <member name="T:Api.SocketServerLibrary.OpCodeReader">
            <summary>
            Handles reading an opcode.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.OpCodeReader.Instance">
            <summary>
            Globally shared opcode reader.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.OpCodeReader.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.OpCodeReader.Process(Api.SocketServerLibrary.RecvStackFrame@,Api.SocketServerLibrary.Client)">
            <summary>
            Process is called when the reader has enough data available.
            </summary>
            <param name="frame"></param>
            <param name="client"></param>
        </member>
        <member name="T:Api.SocketServerLibrary.PreGeneratedByteField">
            <summary>
            A field containing a pre-generated byte[].
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.PreGeneratedByteField.Field">
            <summary>
            The field.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.PreGeneratedByteField.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.PreGeneratedByteField.Write(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits a write of this field into the ILGenerator.
            </summary>
            <param name="writerBody"></param>
        </member>
        <member name="T:Api.SocketServerLibrary.ProbeMeta">
            <summary>
            Used in debug to ensure the data streams remain in sync.
            </summary> 
        </member>
        <member name="F:Api.SocketServerLibrary.ProbeMeta.Messages">
            <summary>
            All the types of things that were written to the message.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.ProbeMeta.#ctor">
            <summary>
            Create a new probe meta.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.ProbeMeta.OpCode">
            <summary>
            The opcode of the message being documented.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.ProbeMeta.VerifiedTo">
            <summary>
            Where we've verified to (on read).
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.ProbeMeta.LoadingProbeMessage">
            <summary>
            True if we're currently reading a probe message (and all verifies should be ignored).
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.ProbeMeta.FilledTo">
            <summary>
            Where the array is filled to.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.ProbeMeta.DebugThisNow(System.Int32,System.String)">
            <summary>Outputs to the log.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.ProbeMeta.Reset">
            <summary>
            Resets the probe meta.
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.ProbeMetaEntry">
            <summary>
            A particular entry in the probe meta.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.ProbeMetaEntry.Nothing">
            <summary>
            A non-entry.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.ProbeMetaEntry.Opcode">
            <summary>
            An entry for an opcode.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.ProbeMetaEntry.Type">
            <summary>
            The type of the field that was written.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.ProbeMetaEntry.Length">
            <summary>
            Relevant field length.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.ProbeMetaEntry.ToString">
            <summary>
            Views this entry as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.SocketServerLibrary.RecvStackFrame">
            <summary>
            A frame on the read stack. Tracks the state of the data read head.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.RecvStackFrame.Phase">
            <summary>
            Current phase number.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.RecvStackFrame.BytesRequired">
            <summary>
            number of bytes required for this frame to be able to process anything.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.RecvStackFrame.Reader">
            <summary>
            The reader which will process the available bytes.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.RecvStackFrame.TargetObject">
            <summary>
            Target object, if there is one.
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.SendStackFrame">
            <summary>
            A frame on the read stack. Tracks the state of the data read head.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.SendStackFrame.First">
            <summary>
            First pooled object
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.SendStackFrame.Release">
            <summary>
            Releases this frame back to the pool.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.SendStackFrame.Get">
            <summary>
            Gets a message of this type from a pool.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.SocketServerLibrary.SendStackFrame.After">
            <summary>
            Linked list of frames.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.SendStackFrame.Current">
            <summary>
            Current buffer in the writer.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.SendStackFrame.Writer">
            <summary>
            The reader which will process the available bytes.
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.Server`1">
            <summary>
            A realtime zero allocation socket server.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Api.SocketServerLibrary.Server`1.OnConnected">
            <summary>
            Called when a client connected.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Server`1.Connected(`0)">
            <summary>
            Called when a client connected.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Server`1.Id">
            <summary>
            Current latest locally assigned client ID.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Server`1.SocketConnected(System.Net.Sockets.Socket)">
            <summary>
            Called when the given socket connected.
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Server`1.ConnectTo(System.String,System.Int32,System.UInt32,System.Action{`0})">
            <summary>
            Explicitly connect to a remote host (another server of this type).
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Server`1.OnConnectResult(System.IAsyncResult)">
            <summary>
            A response to an explicit connect to.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Server`1.ConnectTo(System.Net.IPAddress,System.Int32,System.UInt32,System.Action{`0})">
            <summary>
            Explicitly connect to a remote host (another server of this type).
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.Server">
            <summary>
            Base server class. Use the generic form instead.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Server.Port">
            <summary>
            The port this server listens on.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Server.GoingDown">
            <summary>
            True if this server is going down.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Server.UnixSocketFileName">
            <summary>
            If this is set, the socket will also listen on a Unix socket file with the given name.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Server.ServerSocket">
            <summary>
            The server socket.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Server.BindAddress">
            <summary>
            The bind address.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Server.OpCodeMap">
            <summary>
            The map of opcodes that this server handles.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Server.MaxOpCode">
            <summary>
            The max opcode registered.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Server.FastOpCodeMap">
            <summary>
            A more compact version of the opcode map. Instanced when Start is called, if you have a less than 5000 max opcode, after you've registered your opcodes.
            </summary>
        </member>
        <member name="E:Api.SocketServerLibrary.Server.OnStart">
            <summary>
            Called when this server starts.
            </summary>
        </member>
        <member name="E:Api.SocketServerLibrary.Server.OnStopped">
            <summary>
            Called when this server stops.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Server.RegisterOpCode(System.UInt32)">
            <summary>
            Adds a handler for an opcode - it just recognises the opcode, and then effectively does nothing.
            </summary>
            <param name="opcode"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Server.RegisterOpCode(System.UInt32,System.Action{Api.SocketServerLibrary.Client,Api.SocketServerLibrary.Writer})">
            <summary>
            Adds a handler for an opcode - it just recognises the opcode, and then effectively does nothing.
            </summary>
            <param name="opcode"></param>
            <param name="onRequest"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Server.RegisterOpCode``1(System.UInt32,System.Func{Api.SocketServerLibrary.Client,``0,System.Threading.Tasks.ValueTask},Api.SocketServerLibrary.MessageReader)">
            <summary>
            Add an opcode handler.
            </summary>
            <param name="opcode"></param>
            <param name="onRequest"></param>
            <param name="reader"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Server.RegisterOpCode``1(System.UInt32,System.Action{Api.SocketServerLibrary.Client,``0},Api.SocketServerLibrary.MessageReader)">
            <summary>
            Add an opcode handler.
            </summary>
            <param name="opcode"></param>
            <param name="onRequest"></param>
            <param name="reader"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Server.AddToOpcodeMap(System.UInt32,Api.SocketServerLibrary.OpCode)">
            <summary>
            Adds the given opcode instance to the opcode map
            </summary>
            <param name="opcode"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Server.SocketConnected(System.Net.Sockets.Socket)">
            <summary>
            Called when the given socket has connected.
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Server.Start">
            <summary>
            Start the server.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Server.Started">
            <summary>
            Called when this server has started up.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Server.Stop">
            <summary>
            Shutdown this server.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Server.Stopped">
            <summary>
            Called when this server stopped.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Server.AcceptWebsockets(System.Boolean)">
            <summary>
            Call this for this server to accept connections and messaging via websockets.
            </summary>
            <param name="requireApplicationHello"></param>
        </member>
        <member name="T:Api.SocketServerLibrary.SocketAsyncArgs">
            <summary>
            SocketAsyncEventArgs for a particular sendqueue.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.SocketAsyncArgs.Client">
            <summary>
            The client this is in.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.SocketAsyncArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Called when done sending.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Api.SocketServerLibrary.Time">
            <summary>
            Helpers for getting very quick time references.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Time.GlobalTime">
            <summary>
            The current time.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Time.TickStartTime">
            <summary>The number of seconds the system had been on for when the offset was computed.</summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Time.TickCountOffset">
            <summary>The offset to add to TickCount when the time is requested.</summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Time.UnixTime">
            <summary>The current unix time.</summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Time.StartDate">
            <summary>
            The SocketServerLibrary epoch.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Time.UpdateOffset">
            <summary>Recomputes the TickCountOffset.</summary>
        </member>
        <member name="P:Api.SocketServerLibrary.Time.Ticks">
            <summary>Gets the current number of milliseconds since 0000 as a global value.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Time.UnixTimeFrom(System.DateTime)">
            <summary>
            Gets the unix time from a given datetime.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Api.SocketServerLibrary.UdpDestination">
            <summary>
            Stores some general data for UDP packet servers.
            This is one instance per server.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.UdpDestination.Port">
            <summary>
            The port number this server is on
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.UdpDestination.PortAndIpV4">
            <summary>
            Established when the first raw IpV4 UDP packet is received here.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.UdpDestination.PortAndIpV6">
            <summary>
            Established when the first raw IpV6 UDP packet is received here.
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.UdpHeader">
            <summary>
            Reading and writing UDP and IP headers for both Ipv4 and Ipv6
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.UdpHeader.Identification">
            <summary>
            Rolling identification field
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.UdpHeader.V4HeaderSize">
            <summary>
            The size of an ipv4 header that this writes out.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.UdpHeader.V6HeaderSize">
            <summary>
            The size of an ipv6 header that this writes out.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.UdpHeader.PayloadStart(System.Byte[],Api.SocketServerLibrary.UdpDestination,System.UInt16@,System.Span{System.Byte}@,System.Boolean@)">
            <summary>
            Gets the index that the payload starts at.
            </summary>
            <param name="buffer"></param>
            <param name="server"></param>
            <param name="remotePort"></param>
            <param name="ipBytes">Source IP bytes are placed in this span. Must be 16 bytes.</param>
            <param name="isV4">True if it's a v4 address</param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.UdpHeader.StartHeader(Api.SocketServerLibrary.Writer,System.Byte[],System.UInt16,System.Span{System.Byte}@)">
            <summary>
            Starts a UDP packet header into the given writer.
            </summary>
            <param name="writer"></param>
            <param name="portAndSrc"></param>
            <param name="dstPort"></param>
            <param name="dstAddressBytes"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.UdpHeader.StartHeader(Api.SocketServerLibrary.Writer,System.Byte[],System.Byte[])">
            <summary>
            Starts a UDP packet header into the given writer.
            </summary>
            <param name="writer"></param>
            <param name="portAndSrc"></param>
            <param name="portAndDst"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.UdpHeader.Complete(Api.SocketServerLibrary.Writer)">
            <summary>
            Completes a UDP packet header, writing the lengths and checksum.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Api.SocketServerLibrary.Writer">
            <summary>
            A streamable message which writes to buffer pool.
            You must use GetPooled() and then a Start(..) overload to set it up.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.EscapedControl(System.Byte)">
            <summary>
            Escape the given control char. The given control char value must be true for Unicode.IsControl.
            </summary>
            <param name="control"></param>
        </member>
        <member name="F:Api.SocketServerLibrary.Writer._controlMap">
            <summary>
            Array of 128 pre-serialised control characters.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.PoolReset">
            <summary>
            Don't call this - it's for a pooled writer to reset itself.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.GetPooled">
            <summary>
            Gets a pooled writer.
            Generally use this rather than new Writer.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.StartSending">
            <summary>
            Starts sending this writer by increasing its send queue counter.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.RemoveFromSendQueue">
            <summary>
            Removes this writer from a send queue.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Writer.SendQueueCount">
            <summary>
            Number of send queues this writer is currently in.
            Releasing the writer will wait for this number to go down to 0.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Writer.ReleaseOnSent">
            <summary>
            True if this writer should be released when it's done being sent.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Writer.BaseLength">
            <summary>
            Base length.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Writer.FirstBuffer">
            <summary>The linked list of buffers that form this message.</summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Writer.LastBuffer">
            <summary>The linked list of buffers that form this message.</summary>
        </member>
        <member name="F:Api.SocketServerLibrary.Writer.NextInLine">
            <summary>Next writer in a queue after this one.</summary>
        </member>
        <member name="P:Api.SocketServerLibrary.Writer.BufferCount">
            <summary>
            The number of buffers in this writer.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Start(System.UInt32)">
            <summary>When using writers you must use a start method.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.StartWithLength">
            <summary>When using writers you must use a start method.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Start(System.Byte[])">
            <summary>When using writers you must use a start method.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.#ctor(Api.SocketServerLibrary.BinaryBufferPool)">
            <summary>
            Don't call directly - use aBinaryBufferPool.GetWriter(); instead. For the common 1kb buffer pool, use (static) Writer.GetPooled();
            That's the same as calling BinaryBufferPool.OneKb.GetWriter();
            </summary>
            <param name="pool"></param>
        </member>
        <member name="P:Api.SocketServerLibrary.Writer.Length">
            <summary>
            Total fill including any headers.
            </summary>
        </member>
        <member name="P:Api.SocketServerLibrary.Writer.LengthWithoutHeaders">
            <summary>
            Length excluding pool headers.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.NextBuffer">
            <summary>
            Used when the current buffer is totally full and a new one is required.
            </summary>
        </member>
        <member name="P:Api.SocketServerLibrary.Writer.CurrentFill">
            <summary>
            The current Fill value.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Reset(System.Byte[])">
            <summary>Reset by clearing the internal buffers and calls Start(template) such that the writer is ready to be used again.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Release">
            <summary>Called when a writer is no longer needed and should now be fully released.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.GetLocalIndex(System.Int32,Api.SocketServerLibrary.BufferedBytes@)">
            <summary>Gets the buffer and relative index for the given overall index.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.GetCrc32(System.Int32,System.Int32)">
            <summary>Gets a CRC32 for the given range of data.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteTo(System.IO.FileStream)">
            <summary>
            Writes this data to the given file stream.
            </summary>
            <param name="fs"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Start(System.Int32,System.Int32,Api.SocketServerLibrary.BufferedBytes,Api.SocketServerLibrary.BufferedBytes)">
            <summary>
            Sets up the internal buffers with the given info
            </summary>
            <param name="blockCount"></param>
            <param name="totalLength"></param>
            <param name="first"></param>
            <param name="last"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Boolean)">
            <summary>
             Writes a bool to this writer.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Collections.Generic.List{System.String})">
            <summary>
            Writes an array of strings to the writer. Each one is written as a UTF16.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Byte)">
            <summary>Write a single byte to the message. Write a block of bytes instead of using this if you can.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.UInt16)">
            <summary>Write a 2 byte unsigned value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteBE(System.UInt16)">
            <summary>Write a 2 byte unsigned value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Nullable{System.Boolean})">
            <summary>
             Writes a nullable bool to this writer.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Int16)">
            <summary>Write a 2 byte signed value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.UInt32)">
            <summary>Write a 4 byte unsigned value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteBE(System.UInt32)">
            <summary>Write a 4 byte unsigned value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Nullable{System.Int16})">
            <summary>
            Write a nullable int16 value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Nullable{System.Int32})">
            <summary>
            Write a nullable int32 value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Nullable{System.UInt32})">
            <summary>
            Write a nullable uint32 value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Nullable{System.UInt16})">
            <summary>
            Write a nullable uint16 value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Int32)">
            <summary>Write a 4 byte signed value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteUInt24BE(System.UInt32)">
            <summary>Write a 4 byte unsigned value to the message. Big endian.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteUInt24(System.UInt32)">
            <summary>Write a 4 byte unsigned value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteInt24(System.Int32)">
            <summary>Write a 3 byte signed value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Single)">
            <summary>Write a float value.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteBE(System.Single)">
            <summary>Write a float value.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Double)">
            <summary>Write a double value.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteBE(System.Double)">
            <summary>Write a double value.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.DateTime)">
            <summary>Write a date value.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Nullable{System.Single})">
            <summary>Write a float value.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Nullable{System.Double})">
            <summary>Write a double value.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Nullable{System.DateTime})">
            <summary>
            Write a nullable date value.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteASCII(System.String)">
            <summary>
            Writes the given short ascii string to this writer.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteAlphaChar(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a series of bytes from the given buffer as 2 letters. Somewhat like hex, but only uses letters.
            a = 0, b = 1, c = 2 etc.
            </summary>
            <param name="srcBuffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteS(System.Single)">
            <summary>
            Writes the given number out textually, allocates. Avoid unless necessary.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteS(System.Decimal)">
            <summary>
            Writes the given number out textually, allocates. Avoid unless necessary.
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteS(System.Double)">
            <summary>
            Writes the given number out textually, allocates. Avoid unless necessary.
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteS(System.UInt32)">
            <summary>
            Writes the given number out textually without allocating. Avoid unless necessary.
            </summary>
            <param name="n"></param>
        </member>
        <member name="F:Api.SocketServerLibrary.Writer.NullBytes">
            <summary>
            The bytes for "null"
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteEscaped(ustring)">
            <summary>
            Writes an escaped string surrounded in ", utf-8 encoded. Avoid whenever possible (used by e.g. JSON serialisation).
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteEscaped(System.String)">
            <summary>
            Writes an escaped string surrounded in ", utf-8 encoded. Avoid whenever possible (used by e.g. JSON serialisation).
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteS(System.DateTime)">
            <summary>
            Writes the given date as the number of milliseconds from year 0, UTC. Negative values are permitted, although C# DateTime doesn't support BC anyway.
            The JS epoch is in 1970, so a constant offset (62135596800000) can be applied to quickly convert to a JS date unambiguously.
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteS(System.Int32)">
            <summary>
            Writes the given number out textually without allocating. Avoid unless necessary.
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Int64DivMod1E9(System.UInt64@)">
            <summary>
            Ulong mod 1e9
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteS(System.UInt64)">
            <summary>
            Writes the given number out textually without allocating. Avoid unless necessary.
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteS(System.Int64)">
            <summary>
            Writes the given number out textually without allocating. Avoid unless necessary.
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.UInt64)">
            <summary>Write an 8 byte unsigned value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Int64)">
            <summary>Write an 8 byte signed value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteUInt40(System.UInt64)">
            <summary>Write a 5 byte signed value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteUInt40BE(System.UInt64)">
            <summary>Write a 5 byte signed value to the message (Big endian).</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteUInt48(System.UInt64)">
            <summary>Write a 6 byte signed value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteUInt48BE(System.UInt64)">
            <summary>Write a 6 byte signed value to the message. Big endian.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteCompressed(System.UInt64)">
            <summary>Write a compressed value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteInvertibleCompressedSigned(System.Nullable{System.Int64})">
            <summary>Write an invertible compressed nullable value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteInvertibleCompressedSignedNullable(System.Int64)">
            <summary>Write an invertible compressed nullable value to the message. The value was originally nullable.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteInvertibleCompressed(System.Nullable{System.UInt64})">
            <summary>Write an invertible compressed nullable value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteInvertibleCompressedSigned(System.Int64)">
            <summary>Write an invertible compressed value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteInvertibleCompressed(System.UInt64)">
            <summary>Write an invertible compressed value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.ReadCompressedAt(System.Int32@)">
            <summary>
            Use this to read a compressed number in the first block of a writer.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.ReadCompressed(System.Byte[],System.Int32@)">
            <summary>
            Read a compressed number at the given index in the given buffer.
            The index will be updated with the actual length of the compressed number.
            </summary>
            <param name="buff"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WritePackedInt(System.UInt64)">
            <summary>Write a compressed value to the message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.EnsureBytes(System.Int32)">
            <summary>
            Ensures the writer has the specified number of bytes added to it.
            </summary>
            <param name="bytesRequired"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Skip(System.Int32)">
            <summary>
            Writes a given number of nul bytes. Only used by MySQL during startup. 
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Byte[])">
            <summary>
            Writes bytes and its length.
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteS(System.String)">
            <summary>
            Writes the given string as UTF8 bytes, but without the length.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteUTF8(System.String)">
            <summary>
            Non-allocating string write, encoded in utf8.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteInvertible(System.Byte[])">
            <summary>
            Writes an invertible byte array
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteInvertibleUTF8(System.String)">
            <summary>
            Non-allocating string write, encoded in utf8, which has the length at both ends when necessary.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(ustring)">
            <summary>
            Non-allocating write of a utf8 string.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteUTF16(System.String)">
            <summary>
            Writes a string in its raw, UTF-16 byte format. Does not allocate.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteNulString(System.String)">
            <summary>
            A nul-terminated string. Only used by MySQL connections during startup.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteMySQLString(System.String)">
            <summary>
            Has the length of the string before it, packed using the MySQL format.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.ToUTF8String">
            <summary>
            Gets the whole thing as a UTF8 string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.ToASCIIString">
            <summary>
            Allocates an ASCII string from the bytes of this writer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.AllocatedResult">
            <summary>
            Allocates the complete chain of buffers as a byte array.
            Avoid unless necessary.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.AllocatedResultNoHeaders">
            <summary>
            Allocates the complete chain of buffers as a byte array, excluding buffer offsets.
            Avoid unless necessary.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.AllocateMemoryStream(System.Boolean)">
            <summary>
            Allocates the complete chain of buffers as a byte array.
            Avoid unless necessary.
            </summary>
            <param name="includeHeaders">Some writers/ pools add headers at the start of each buffer. Setting this to true includes those headers.</param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.CopyTo(System.IO.Stream)">
            <summary>
            Copies this writer result to the given stream.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.CopyTo(Api.SocketServerLibrary.Writer)">
            <summary>
            Copies this writer result to another writer.
            </summary>
            <param name="w"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.CopyToAsync(System.IO.Stream)">
            <summary>
            Copies this writer result to the given stream.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.WriteNoLength(System.Byte[])">
            <summary>Write a whole block of bytes to this message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Write a specific range of bytes to this message.</summary>
        </member>
        <member name="M:Api.SocketServerLibrary.Writer.Write(System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>Write a specific range of bytes to this message.</summary>
        </member>
        <member name="T:Api.SocketServerLibrary.WsHeaderReader">
            <summary>
            Handles reading a websocket header.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.WsHeaderReader.Instance">
            <summary>
            Globally shared reader.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.WsHeaderReader.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.WsHeaderReader.Process(Api.SocketServerLibrary.RecvStackFrame@,Api.SocketServerLibrary.Client)">
            <summary>
            Process is called when the reader has enough data available.
            </summary>
            <param name="frame"></param>
            <param name="client"></param>
        </member>
        <member name="T:Api.SocketServerLibrary.GetMessage">
            <summary>
            A get request.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.GetMessage.ContentType">
            <summary>
            Content type.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.GetMessage.Id">
            <summary>
            ID of the content.
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.ContentUpdate">
            <summary>
            A content update.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.ContentUpdate.JsonLength">
            <summary>
            Number of bytes in the JSON.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.ContentUpdate.Mode">
            <summary>
            Mode.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.ContentUpdate.LocaleId">
            <summary>
            Locale.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.ContentUpdate.Json">
            <summary>
            Raw json.
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.ListMessage">
            <summary>
            A list request.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.ListMessage.ContentType">
            <summary>
            Content type.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.ListMessage.Id">
            <summary>
            ID of the content.
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.JsonMessage">
            <summary>
            A wrapped JSON request.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.JsonMessage.Json">
            <summary>
            The complete JSON string.
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.WebsocketHandshake">
            <summary>
            Used when a websocket is connecting.
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.WebsocketHandshake.#ctor(System.Boolean)">
            <summary>
            Instanced by calling aServer.AcceptWebsockets()
            </summary>
            <param name="requireApplicationHello"></param>
        </member>
        <member name="P:Api.SocketServerLibrary.WebsocketHandshake.ContextService">
            <summary>
            Gets the context service.
            </summary>
        </member>
        <member name="T:Api.SocketServerLibrary.WebSocketHandshakeReader">
            <summary>
            Reads websocket handshakes. Is a global shared instance as it has no connection specific state.
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.WebSocketHandshakeReader.UpperCaseKeyHeader">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.WebSocketHandshakeReader.LowerCaseKeyHeader">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.WebSocketHandshakeReader.UpperCaseCookieHeader">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.WebSocketHandshakeReader.LowerCaseCookieHeader">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.WebSocketHandshakeReader.MagicString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.WebSocketHandshakeReader.HeaderTerminal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.WebSocketHandshakeReader.ProtocolSwitchResponse">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.WebSocketHandshakeReader.UpperCaseUserStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.WebSocketHandshakeReader.LowerCaseUserStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.WebSocketHandshakeReader.Sha1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Api.SocketServerLibrary.WebSocketHandshakeReader.ContextService">
            <summary>
            Context service
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.WebSocketHandshakeReader.#ctor(System.Boolean)">
            <summary>
            The WS handshake reader
            </summary>
        </member>
        <member name="M:Api.SocketServerLibrary.WebSocketHandshakeReader.WhitespaceOffset(Api.SocketServerLibrary.BufferedBytes)">
            <summary>
            Counts whitespace at the start of the given buffer.
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Api.SocketServerLibrary.WebSocketHandshakeReader.Process(Api.SocketServerLibrary.RecvStackFrame@,Api.SocketServerLibrary.Client)">
            <summary>
            
            </summary>
            <param name="frame"></param>
            <param name="client"></param>
        </member>
        <member name="T:Api.StackTools.NodeProcessState">
            <summary>
            The current state of a node process.
            </summary>
        </member>
        <member name="F:Api.StackTools.NodeProcessState.EXITING">
            <summary>
            Exiting
            </summary>
        </member>
        <member name="F:Api.StackTools.NodeProcessState.STARTING">
            <summary>
            Starting
            </summary>
        </member>
        <member name="F:Api.StackTools.NodeProcessState.FAILED">
            <summary>
            Dropped
            </summary>
        </member>
        <member name="F:Api.StackTools.NodeProcessState.READY">
            <summary>
            Ready to go
            </summary>
        </member>
        <member name="T:Api.StackTools.NodeProcess">
            <summary>
            An instance of a node.js process
            </summary>
        </member>
        <member name="M:Api.StackTools.NodeProcess.#ctor(System.String,System.Boolean)">
            <summary>
            Sets up a new process.
            cmd is of the form "socialstack interactive -p .."
            </summary>
            <param name="cmd">The socialstack command to spawn.</param>
            <param name="customOutputHandlers">True if you'd like to add custom data/ error handlers to the process.</param>
        </member>
        <member name="F:Api.StackTools.NodeProcess._serializerConfig">
            <summary>
            Used by the serializer when sending JSON to the node process.
            </summary>
        </member>
        <member name="F:Api.StackTools.NodeProcess.Process">
            <summary>
            The system process.
            </summary>
        </member>
        <member name="F:Api.StackTools.NodeProcess.SlotFill">
            <summary>
            How full the freeSlots array currently is.
            </summary>
        </member>
        <member name="F:Api.StackTools.NodeProcess.FreeSlots">
            <summary>
            Indicies in the callback array which are currently unused.
            </summary>
        </member>
        <member name="F:Api.StackTools.NodeProcess.PendingRequests">
            <summary>
            Pending callbacks.
            </summary>
        </member>
        <member name="M:Api.StackTools.NodeProcess.Kill">
            <summary>
            Kills the underlying process.
            </summary>
        </member>
        <member name="M:Api.StackTools.NodeProcess.GetResponseHandler(System.Int32)">
            <summary>
            Gets the handler for a particular request ID.
            </summary>
            <param name="requestId"></param>
            <returns></returns>
        </member>
        <member name="M:Api.StackTools.NodeProcess.GetRequestId(Api.StackTools.OnStackToolsResponse)">
            <summary>
            Obtains a request ID to use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.StackTools.NodeProcess.Collapse">
            <summary>
            The link has collapsed and the process should now exit.
            </summary>
        </member>
        <member name="M:Api.StackTools.NodeProcess.Resize(System.Int32)">
            <summary>
            Resizes the pending arrays because they're full, or because this is the first setup.
            </summary>
            <param name="newSize"></param>
        </member>
        <member name="M:Api.StackTools.NodeProcess.SetNodeProcess(System.Diagnostics.Process)">
            <summary>
            Sets the node process.
            </summary>
            <param name="process"></param>
        </member>
        <member name="E:Api.StackTools.NodeProcess.OnErrorData">
            <summary>
            Called when error data is received.
            </summary>
        </member>
        <member name="E:Api.StackTools.NodeProcess.OnData">
            <summary>
            Called when stdout data is received.
            </summary>
        </member>
        <member name="E:Api.StackTools.NodeProcess.OnStateChange">
            <summary>
            Called when the process has changed state. 0=Exiting, 1=Connecting, 2=Connected
            </summary>
        </member>
        <member name="M:Api.StackTools.NodeProcess.StateChange(Api.StackTools.NodeProcessState)">
            <summary>
            Trigger a state change.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Api.StackTools.NodeProcess.StartSync">
            <summary>
            Runs synchronously.
            </summary>
        </member>
        <member name="M:Api.StackTools.NodeProcess.Start">
            <summary>
            Attempts to start the process. Will output to stdout any messages that occur
            and raise a StateChange event if it doesn't start.
            </summary>
        </member>
        <member name="M:Api.StackTools.NodeProcess.Request(Api.StackTools.Request,Api.StackTools.OnStackToolsResponse)">
            <summary>
            Submits a request to the running shared process. When it's done, it runs your given callback.
            </summary>
            <param name="request">The raw request data</param>
            <param name="onResponse">Called when the request returns.</param>
        </member>
        <member name="T:Api.StackTools.Request">
            <summary>
            A request to a node process.
            </summary>
        </member>
        <member name="P:Api.StackTools.Request.action">
            <summary>
            The action to request.
            </summary>
        </member>
        <member name="P:Api.StackTools.Request._id">
            <summary>
            Request ID - set automatically and used to locate the response.
            </summary>
        </member>
        <member name="T:Api.StackTools.WatchRequest">
            <summary>
            A request to start watching file changes
            </summary>
        </member>
        <member name="P:Api.StackTools.WatchRequest.minified">
            <summary>
            True if the output should be minified
            </summary>
        </member>
        <member name="P:Api.StackTools.WatchRequest.compress">
            <summary>
            True if the output should be compressed
            </summary>
        </member>
        <member name="M:Api.StackTools.WatchRequest.#ctor">
            <summary>
            Create a new watch request.
            </summary>
        </member>
        <member name="T:Api.StackTools.OnStackToolsResponse">
            <summary>
            Delegate used when a response is received.
            </summary>
            <param name="error"></param>
            <param name="data"></param>
        </member>
        <member name="T:Api.StackTools.StackToolsService">
            <summary>
            This service is used to invoke the socialstack command line tools (node.js) 
            which e.g. build/ serverside render the UI and render emails etc.
            </summary>
        </member>
        <member name="F:Api.StackTools.StackToolsService.LockFile">
            <summary>
            Simply an empty file to indicate that the API is actively connected to the node process.
            This is the most reliable, as hard killing a process will not safely terminate a socket connection 
            (from the other ends point of view) but does always close open file handles.
            </summary>
        </member>
        <member name="F:Api.StackTools.StackToolsService.AttemptedInstall">
            <summary>
            True if we attempted an install.
            </summary>
        </member>
        <member name="F:Api.StackTools.StackToolsService.NodeProcess">
            <summary>
            The node.js Process
            </summary>
        </member>
        <member name="M:Api.StackTools.StackToolsService.#ctor">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.StackTools.StackToolsService.StopAll">
            <summary>
            Stops all processes.
            </summary>
        </member>
        <member name="M:Api.StackTools.StackToolsService.Request(Api.StackTools.Request,Api.StackTools.OnStackToolsResponse)">
            <summary>
            Get node.js to do something via sending it a serialisable request.
            Of the form {action: "name", ..anything else..}.
            </summary>
            <param name="msg"></param>
            <param name="onResult">This callback runs when it responds.</param>
        </member>
        <member name="M:Api.StackTools.StackToolsService.GetToolsVersion">
            <summary>
            Null if not installed.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Api.StackTools.StackToolsService.MinVersion">
            <summary>
            Min tools version
            </summary>
        </member>
        <member name="M:Api.StackTools.StackToolsService.SpawnWatcher">
            <summary>
            Spawns a new watch process.
            If it fails because the tools aren't installed, it will go ahead and try to install them.
            You can install manually too if you'd like: run "npm install -g socialstack".
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.StackTools.StackToolsServiceConfig">
            <summary>
            Config for the stack tools service.
            </summary>
        </member>
        <member name="P:Api.StackTools.StackToolsServiceConfig.WatcherActiveOnDebugBuilds">
            <summary>
            True (default) if the watcher is active on debug builds.
            </summary>
        </member>
        <member name="P:Api.StackTools.StackToolsServiceConfig.ProductionBuilds">
            <summary>
            True (default) if the watcher should make production minified builds each time.
            </summary>
        </member>
        <member name="T:Api.ColourConsole.WriteColourLine">
            <summary>
            </summary>
        </member>
        <member name="M:Api.ColourConsole.WriteColourLine.Success(System.String)">
            <summary>
            Outputs [marked] keywords in green (or the entire string if nothing marked)
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Api.ColourConsole.WriteColourLine.Error(System.String)">
            <summary>
            Outputs [marked] keywords in red (or the entire string if nothing marked)
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Api.ColourConsole.WriteColourLine.Warning(System.String)">
            <summary>
            Outputs [marked] keywords in yellow (or the entire string if nothing marked)
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Api.ColourConsole.WriteColourLine.Info(System.String)">
            <summary>
            Outputs [marked] keywords in cyan (or the entire string if nothing marked)
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Api.Swagger.EventListener">
            <summary>
            Listens for events to setup the development pack directory.
            </summary>
        </member>
        <member name="M:Api.Swagger.EventListener.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="T:Api.Swagger.SwaggerConfig">
            <summary>
            Config for swagger integration and controller mapping
            </summary>
        </member>
        <member name="P:Api.Swagger.SwaggerConfig.Title">
            <summary>
            Overide the title in the swagger rendering
            </summary>
        </member>
        <member name="P:Api.Swagger.SwaggerConfig.Description">
            <summary>
            Overide the description in the swagger rendering
            </summary>
        </member>
        <member name="P:Api.Swagger.SwaggerConfig.Version">
            <summary>
            Overide the version in the swagger rendering
            </summary>
        </member>
        <member name="P:Api.Swagger.SwaggerConfig.ExcludedEndpointTypes">
            <summary>
             Excluded endpoint types csv, pot etc 
            </summary>
        </member>
        <member name="P:Api.Swagger.SwaggerConfig.ExcludedServices">
            <summary>
            Excluded controllers (list oif service names to exclude)
            </summary>
        </member>
        <member name="P:Api.Swagger.SwaggerConfig.ExcludedOperations">
            <summary>
            Excluded operations (list of httpoperations POST, DELETE etc to exclude)
            </summary>
        </member>
        <member name="P:Api.Swagger.SwaggerConfig.IncludedServices">
            <summary>
            Included controllers (list of service names to include, if set only services in this list will be exposed)
            </summary>
        </member>
        <member name="P:Api.Swagger.SwaggerConfig.ExcludeSchema">
            <summary>
            Exclude the schema section
            </summary>
        </member>
        <member name="T:Api.Swagger.SwaggerService">
            <summary>
            Service to assist with swagger content management
            </summary>
        </member>
        <member name="F:Api.Swagger.SwaggerService._isConfigured">
            <summary>
            True if the service is active.
            </summary>
        </member>
        <member name="M:Api.Swagger.SwaggerService.#ctor">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Swagger.SwaggerService.GetConfiguration">
            <summary>
            Gets the service config (readonly).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Swagger.SwaggerService.IsConfigured">
            <summary>
            True if this service is configured and active.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Swagger.SwaggerService.UpdateIsConfigured">
            <summary>
            Sets _isConfigured
            </summary>
        </member>
        <member name="T:Api.Templates.Template">
            <summary>
            A template.
            </summary>
        </member>
        <member name="F:Api.Templates.Template.Key">
            <summary>
            A key used to identify a template by its purpose.
            E.g. "default" or "admin_default"
            </summary>
        </member>
        <member name="F:Api.Templates.Template.Title">
            <summary>
            The default title for this template.
            </summary>
        </member>
        <member name="F:Api.Templates.Template.ModuleGroups">
            <summary>
            The module groups that this is available for. "formatting" is the default. * is "all of them".
            </summary>
        </member>
        <member name="F:Api.Templates.Template.BodyJson">
            <summary>
            The content (as canvas JSON).
            </summary>
        </member>
        <member name="T:Api.Templates.TemplateController">
            <summary>
            Handles template endpoints.
            </summary>
        </member>
        <member name="T:Api.Templates.TemplateService">
            <summary>
            Handles templates.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Templates.TemplateService.#ctor">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="T:Api.Translate.EventListener">
            <summary>
            Listens out for the DatabaseDiff run to add additional columns.
            It finds any [Localized] fields and adds copies of the field for each locale, except they're always nullable.
            </summary>
        </member>
        <member name="M:Api.Translate.EventListener.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="T:Api.Translate.Locale">
            <summary>
            </summary>
        </member>
        <member name="F:Api.Translate.Locale.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:Api.Translate.Locale.Code">
            <summary>
            Usually a 5 letter locale code e.g. "en_GB". May also be just 2 e.g. "fr".
            </summary>
        </member>
        <member name="F:Api.Translate.Locale.FlagIconRef">
            <summary>
            Associated flag image representing the locale.
            </summary>
        </member>
        <member name="F:Api.Translate.Locale.Aliases">
            <summary>
            List of comma seperated aliases for mapping request headers or custom client codes
            </summary>
        </member>
        <member name="F:Api.Translate.Locale.isDisabled">
            <summary>
            Indicates if the locale is not currently available
            </summary>
        </member>
        <member name="F:Api.Translate.Locale.isRedirected">
            <summary>
            Indicates if the locale should be redirected to root (e.g. /en-us/abc > /abc)
            </summary>
        </member>
        <member name="F:Api.Translate.Locale.PermanentRedirect">
            <summary>
            True if this redirect should be considered permanent (i.e. a 301);
            Will default to a temporary 302 redirect if not set
            </summary>
        </member>
        <member name="F:Api.Translate.Locale.RightToLeft">
            <summary>
            Indicates this locale goes primarily right to left, such as Hebrew or Arabic.
            </summary>
        </member>
        <member name="F:Api.Translate.Locale.PagePath">
            <summary>
            If this locale is in use, the page URL to lookup will be prefixed with this value, except on the admin panel.
            Should not contain any /. For example, can be "jersey". The frontend will never actually see this path; it is purely for creating different page sets per locale.
            Different page sets is generally tidier than translating pages.
            </summary>
        </member>
        <member name="F:Api.Translate.Locale.Domains">
            <summary>
            Used by sites with localised domains. A comma separated list of domain names with optional ports.
            </summary>
        </member>
        <member name="P:Api.Translate.Locale.ShortCode">
            <summary>
            If the code is e.g. en-GB, this is just en. It is internally cached for speed as well.
            </summary>
        </member>
        <member name="T:Api.Translate.LocaleController">
            <summary>
            Handles locale endpoints.
            </summary>
        </member>
        <member name="M:Api.Translate.LocaleController.Set(System.UInt32)">
            <summary>
            GET /v1/locale/set/2/
            Sets locale by its ID.
            </summary>
        </member>
        <member name="T:Api.Translate.LocaleService">
            <summary>
            Handles locales - the core of the translation (localisation) system.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Translate.LocaleService.#ctor">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Translate.LocaleService.OnCacheLoaded">
            <summary>
            Runs when the cache has loaded.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Translate.LocaleService.GetByDomain(System.String)">
            <summary>
            Gets locale ID by its case insensitive domain and optional port. "www.mysite.co.uk" or "localhost:5050"
            </summary>
            <param name="domain"></param>
            <returns>null if not found.</returns>
        </member>
        <member name="M:Api.Translate.LocaleService.GetId(System.String)">
            <summary>
            Gets locale ID by its case insensitive code. Can contain hyphens, such as "en-gb".
            </summary>
            <param name="localeCode"></param>
            <returns>null if not found.</returns>
        </member>
        <member name="F:Api.Translate.LocaleService.countryToLanguageMap">
            <summary>
            A mapping of alpha-2 country code (e.g. "us") -> full country code (e.g. "en-US").
            </summary>
        </member>
        <member name="M:Api.Translate.LocaleService.UpdateContextLocale(Api.Contexts.Context,System.String)">
            <summary>
            Updates the given context LocaleId if the alpha-2 country code supplied relates to an available locale.
            </summary>
            <param name="context"></param>
            <param name="countryCode"></param>
        </member>
        <member name="F:Api.Translate.LocaleService._codeMap">
            <summary>
            A mapping of locale code -> ID. Uses IDs such that it does not need locale specific variations.
            </summary>
        </member>
        <member name="F:Api.Translate.LocaleService._domainMap">
            <summary>
            A mapping of domain -> ID. Uses IDs such that it does not need locale specific variations.
            </summary>
        </member>
        <member name="F:Api.Translate.LocaleService._multiDomain">
            <summary>
            True if the domains field is used on locales.
            </summary>
        </member>
        <member name="P:Api.Translate.LocaleService.CookieName">
            <summary>
            The name of the cookie when locale is stored.
            </summary>
        </member>
        <member name="T:Api.Translate.LocaleServiceConfig">
            <summary>
            Config for locale service.
            </summary>
        </member>
        <member name="P:Api.Translate.LocaleServiceConfig.HandleAcceptLanguageHeader">
            <summary>
            True (default) if the accept-lang header will be used to 
            establish default language when a user is seen for the first time.
            </summary>
        </member>
        <member name="P:Api.Translate.LocaleServiceConfig.HandleCloudFlareHeader">
            <summary>
            True (default) if the CF-IPCountry header will be used to 
            establish default language.
            </summary>
        </member>
        <member name="T:Api.Translate.LocalizedAttribute">
            <summary>
            Use this to declare a database field as localized - either translatable or containing different values per locale.
            Fields marked with this will result in another table being generated.
            </summary>
        </member>
        <member name="T:Api.Translate.Permissions">
            <summary>
            Instances capabilities during the very earliest phases of startup.
            </summary>
        </member>
        <member name="M:Api.Translate.Permissions.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="T:Api.Translate.PoTranslation">
            <summary>
            Wrapper class for po data translations
            </summary>
        </member>
        <member name="P:Api.Translate.PoTranslation.ContentType">
            <summary>
            Content type
            </summary>
        </member>
        <member name="P:Api.Translate.PoTranslation.ContentId">
            <summary>
            Content ID
            </summary>
        </member>
        <member name="P:Api.Translate.PoTranslation.Id">
            <summary>
            Entry ID
            </summary>
        </member>
        <member name="P:Api.Translate.PoTranslation.FieldName">
            <summary>
            Field name
            </summary>
        </member>
        <member name="P:Api.Translate.PoTranslation.Original">
            <summary>
            Original text
            </summary>
        </member>
        <member name="P:Api.Translate.PoTranslation.Translated">
            <summary>
            Translated text
            </summary>
        </member>
        <member name="T:Api.Translate.Translation">
            <summary>
            A Translation
            </summary>
        </member>
        <member name="F:Api.Translate.Translation.Module">
            <summary>
            E.g. "UI/AboutUs" - the exact JS module name that this translation is for.
            </summary>
        </member>
        <member name="F:Api.Translate.Translation.Original">
            <summary>The original text string.</summary>
        </member>
        <member name="F:Api.Translate.Translation.Translated">
            <summary>The translation.</summary>
        </member>
        <member name="T:Api.Translate.TranslationController">
            <summary>Handles translation endpoints.</summary>
        </member>
        <member name="M:Api.Translate.TranslationController.#ctor(Api.Translate.TranslationService)">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="M:Api.Translate.TranslationController.PrePopulate">
            <summary>
            Requests pre-populate the translations table 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Api.Translate.TranslationController.LoadPotFiles">
            <summary>
            Process any pot files into the translations table 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Api.Translate.TranslationService">
            <summary>
            Handles translations.
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Translate.TranslationService.#ctor">
            <summary>
            Instanced automatically. Use injection to use this service, or Startup.Services.Get.
            </summary>
        </member>
        <member name="M:Api.Translate.TranslationService.LoadDefaultTranslations">
            <summary>
            Extract any default translations from the modules and locale.xx.json files 
            </summary>
        </member>
        <member name="M:Api.Translate.TranslationService.LoadPotFiles(Api.Contexts.Context)">
            <summary>
            Loads .po files from a directory called "Translations"
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Translate.TranslationService.ParsePOData(Api.Contexts.Context,System.IO.Stream,System.Type)">
            <summary>
            Parse and load PO language file data
            </summary>
            <param name="context"></param>
            <param name="stream"></param>
            <param name="serviceType"></param>
            <returns></returns>
            <exception cref="T:Api.Startup.PublicException"></exception>
        </member>
        <member name="T:Api.Translate.TranslationServiceConfig">
            <summary>
            Config for translation service.
            </summary>
        </member>
        <member name="P:Api.Translate.TranslationServiceConfig.ReformatCanvasElements">
            <summary>
            When exporting/importing translations via port files should we reformat the canvas elements to simplify the format 
            </summary>
        </member>
        <member name="P:Api.Translate.TranslationServiceConfig.AutoAddTranslationElements">
            <summary>
            Automatically add any new translation elements when parsing content (DEV ONLY)
            </summary>
        </member>
        <member name="P:Api.Translate.TranslationServiceConfig.AutoAddExcludeModules">
            <summary>
            List of modules to exclude from translation auto add 
            </summary>		
        </member>
        <member name="P:Api.Translate.TranslationServiceConfig.AutoAddBaseLineTranslations">
            <summary>
            Automatically add any baseline translations (locale.xx.json) files into the backend 
            </summary>
        </member>
        <member name="T:AutoService`2">
            <summary>
            A general use service which manipulates an entity type. In the global namespace due to its common use.
            Deletes, creates, lists and updates them whilst also firing off a series of events.
            Note that you don't have to inherit this to create a service - it's just for convenience for common functionality.
            Services are actually detected purely by name.
            </summary>
            <summary>
            A general use service which manipulates an entity type. In the global namespace due to its common use.
            Deletes, creates, lists and updates them whilst also firing off a series of events.
            Note that you don't have to inherit this to create a service - it's just for convenience for common functionality.
            Services are actually detected purely by name.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID">ID type (usually int)</typeparam>
            <summary>
            A general use service which manipulates an entity type. In the global namespace due to its common use.
            Deletes, creates, lists and updates them whilst also firing off a series of events.
            Note that you don't have to inherit this to create a service - it's just for convenience for common functionality.
            Services are actually detected purely by name.
            </summary>
            <summary>
            A general use service which manipulates an entity type. In the global namespace due to its common use.
            Deletes, creates, lists and updates them whilst also firing off a series of events.
            Note that you don't have to inherit this to create a service - it's just for convenience for common functionality.
            Services are actually detected purely by name.
            </summary>
        </member>
        <member name="M:AutoService`2.ListForSSR(Api.Contexts.Context,System.String,System.String,Microsoft.ClearScript.ScriptObject)">
            <summary>
            Gets objects from this service using a generic serialized filter. Use List instead whenever possible.
            </summary>
            <param name="context"></param>
            <param name="filterJson"></param>
            <param name="includes"></param>
            <param name="so"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.ListForSSR(Api.Contexts.Context,System.String,System.String)">
            <summary>
            Gets objects from this service using a generic serialized filter. Use List instead whenever possible.
            </summary>
            <param name="context"></param>
            <param name="filterJson"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.GetForSSR(Api.Contexts.Context,System.UInt64,System.String)">
            <summary>
            Gets an object from this service for use by the serverside renderer. Returns it by executing the given callback.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
            <param name="includes"></param>
        </member>
        <member name="M:AutoService`2.GetForSSR(Api.Contexts.Context,System.UInt64,System.String,Microsoft.ClearScript.ScriptObject)">
            <summary>
            Gets an object from this service for use by the serverside renderer. Returns it by executing the given callback.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
            <param name="includes"></param>
            <param name="so"></param>
        </member>
        <member name="F:AutoService`2.EventGroup">
            <summary>
            The set of update/ delete/ create etc events for this type.
            </summary>
        </member>
        <member name="M:AutoService`2.#ctor(Api.Eventing.EventGroup,System.Type,System.String)">
            <summary>
            Sets up the common service type fields.
            </summary>
        </member>
        <member name="M:AutoService`2.SetInstanceType(Api.Contexts.Context,System.Type)">
            <summary>
            Updates the instance type, clearing any internal caches which used it before.
            </summary>
            <param name="context"></param>
            <param name="instanceType"></param>
        </member>
        <member name="M:AutoService`2.GetTypedMetaField(Api.Contexts.Context,System.String)">
            <summary>
            Gets a particular metadata field by its name. Common ones are "title" and "description".
            Use this to generically read common descriptive things about a given content type.
            Note that as fields vary by role, it is possible for users of different roles to obtain different meta values.
            </summary>
        </member>
        <member name="M:AutoService`2.GetJsonStructure(Api.Contexts.Context)">
            <summary>
            Gets the JSON structure. Defines settable fields for a particular role.
            </summary>
        </member>
        <member name="F:AutoService`2.structureLock">
            <summary>
            Used whilst building json structures.
            </summary>
        </member>
        <member name="M:AutoService`2.GetTypedJsonStructure(Api.Contexts.Context)">
            <summary>
            Gets the JSON structure. Defines settable fields for a particular role.
            </summary>
        </member>
        <member name="M:AutoService`2.Delete(Api.Contexts.Context,`1,DataOptions)">
            <summary>
            Deletes an entity by its ID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.Delete(Api.Contexts.Context,`0,DataOptions)">
            <summary>
            Deletes an entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.GetMap``2(System.String)">
            <summary>
            Gets the underlying mapping service from this type to the given type, with the given map name. The map name is the same as the "list as" attribute on the target type.
            </summary>
            <typeparam name="MAP_TARGET"></typeparam>
            <typeparam name="T_ID"></typeparam>
            <param name="mappingName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.ListByTarget``2(Api.Contexts.Context,``1,System.String,DataOptions)">
            <summary>
            List a set of values from this service which are present in a mapping of the given target type.
            This is backwards from the typical mapping flow - i.e. you're getting the list of sources with a given single target value.
            </summary>
            <typeparam name="MAP_TARGET"></typeparam>
            <typeparam name="T_ID"></typeparam>
            <param name="context"></param>
            <param name="targetId"></param>
            <param name="mappingName"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.ListBySource``2(Api.Contexts.Context,AutoService{``0,``1},``1,System.String,DataOptions)">
            <summary>
            List a set of values from this service which are present in a mapping of the given target type.
            This is backwards from the typical mapping flow - i.e. you're getting the list of sources with a given single target value.
            </summary>
            <typeparam name="MAP_SOURCE"></typeparam>
            <typeparam name="S_ID"></typeparam>
            <param name="context"></param>
            <param name="src"></param>
            <param name="srcId"></param>
            <param name="mappingName"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.ListBySource``2(Api.Contexts.Context,AutoService{``0,``1},``1,System.String,System.Func{Api.Contexts.Context,`0,System.Int32,System.Object,System.Object,System.Threading.Tasks.ValueTask},System.Object,System.Object,DataOptions)">
            <summary>
            List a set of values from this service which are present in a mapping of the given target type.
            This is backwards from the typical mapping flow - i.e. you're getting the list of sources with a given single target value.
            </summary>
            <typeparam name="MAP_SOURCE"></typeparam>
            <typeparam name="S_ID"></typeparam>
            <param name="context"></param>
            <param name="src"></param>
            <param name="srcId"></param>
            <param name="mappingName"></param>
            <param name="onResult"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.ListBySource``2(Api.Contexts.Context,AutoService{``0,``1},Api.Startup.IDCollector{``1},System.String,System.Func{Api.Contexts.Context,`0,System.Int32,System.Object,System.Object,System.Threading.Tasks.ValueTask},System.Object,System.Object,DataOptions)">
            <summary>
            List a set of values from this service which are present in a mapping of the given target type.
            This is backwards from the typical mapping flow - i.e. you're getting the list of sources with a given single target value.
            </summary>
            <typeparam name="MAP_SOURCE"></typeparam>
            <typeparam name="S_ID"></typeparam>
            <param name="context"></param>
            <param name="src"></param>
            <param name="srcIds"></param>
            <param name="mappingName"></param>
            <param name="onResult"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.ListByTarget``2(Api.Contexts.Context,``1,System.String,System.Func{Api.Contexts.Context,`0,System.Int32,System.Object,System.Object,System.Threading.Tasks.ValueTask},System.Object,System.Object,DataOptions)">
            <summary>
            List a set of values from this service which are present in a mapping of the given target type.
            This is backwards from the typical mapping flow - i.e. you're getting the list of sources with a given single target value.
            </summary>
            <typeparam name="MAP_TARGET"></typeparam>
            <typeparam name="T_ID"></typeparam>
            <param name="context"></param>
            <param name="targetId"></param>
            <param name="mappingName"></param>
            <param name="onResult"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.GetGeneralFilterFor(System.String,System.Boolean)">
            <summary>
            Gets a fast filter for the given query text.
            </summary>
            <param name="query"></param>
            <param name="canContainConstants"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.LoadFilter(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Loads a filter from the given newtonsoft representation. You must .Release() this filter when you're done with it.
            </summary>
            <param name="newtonsoft"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.GetFilterFor(System.String,DataOptions,System.Boolean)">
            <summary>
            Gets a fast filter for the given query text. 
            You should ensure the query text is constant and that you use binded args on the filter instead of baking values into a string.
            </summary>
            <param name="query"></param>
            <param name="opts"></param>
            <param name="canContainConstants"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.Where(DataOptions)">
            <summary>
            Non-allocating where selection of objects from this service. On the returned object, use e.g. .List()
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.Where(System.String,DataOptions)">
            <summary>
            Non-allocating where selection of objects from this service. On the returned object, use e.g. List()
            You should ensure the query text is constant and that you use binded args on the filter instead of baking values into a string.
            </summary>
            <param name="query"></param>
            <param name="opts"></param>
            <returns></returns>
        </member>
        <member name="F:AutoService`2._emptyFilter">
            <summary>
            A filter which is simply empty (the filter for "")
            </summary>
        </member>
        <member name="P:AutoService`2.EmptyFilter">
            <summary>
            A filter which is simply empty (the filter for "")
            </summary>
        </member>
        <member name="M:AutoService`2.GetResults(Api.Contexts.Context,Api.Permissions.Filter{`0,`1},System.Func{Api.Contexts.Context,`0,System.Int32,System.Object,System.Object,System.Threading.Tasks.ValueTask},System.Object,System.Object)">
            <summary>
            Starts cycling results for the given filter with the given callback function. Usually use Where and then one if its convenience functions instead.
            </summary>
            <param name="context"></param>
            <param name="filter"></param>
            <param name="onResult"></param>
            <param name="srcA"></param>
            <param name="srcB"></param>
            <returns>Total, if filter.IncludeTotal is set. Otherwise its meaning is undefined.</returns>
        </member>
        <member name="M:AutoService`2.GetObjectByFilter(Api.Contexts.Context,System.String,System.Collections.Generic.List{System.String},DataOptions)">
            <summary>
            Gets an object from this service which matches the given filter and values. If multiple match, it's only ever the first one.
            </summary>
            <param name="context"></param>
            <param name="filter"></param>
            <param name="filterValues"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.GetObject(Api.Contexts.Context,System.String,System.String,DataOptions)">
            <summary>
            Gets an object from this service. Generally use Get instead with a fixed type.
            </summary>
            <param name="context"></param>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.GetObject(Api.Contexts.Context,System.UInt64,DataOptions)">
            <summary>
            Gets an object from this service. Generally use Get instead with a fixed type.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.Get(Api.Contexts.Context,`1,DataOptions)">
            <summary>
            Gets a single entity by its ID.
            </summary>
        </member>
        <member name="M:AutoService`2.CheckIfMappingExists``1(Api.Contexts.Context,`1,AutoService,``0,System.String)">
            <summary>
            Checks if the given target Id is mapped to the given source in the given named map.
            </summary>
            <param name="context"></param>
            <param name="srcId"></param>
            <param name="target"></param>
            <param name="targetId"></param>
            <param name="mapName"></param>
        </member>
        <member name="M:AutoService`2.DeleteMapping``1(Api.Contexts.Context,`1,AutoService,``0,System.String)">
            <summary>
            Deletes a given src->target map entry, returning true if it existed and has been removed.
            </summary>
            <param name="context"></param>
            <param name="srcId"></param>
            <param name="target"></param>
            <param name="targetId"></param>
            <param name="mapName"></param>
        </member>
        <member name="M:AutoService`2.CreateMappingIfNotExists``1(Api.Contexts.Context,`1,AutoService,``0,System.String)">
            <summary>
            Ensures the given target Id is mapped to the given source in the given named map.
            </summary>
            <param name="context"></param>
            <param name="srcId"></param>
            <param name="target"></param>
            <param name="targetId"></param>
            <param name="mapName"></param>
        </member>
        <member name="M:AutoService`2.EnsureMapping``1(Api.Contexts.Context,`0,AutoService,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Ensures the list of target IDs are mapped to the given source in the given named map.
            </summary>
            <param name="context"></param>
            <param name="src"></param>
            <param name="target"></param>
            <param name="targetIds"></param>
            <param name="mapName"></param>
        </member>
        <member name="M:AutoService`2.Create(Api.Contexts.Context,`0,DataOptions)">
            <summary>
            Creates a new entity.
            </summary>
        </member>
        <member name="M:AutoService`2.CreatePartial(Api.Contexts.Context,`0,DataOptions)">
            <summary>
            Creates a new entity but without calling AfterCreate. This allows you to update fields after the ID has been set, but before AfterCreate is called.
            You must always call CreatePartialComplete afterwards to trigger the AfterCreate calls.
            </summary>
        </member>
        <member name="M:AutoService`2.PopulateRawEntityFromTarget(`0,`0,`0)">
            <summary>
            Populates the given raw entity from the given entity. Any blank localised fields are copied from the primary entity.
            </summary>
            <param name="raw"></param>
            <param name="entity"></param>
            <param name="primaryEntity"></param>
        </member>
        <member name="M:AutoService`2.CreateRawEntityFromTarget(`0)">
            <summary>
            Creates a raw entity from a given localised target.
            This clones the given object and sets any localised fields to their default.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.PopulateTargetEntityFromRaw(`0,`0,`0)">
            <summary>
            Populates the given entity from the given raw and primary entities.
            The raw entity is used to check if a locale specific override exists.
            If it does, the value comes from the raw entity. Otherwise, it comes from the primary entity.
            </summary>
            <param name="entity"></param>
            <param name="raw"></param>
            <param name="primaryEntity"></param>
        </member>
        <member name="M:AutoService`2.GetEventGroup">
            <summary>
            Returns the EventGroup[T] for this AutoService, or null if it is an autoService without an EventGroup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.CreatePartialComplete(Api.Contexts.Context,`0)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="raw"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.ConvertId(System.UInt64)">
            <summary>
            Converts the given ulong ID to one this autoservice can use.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.ReverseId(`1)">
            <summary>
            Converts the given ID for this service into a ulong.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.OnPrimaryEntityChanged(`0)">
            <summary>
            Call this when the primary object changes. It makes sure any localised versions are updated.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:AutoService`2.Update(Api.Contexts.Context,`1,System.Action{Api.Contexts.Context,`0,`0},DataOptions)">
            <summary>
            Performs an update on the given entity. If updating the object is permitted, the callback is executed. 
            You must only set fields on the object in that callback, or in a BeforeUpdate handle.
            </summary>
        </member>
        <member name="F:AutoService`2._diffFields">
            <summary>
            The field set used by Diff.
            </summary>
        </member>
        <member name="F:AutoService`2._diffDelegate">
            <summary>
            Used by Diff.
            </summary>
        </member>
        <member name="M:AutoService`2.Diff(`0,`0)">
            <summary>
            Diffs the given objects returning information about fields which have changed. Does not allocate.
            </summary>
            <param name="updated"></param>
            <param name="original"></param>
        </member>
        <member name="F:AutoService`2._cloneDelegate">
            <summary>
            Used by CloneEntityInto.
            </summary>
        </member>
        <member name="M:AutoService`2.CloneEntityInto(`0,`0)">
            <summary>
            Clones the fields of the given source object into the given target object. Does not allocate.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="M:AutoService`2.Update(Api.Contexts.Context,`0,System.Action{Api.Contexts.Context,`0,`0},DataOptions)">
            <summary>
            Performs an update on the given entity. If updating the object is permitted, the callback is executed. 
            You must only set fields on the object in that callback, or in a BeforeUpdate handle.
            </summary>
        </member>
        <member name="M:AutoService`2.Update(Api.Contexts.Context,`0,System.Func{Api.Contexts.Context,`0,`0,System.Threading.Tasks.ValueTask},DataOptions)">
            <summary>
            Performs an update on the given entity. If updating the object is permitted, the callback is executed and awaited. 
            You must only set fields on the object in that callback, or in a BeforeUpdate handle.
            </summary>
        </member>
        <member name="M:AutoService`2.StartUpdate(Api.Contexts.Context,`0,DataOptions)">
            <summary>
            For simpler usage, see Update. This is for advanced non-allocating updates. Returns the object that you MUST apply your changes to.
            </summary>
            <param name="context"></param>
            <param name="entity"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.FinishUpdate(Api.Contexts.Context,`0,`0,DataOptions)">
            <summary>
            Used together with StartUpdate in the form if(await CanUpdate){ set fields, await DoUpdate }.
            This route is used to set fields on the object without an allocation.
            </summary>
            <param name="context"></param>
            <param name="entityToUpdate">The entity returned by StartUpdate.</param>
            <param name="originalEntity">The original, unmodified entity.</param>
            <param name="options">Data options</param>
            <returns></returns>
        </member>
        <member name="F:AutoService`2._cacheConfig">
            <summary>
            The config for the cache.
            </summary>
        </member>
        <member name="F:AutoService`2._cacheSet">
            <summary>
            The caches, if enabled. Call Cache() to set this service as one with caching active.
            It's an array as there's one per locale.
            </summary>
        </member>
        <member name="P:AutoService`2.CacheAvailable">
            <summary>
            True if a cache is available.
            </summary>
        </member>
        <member name="M:AutoService`2.GetCacheConfig">
            <summary>
            The cache config for this service (if any).
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.GetCacheIndexId(System.String)">
            <summary>
            Gets the index ID of a cache index with the given key name.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.Cache(Api.Startup.CacheConfig)">
            <summary>
            Indicates that entities of this service should be cached in memory.
            Auto establishes if everything should be loaded now or later.
            </summary>
        </member>
        <member name="M:AutoService`2.GetCacheForLocale(System.UInt32)">
            <summary>
            Gets a cache for a given locale ID. Null if none.
            </summary>
            <param name="localeId"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.SetupCacheIfNeeded">
            <summary>
            Sets up the cache on this service. Use Cache() instead of this - SetupCacheNow is invoked during service startup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.Recache">
            <summary>
            Sets up the cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.ApplyCache(Api.Startup.CacheSet)">
            <summary>
            Apply an existing cache set to this service. If you apply a null set, it will initialise an empty cache.
            </summary>
            <param name="set"></param>
        </member>
        <member name="F:AutoService`2.ResultHeader">
            <summary>
            {"result": 
            </summary>
        </member>
        <member name="F:AutoService`2.TotalHeader">
            <summary>
            {"total": 
            </summary>
        </member>
        <member name="F:AutoService`2.ResultsHeaderAfterTotal">
            <summary>
            ,"results": (comes after total)
            </summary>
        </member>
        <member name="F:AutoService`2.ResultsHeader">
            <summary>
            {"results": (no total)
            </summary>
        </member>
        <member name="F:AutoService`2.ResultsFooter">
            <summary>
            ]}
            </summary>
        </member>
        <member name="F:AutoService`2.NullText">
            <summary>
            "null"
            </summary>
        </member>
        <member name="F:AutoService`2.IncludesHeader">
            <summary>
            ,"includes":[ 
            </summary>
        </member>
        <member name="F:AutoService`2.IncludesValueFooter">
            <summary>
            End of include block. ]}.
            </summary>
        </member>
        <member name="F:AutoService`2.IncludesDynamicValueFooter">
            <summary>
            End of dynamic include block. }}.
            </summary>
        </member>
        <member name="M:AutoService`2.ToJson(Api.Contexts.Context,Api.Permissions.Filter{`0,`1},System.String)">
            <summary>
            Serialises results from this service with the requested filter. 
            Allocates the result as a string. Use sparingly to avoid unnecessary allocations.
            </summary>
        </member>
        <member name="M:AutoService`2.ToJson(Api.Contexts.Context,`0,System.String)">
            <summary>
            Serialises an object from this service to a JSON string.
            Allocates the result as a string. Use sparingly to avoid unnecessary allocations.
            </summary>
            <param name="context"></param>
            <param name="entity"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.ToJson``1(Api.Contexts.Context,``0,System.Func{Api.Contexts.Context,``0,System.Func{`0,System.Int32,System.Threading.Tasks.ValueTask},System.Threading.Tasks.ValueTask{System.Int32}},Api.SocketServerLibrary.Writer,System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Serialises the given object into the given stream (usually a response stream). By using this method, it will consider the fields a user is permitted to see (based on the role in the context)
            and also may use a per-object cache which contains string segments.
            dataSource is often a filter.
            </summary>
        </member>
        <member name="M:AutoService`2.ObjectToJson(Api.Contexts.Context,System.Object,Api.SocketServerLibrary.Writer,System.IO.Stream,System.String)">
            <summary>
            Outputs the given object (an entity from this service) to JSON in the given writer.
            </summary>
            <param name="context"></param>
            <param name="entity"></param>
            <param name="writer"></param>
            <param name="targetStream"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.ObjectToTypeAndIdJson(Api.Contexts.Context,System.Object,Api.SocketServerLibrary.Writer)">
            <summary>
            Outputs the given object (an entity from this service) to JSON in the given writer.
            </summary>
            <param name="context"></param>
            <param name="entity"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.ToJson(Api.Contexts.Context,System.Collections.Generic.IEnumerable{`0},Api.SocketServerLibrary.Writer,System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Serialises the given object list into the given stream (usually a response stream). By using this method, it will consider the fields a user is permitted to see (based on the role in the context)
            and also may use a per-object cache which contains string segments.
            addResultWrap will wrap the object with {"result":...}. It is assumed true if includes is not null.
            </summary>
        </member>
        <member name="M:AutoService`2.ToJson(Api.Contexts.Context,`0,Api.SocketServerLibrary.Writer,System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Serialises the given object into the given stream (usually a response stream). By using this method, it will consider the fields a user is permitted to see (based on the role in the context)
            and also may use a per-object cache which contains string segments.
            addResultWrap will wrap the object with {"result":...}. It is assumed true if includes is not null.
            </summary>
        </member>
        <member name="M:AutoService`2.ExecuteIncludes(Api.Contexts.Context,System.IO.Stream,Api.SocketServerLibrary.Writer,Api.Startup.IDCollector,Api.Startup.InclusionNode)">
            <summary>
            Used to execute includes.
            </summary>
            <param name="context"></param>
            <param name="targetStream"></param>
            <param name="writer"></param>
            <param name="firstCollector"></param>
            <param name="includeNode"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.ToJson(Api.Contexts.Context,`0,Api.SocketServerLibrary.Writer,Api.Startup.InclusionNode)">
            <summary>
            Serialises the given object into the given stream (usually a response stream). By using this method, it will consider the fields a user is permitted to see (based on the role in the context)
            and also may use a per-object cache which contains string segments.
            addResultWrap will wrap the object with {"result":...}. It is assumed true if includes is not null.
            </summary>
        </member>
        <member name="M:AutoService`2.OutputById(Api.Contexts.Context,System.UInt64,Api.SocketServerLibrary.Writer,System.String)">
            <summary>
            Outputs a single object from this service as JSON into the given writer. Acts like include * was specified.
            Executes the given collector(s) whilst it happens, which can also be null.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
            <param name="writer"></param>
            <param name="includes">The includes to use when outputting the JSON</param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.OutputJsonList``1(Api.Contexts.Context,Api.Startup.IDCollector,Api.Startup.IDCollector,System.String,Api.SocketServerLibrary.Writer,System.Boolean,Api.Startup.FunctionalInclusionNode[])">
            <summary>
            Outputs a list of things from this service as JSON into the given writer.
            Executes the given collector(s) whilst it happens, which can also be null.
            </summary>
            <param name="context"></param>
            <param name="collectors"></param>
            <param name="idSet"></param>
            <param name="setField"></param>
            <param name="writer"></param>
            <param name="viaIncludes"></param>
            <param name="functionalIncludes"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.OutputJsonList(Api.Contexts.Context,Api.Startup.IDCollector,Api.Startup.IDCollector,Api.SocketServerLibrary.Writer,System.Boolean,Api.Startup.FunctionalInclusionNode[])">
            <summary>
            Outputs a list of things from this service as JSON into the given writer.
            Executes the given collector(s) whilst it happens, which can also be null.
            </summary>
            <param name="context"></param>
            <param name="collectors"></param>
            <param name="idSet"></param>
            <param name="writer"></param>
            <param name="viaIncludes"></param>
            <param name="functionalIncludes"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.ToJson(Api.Contexts.Context,`0,Api.SocketServerLibrary.Writer)">
            <summary>
            Serialises the given object into the given writer. By using this method, it will consider the fields a user is permitted to see (based on the role in the context)
            and also may use a per-object cache which contains string segments.
            </summary>
        </member>
        <member name="M:AutoService`2.ToJsonWithIncludes(Api.Contexts.Context,`0,Api.SocketServerLibrary.Writer,Api.Startup.FunctionalInclusionNode[])">
            <summary>
            Serialises the given object into the given writer. By using this method, it will consider the fields a user is permitted to see (based on the role in the context)
            and also may use a per-object cache which contains string segments.
            </summary>
        </member>
        <member name="M:AutoService`2.UpdateRefs(Api.Contexts.Context,System.Boolean,System.Collections.Generic.Dictionary{System.UInt32,System.String})">
            <summary>
            Update any data ref fields (ignoring canvas for the moment) such that the ref contains the full ref value including width, focal point etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.ReplaceRefs(Api.Contexts.Context,System.String,System.String)">
            <summary>
            Replace media refs 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.ActiveRefs(Api.Contexts.Context,System.Collections.Generic.Dictionary{System.UInt32,System.Int32})">
            <summary>
            Find active media refs 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoService`2.GetImageRefId(System.String)">
            <summary>
            Extract the upload id from the image ref
            e.g. 1840 or 77
            public:5A33D1474A94741A998AA72B8C722C9B/1840.jpg|webp?w=2460&amp;h=1770&amp;b=LRN8%5DCM%5E5ZI%5B%3F%5DR5xuozS6r%3D%24~of
            public:5A33D1474A94741A998AA72B8C722C9B/77.jpg?w=5039&amp;h = 3364
            </summary>
            <param name="uploadRef"></param>
            <returns></returns>
        </member>
        <member name="F:AutoService`2.StandardNetworkRooms">
            <summary>
            The network room set for the given svc.
            Note that this is null for mapping services - use MappingNetworkRooms on those instead, as they are indexed by SourceId.
            </summary>
        </member>
        <member name="T:AutoService">
            <summary>
            The base class of all AutoService instances.
            </summary>
            <summary>
            A general use service which manipulates an entity type. In the global namespace due to its common use.
            Deletes, creates, lists and updates them whilst also firing off a series of events.
            Note that you don't have to inherit this to create a service - it's just for convenience for common functionality.
            Services are actually detected purely by name.
            </summary>
            <summary>
            The base class of all AutoService instances.
            </summary>
            <summary>
            The base class of all AutoService instances.
            </summary>
        </member>
        <member name="M:AutoService.GetForSSR(Api.Contexts.Context,System.String,System.String,Microsoft.ClearScript.ScriptObject)">
            <summary>
            Gets objects from this service using a generic serialized filter. Use List instead whenever possible.
            </summary>
            <param name="context"></param>
            <param name="filterJson"></param>
            <param name="includes"></param>
            <param name="so"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService.ListForSSR(Api.Contexts.Context,System.String,System.String,Microsoft.ClearScript.ScriptObject)">
            <summary>
            Gets objects from this service using a generic serialized filter. Use List instead whenever possible.
            </summary>
            <param name="context"></param>
            <param name="filterJson"></param>
            <param name="includes"></param>
            <param name="so"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService.ListForSSR(Api.Contexts.Context,System.String,System.String)">
            <summary>
            Gets objects from this service using a generic serialized filter. Use List instead whenever possible.
            </summary>
            <param name="context"></param>
            <param name="filterJson"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService.GetForSSR(Api.Contexts.Context,System.UInt64,System.String,Microsoft.ClearScript.ScriptObject)">
            <summary>
            Gets an object from this service for use by the serverside renderer. Returns it by executing the given callback.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
            <param name="includes"></param>
            <param name="so"></param>
        </member>
        <member name="M:AutoService.GetForSSR(Api.Contexts.Context,System.UInt64,System.String)">
            <summary>
            Gets an object from this service for use by the serverside renderer. Returns it by executing the given callback.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
            <param name="includes"></param>
        </member>
        <member name="M:AutoService.GetAllConfig``1(System.Action{``0},System.Boolean)">
            <summary>
            Get all config of the given type.
            This set is live - it will update whenever the underlying config does. Do not call this more than once per config object.
            </summary>
        </member>
        <member name="M:AutoService.GetConfig``1(System.Action{``0},System.Boolean)">
            <summary>
            Get config. Always returns the latest configuration.
            You can safely reuse references to the object returned - if the config changes, it'll still be the same object.
            You can find when it changes (or loads the first time) via the Config.OnChange event.
            Also note that the config section key is the name of the given type, minus "Config" or "Configuration" from the end.
            Optionally stores a default config entry in the database if none were found.
            </summary>
        </member>
        <member name="M:AutoService.InstallEmails(Api.Emails.EmailTemplate[])">
            <summary>
            Installs one or more email templates.
            Schedules the install to happen either immediately if services have not yet started (async) or after services have started.
            </summary>
            <param name="templates"></param>
        </member>
        <member name="F:AutoService.ServicedType">
            <summary>
            The type that this AutoService is servicing, if any. E.g. a User, ForumPost etc.
            </summary>
        </member>
        <member name="F:AutoService.DataIsPersistent">
            <summary>
            True if this service stores persistent data.
            </summary>
        </member>
        <member name="F:AutoService.InstanceType">
            <summary>
            The actual instance type of this service. This always equals ServicedType or inherits it.
            </summary>
        </member>
        <member name="F:AutoService.IdType">
            <summary>
            The type that this AutoService uses for IDs, if any. Almost always int, but some use ulong.
            </summary>
        </member>
        <member name="F:AutoService.FieldMap">
            <summary>
            Map of the available fields in the services InstanceType.
            </summary>
        </member>
        <member name="F:AutoService.EntityName">
            <summary>
            The name of the instance types of this service.
            Usually the same as InstanceType.Name but can be different, such as on mappings.
            </summary>
        </member>
        <member name="F:AutoService.LogTag">
            <summary>
            A generated tag to use with Log.* methods.
            </summary>
        </member>
        <member name="P:AutoService.IsMapping">
            <summary>
            True if this is a mapping service.
            </summary>
        </member>
        <member name="P:AutoService.MappingSourceType">
            <summary>
            The source type if this is a mapping service.
            </summary>
        </member>
        <member name="P:AutoService.MappingTargetType">
            <summary>
            The target type if this is a mapping service.
            </summary>
        </member>
        <member name="P:AutoService.MappingSourceIdType">
            <summary>
            The source Id type if this is a mapping service.
            </summary>
        </member>
        <member name="P:AutoService.MappingTargetIdType">
            <summary>
            The target Id type if this is a mapping service.
            </summary>
        </member>
        <member name="M:AutoService.SetInstanceType(Api.Contexts.Context,System.Type)">
            <summary>
            Updates the instance type, clearing any internal caches which used it before.
            </summary>
            <param name="context"></param>
            <param name="instanceType"></param>
        </member>
        <member name="M:AutoService.OutputJsonList(Api.Contexts.Context,Api.Startup.IDCollector,Api.Startup.IDCollector,Api.SocketServerLibrary.Writer,System.Boolean,Api.Startup.FunctionalInclusionNode[])">
            <summary>
            Outputs a list of things from this service as JSON into the given writer.
            Executes the given collector(s) whilst it happens, which can also be null.
            Does not perform permission checks internally.
            </summary>
            <param name="context"></param>
            <param name="collectors"></param>
            <param name="idSet"></param>
            <param name="writer"></param>
            <param name="viaInclude">True if it's via an include, and therefore the "from" filter field is implied true.</param>
            <param name="functionalIncludes">Optional set of functional includes to execute on each node as the json is rendered.</param>
            <returns></returns>
        </member>
        <member name="M:AutoService.CreateMapping(Api.Contexts.Context,System.Object,System.Object,DataOptions)">
            <summary>
             Creates a mapping from the given src to the given target. Only available on mapping services. 
             It's more ideal to use the type specific overloads whenever possible (particularly as they're available on regular services, rather than this mapping service specific one).
             See also: CreateMappingIfNotExists, EnsureMapping
            </summary>
            <param name="context"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="opts"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService.ObjectToJson(Api.Contexts.Context,System.Object,Api.SocketServerLibrary.Writer,System.IO.Stream,System.String)">
            <summary>
            Outputs the given object (an entity from this service) to JSON in the given writer.
            </summary>
            <param name="context"></param>
            <param name="entity"></param>
            <param name="writer"></param>
            <param name="targetStream"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService.ObjectToTypeAndIdJson(Api.Contexts.Context,System.Object,Api.SocketServerLibrary.Writer)">
            <summary>
            Outputs the given object (an entity from this service) to JSON in the given writer.
            </summary>
            <param name="context"></param>
            <param name="entity"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService.GetGeneralFilterFor(System.String,System.Boolean)">
            <summary>
            Gets a fast filter for the given query text.
            </summary>
            <param name="query"></param>
            <param name="canContainConstants"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService.LoadFilter(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Loads a filter from the given newtonsoft representation. You must .Release() this filter when you're done with it.
            </summary>
            <param name="newtonsoft"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService.OutputJsonList``1(Api.Contexts.Context,Api.Startup.IDCollector,Api.Startup.IDCollector,System.String,Api.SocketServerLibrary.Writer,System.Boolean,Api.Startup.FunctionalInclusionNode[])">
            <summary>
            Outputs a list of things from this service as JSON into the given writer.
            Executes the given collector(s) whilst it happens, which can also be null.
            Does not perform permission checks internally.
            </summary>
            <param name="context"></param>
            <param name="collectors"></param>
            <param name="idSet"></param>
            <param name="setField"></param>
            <param name="writer"></param>
            <param name="viaIncludes">True if the list is via includes</param>
            <param name="functionalIncludes">Optional set of functional includes to execute on each node as the json is rendered.</param>
            <returns></returns>
        </member>
        <member name="M:AutoService.OutputMap(Api.Contexts.Context,Api.Startup.IDCollector,Api.Startup.IDCollector,Api.SocketServerLibrary.Writer)">
            <summary>
            Outputs a mapping. Only valid on a Mapping service.
            </summary>
            <param name="context"></param>
            <param name="mappingCollector"></param>
            <param name="idSet"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService.OutputById(Api.Contexts.Context,System.UInt64,Api.SocketServerLibrary.Writer,System.String)">
            <summary>
            Outputs a single object from this service as JSON into the given writer. Acts like include * was specified by default.
            Executes the given collector(s) whilst it happens, which can also be null.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
            <param name="writer"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService.GetEventGroup">
            <summary>
            Returns the EventGroup[T] for this AutoService, or null if it is an autoService without an EventGroup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoService.SetupCacheIfNeeded">
            <summary>
            Sets up the cache if this service needs one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoService.#ctor(System.Type,System.Type,System.Type,System.String)">
            <summary>
            Creates a new AutoService.
            </summary>
            <param name="type"></param>
            <param name="idType"></param>
            <param name="instanceType"></param>
            <param name="entityName"></param>
        </member>
        <member name="M:AutoService.GetMetaFieldValue(Api.Contexts.Context,System.String,System.Object)">
            <summary>
            Reads a particular metadata field by its name. Common ones are "title" and "description".
            Use this to generically read common descriptive things about a given content type.
            Note that as fields vary by role, it is possible for users of different roles to obtain different meta values.
            </summary>
        </member>
        <member name="M:AutoService.GetContentFields">
            <summary>
            Gets a map which lists the available fields in the content type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoService.SetContentFields(Api.Startup.ContentFields)">
            <summary>
            Sets a custom ContentFields set.
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="F:AutoService._contentFields">
            <summary>
            The fields of this type.
            </summary>
        </member>
        <member name="M:AutoService.Cache(Api.Startup.CacheConfig)">
            <summary>
            Sets up the cache on this service. If you're not sure, use Cache instead of this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoService.GetJsonStructure(Api.Contexts.Context)">
            <summary>
            Gets the JSON structure. Defines settable fields for a particular role.
            </summary>
        </member>
        <member name="M:AutoService.GetObject(Api.Contexts.Context,System.String,System.String,DataOptions)">
            <summary>
            Gets an object from this service which matches the given particular field/value. If multiple match, it's only ever the first one.
            </summary>
            <param name="context"></param>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService.GetObjectByFilter(Api.Contexts.Context,System.String,System.Collections.Generic.List{System.String},DataOptions)">
            <summary>
            Gets an object from this service which matches the given filter and values. If multiple match, it's only ever the first one.
            </summary>
            <param name="context"></param>
            <param name="filter"></param>
            <param name="filterValues"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AutoService.GetObject(Api.Contexts.Context,System.UInt64,DataOptions)">
            <summary>
            Gets an object from this service.
            </summary>
            <param name="context"></param>
            <param name="id"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="F:AutoService.GeneratedMappings">
            <summary>
            List is mappings linked back to this service e.g tags
            </summary>
        </member>
        <member name="M:AutoService.InstallAdminPages(System.String[])">
            <summary>
            Installs generic admin pages for this service.
            Does nothing if there isn't a page service installed, or if the admin pages already exist.
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:AutoService.InstallAdminPages(System.String,System.String,System.String[],Api.Startup.ChildAdminPageOptions,System.String)">
            <summary>
            Installs generic admin pages for this service, including the nav menu entry.
            Does nothing if there isn't a page service installed, or if the admin pages already exist.
            </summary>
            <param name="navMenuLabel">The text to show on the navmenu.</param>
            <param name="navMenuIconRef">The ref for the icon to use on the navmenu. Usually a fontawesome icon, of the form "fa:fa-thing".</param>
            <param name="fields">The fields to show in the list of your content type. Usually include at least some sort of name or title.</param>
            <param name="childAdminPage">
            A shortcut for specifying that your type has some kind of sub-type.
            For example, the NavMenu admin page specifies a child type of NavMenuItem, meaning each NavMenu ends up with a list of NavMenuItems.
            Make sure you specify the fields that'll be visible from the child type in the list on the parent type.
            For example, if you'd like each child entry to show its Id and Title fields, specify new string[]{"id", "title"}.
            </param>
            <param name="visibilityJson"></param>
        </member>
        <member name="M:AutoService.InstallRoles(Api.Permissions.Role[])">
            <summary>
            Installs one or more roles. You must provide a Key and no Id on each one.
            The permissions module is required anyway and must be up to date.
            </summary>
        </member>
        <member name="M:AutoService.ApplyCache(Api.Startup.CacheSet)">
            <summary>
            Apply an existing cache set to this service.
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:AutoService.ActiveRefs(Api.Contexts.Context,System.Collections.Generic.Dictionary{System.UInt32,System.Int32})">
            <summary>
            Find active media refs 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoService.UpdateRefs(Api.Contexts.Context,System.Boolean,System.Collections.Generic.Dictionary{System.UInt32,System.String})">
            <summary>
            Update any ref fields (ignoring canvas for the moment) such that the ref contains the full ref value including width, focal point etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoService.ReplaceRefs(Api.Contexts.Context,System.String,System.String)">
            <summary>
            Replace media refs 
            </summary>
            <returns></returns>
        </member>
        <member name="T:LetsEncrypt.Client.AcmeClient">
            <summary>
            </summary>
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.AcmeClient.CreateNewAccountAsync(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.AcmeClient.GenerateCertificateAsync(LetsEncrypt.Client.Entities.Account,LetsEncrypt.Client.Entities.Order,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.AcmeClient.RevokeCertificateAsync(LetsEncrypt.Client.Entities.Certificate,LetsEncrypt.Client.Entities.RevocationReason)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.AcmeClient.GetDnsChallenges(LetsEncrypt.Client.Entities.Account,LetsEncrypt.Client.Entities.Order)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.AcmeClient.GetChallengeAsync(LetsEncrypt.Client.Entities.Account,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.AcmeClient.ValidateChallengeAsync(LetsEncrypt.Client.Entities.Account,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.AcmeClient.GetAuthorizationAsync(LetsEncrypt.Client.Entities.Account,System.Uri)">
            <summary>
            
            </summary>
            <param name="account"></param>
            <param name="authorizationId"></param>
            <returns></returns>
        </member>
        <member name="M:LetsEncrypt.Client.AcmeClient.GetChalangeKey(LetsEncrypt.Client.Entities.Account,System.String)">
            <summary>
            
            </summary>
            <param name="account"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:LetsEncrypt.Client.AcmeClient.#ctor(System.Uri)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.AcmeClient.GetOrderAsync(LetsEncrypt.Client.Entities.Account,System.Uri)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.AcmeClient.NewOrderAsync(LetsEncrypt.Client.Entities.Account,System.Collections.Generic.List{System.String})">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.BaseAcmeClient">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.BaseAcmeClient.#ctor(System.Uri)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.BaseAcmeClient.GetAsync``1(System.Uri)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.BaseAcmeClient.PostAsync``1(System.Uri,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.BaseAcmeClient.GetDirectoryAsync">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.BaseAcmeClient.GetNonceAsync">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.BaseAcmeClient.InitAsync">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Constants">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Constants.DATE_FORMAT_SHORT">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Constants.DATE_FORMAT_LONG">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Constants.PREFIX_MAILTO">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Cryptography.CertificateBuilder">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Cryptography.CertificateBuilder.CreateSigningRequest(System.Security.Cryptography.RSA,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Cryptography.CertificateBuilder.Generate(System.Security.Cryptography.RSA,LetsEncrypt.Client.Entities.CertificateChain,System.String,System.Security.Cryptography.X509Certificates.X509ContentType)">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Cryptography.RsaKeyPair">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Cryptography.RsaKeyPair.KEY_SIZE">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Cryptography.RsaKeyPair.KEY_TYPE">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Cryptography.RsaKeyPair.THUMBPRINT_ALGORITHM_NAME">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Cryptography.RsaKeyPair.ALGORITHM_NAME">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Cryptography.RsaKeyPair.Private">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Cryptography.RsaKeyPair.Public">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Cryptography.RsaKeyPair.Jwk">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Cryptography.RsaKeyPair.#ctor(System.Security.Cryptography.RSAParameters,System.Security.Cryptography.RSAParameters)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Cryptography.RsaKeyPair.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Cryptography.RsaKeyPair.SignData(System.Byte[])">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Cryptography.RsaKeyPair.SignHash(System.Byte[])">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Cryptography.RsaKeyPair.Encrypt(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Cryptography.RsaKeyPair.Decrypt(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Cryptography.RsaKeyPair.ToRSA">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Cryptography.RsaKeyPair.ToPrivateKeyPem">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Cryptography.RsaKeyPair.ToPublicKeyPem">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Cryptography.RsaKeyPair.New">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Cryptography.Sha256HashProvider">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Cryptography.Sha256HashProvider.ComputeHash(System.Byte[])">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.Account">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Account.Status">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Account.Contact">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Account.TermsOfServiceAgreed">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Account.InitialIp">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Account.CreatedAt">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Account.Key">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Account.Signer">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.Account.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.Account.#ctor(LetsEncrypt.Client.Cryptography.RsaKeyPair)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.Account.#ctor(LetsEncrypt.Client.Cryptography.RsaKeyPair,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.Account.SaveAsync">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.Account.FillBy(LetsEncrypt.Client.Entities.Account)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.Account.Create(System.Collections.Generic.List{System.String})">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.Account.LoadAsync(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.AccountStatus">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.AccountStatus.Valid">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.AccountStatus.Deactivated">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.AccountStatus.Revoked">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.AccountPersisted">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.AccountPersisted.AccountContactEmail">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.AccountPersisted.AccountLocation">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.AccountPersisted.PrivateKeyPem">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.AccountPersisted.PublicKeyPem">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.Authorization">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Authorization.Identifier">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Authorization.Status">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Authorization.Expires">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Authorization.Scope">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Authorization.Challenges">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Authorization.Wildcard">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.AuthorizationStatus">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.AuthorizationStatus.Pending">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.AuthorizationStatus.Processing">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.AuthorizationStatus.Valid">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.AuthorizationStatus.Invalid">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.AuthorizationStatus.Revoked">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.AuthorizationStatus.Deactivated">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.AuthorizationStatus.Expired">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.Certificate">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Certificate.Key">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.Certificate.#ctor(LetsEncrypt.Client.Cryptography.RsaKeyPair)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.Certificate.CreateSigningRequest(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.Certificate.AddChain(LetsEncrypt.Client.Entities.CertificateChain)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.Certificate.GetOriginalCertificate">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.Certificate.GeneratePfx(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.Certificate.GenerateCrt(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.Certificate.GenerateCrtPem(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.Certificate.GenerateKeyPem">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.Certificate.Serialize">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.Certificate.Deserialize(System.String,LetsEncrypt.Client.Cryptography.RsaKeyPair)">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.CertificateChain">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.CertificateChain.Content">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.CertificateChain.Certificate">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.CertificateChain.CertificateBytes">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.CertificateChain.Issuer">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.CertificateChain.IssuerBytes">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.CertificateChain.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Entities.CertificateChain.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.CertificateRevocation">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.CertificateRevocation.Certificate">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.CertificateRevocation.Reason">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.RevocationReason">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.RevocationReason.Unspecified">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.RevocationReason.KeyCompromise">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.RevocationReason.CACompromise">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.RevocationReason.AffiliationChanged">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.RevocationReason.Superseded">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.RevocationReason.CessationOfOperation">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.RevocationReason.CertificateHold">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.RevocationReason.RemoveFromCRL">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.RevocationReason.PrivilegeWithdrawn">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.RevocationReason.AACompromise">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.Challenge">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Challenge.Type">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Challenge.Status">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Challenge.Validated">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Challenge.Url">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Challenge.Token">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Challenge.DnsKey">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Challenge.VerificationKey">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Challenge.VerificationValue">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.ChallengeStatus">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.ChallengeStatus.Pending">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.ChallengeStatus.Processing">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.ChallengeStatus.Valid">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.ChallengeStatus.Invalid">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.ChallengeType">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.ChallengeType.Http01">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.ChallengeType.Dns01">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.ChallengeType.TlsAlpn01">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.Directory">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Directory.NewNonce">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Directory.NewAccount">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Directory.NewOrder">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Directory.RevokeCert">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Directory.KeyChange">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Directory.Meta">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.DirectoryMeta">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.DirectoryMeta.TermsOfService">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.DirectoryMeta.Website">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.DirectoryMeta.CaaIdentities">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.DirectoryMeta.ExternalAccountRequired">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.Empty">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.ApiEnvironment">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.ApiEnvironment.LetsEncryptV2">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.ApiEnvironment.LetsEncryptV2Staging">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.Identifier">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Identifier.Type">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Identifier.Value">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.IdentifierType">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.IdentifierType.Dns">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.Order">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Order.Status">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Order.Expires">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Order.Identifiers">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Order.NotBefore">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Order.NotAfter">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Order.Authorizations">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Order.Finalize">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.Order.Certificate">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.OrderStatus">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.OrderStatus.Pending">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.OrderStatus.Ready">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.OrderStatus.Processing">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.OrderStatus.Valid">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.Entities.OrderStatus.Invalid">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.OrderCertificate">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.OrderCertificate.Csr">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.BaseEntity">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.BaseEntity.UnknownContent">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.BaseEntity.Location">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.BaseEntity.Error">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Entities.AcmeError">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.AcmeError.Type">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.AcmeError.Detail">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Entities.AcmeError.Status">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Extensions.Extensions">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Extensions.Extensions.CreateRsaParametersFromKeyBytes(System.Byte[])">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Extensions.Extensions.ToStandardString(System.Security.SecureString)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Extensions.Extensions.ToSecureString(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Interfaces.ILogger">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Interfaces.ILogger.LogError(System.Exception)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Interfaces.ILogger.LogErrorAsync(System.Exception)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Interfaces.ILogger.LogError(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Interfaces.ILogger.LogErrorAsync(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Interfaces.ILogger.LogMessage(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Interfaces.ILogger.LogMessageAsync(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.IO.LocalStorage">
            <summary>
            </summary>
        </member>
        <member name="F:LetsEncrypt.Client.IO.LocalStorage.FOLDER">
            <summary>
            
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.IO.LocalStorage.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.IO.LocalStorage.PersistAccount(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.IO.LocalStorage.LoadAccount(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.IO.LocalStorage.PersistPrivateKey(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.IO.LocalStorage.LoadPrivateKey(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.IO.LocalStorage.PersistPublicKey(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.IO.LocalStorage.LoadPublicKey(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.IO.LocalStorage.ReadAsync(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.IO.LocalStorage.WriteAsync(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.IO.LocalStorage.WriteAsync(System.String,System.Byte[])">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Json.JsonSettings">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Json.JsonSettings.CreateSettings">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Jws.JwsConvert">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Jws.JwsConvert.ToBase64String(System.Byte[])">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Jws.JwsConvert.FromBase64String(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Jws.JwsSigner">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Jws.JwsSigner.#ctor(LetsEncrypt.Client.Cryptography.RsaKeyPair)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Jws.JwsSigner.Sign(System.Object,System.Uri,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Jws.JwsSigner.Sign(System.Object,System.Uri,System.Uri,System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Jws.JwsData">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Jws.JwsData.Protected">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Jws.JwsData.Payload">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Jws.JwsData.Signature">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Jws.RsaJsonWebKey">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Jws.RsaJsonWebKey.Exponent">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Jws.RsaJsonWebKey.KeyType">
            <summary>
            </summary>
        </member>
        <member name="P:LetsEncrypt.Client.Jws.RsaJsonWebKey.Modulus">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Loggers.ConsoleLogger">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Loggers.ConsoleLogger.LogError(System.Exception)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Loggers.ConsoleLogger.LogErrorAsync(System.Exception)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Loggers.ConsoleLogger.LogError(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Loggers.ConsoleLogger.LogErrorAsync(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Loggers.ConsoleLogger.LogMessage(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Loggers.ConsoleLogger.LogMessageAsync(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:LetsEncrypt.Client.Loggers.LocalFileLogger">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Loggers.LocalFileLogger.LogError(System.Exception)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Loggers.LocalFileLogger.LogErrorAsync(System.Exception)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Loggers.LocalFileLogger.LogError(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Loggers.LocalFileLogger.LogErrorAsync(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Loggers.LocalFileLogger.LogMessage(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:LetsEncrypt.Client.Loggers.LocalFileLogger.LogMessageAsync(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:System.Log">
            <summary>
            A class for logging messages.
            </summary>
        </member>
        <member name="F:System.Log.MaxFileLength">
            <summary>
            Max file length before a file rotation occurs.
            </summary>
        </member>
        <member name="M:System.Log.Ok(System.String,System.String)">
            <summary>
            Logs an informational success message for the given tag.
            The tag SHOULD be lowercase separated with hypens or underscores and represents a subset of logs.
            It is suggested to use Service.LogTag: the lowercase type name, or the lowercase service name if you don't have a type.
            </summary>
        </member>
        <member name="M:System.Log.Ok(System.String,System.Exception,System.String)">
            <summary>
            Logs an informational message for the given tag.
            The tag SHOULD be lowercase separated with hypens or underscores and represents a subset of logs.
            It is suggested to use Service.LogTag: the lowercase type name, or the lowercase service name if you don't have a type.
            </summary>
        </member>
        <member name="M:System.Log.Info(System.String,System.String)">
            <summary>
            Logs an informational message for the given tag.
            The tag SHOULD be lowercase separated with hypens or underscores and represents a subset of logs.
            It is suggested to use Service.LogTag: the lowercase type name, or the lowercase service name if you don't have a type.
            </summary>
        </member>
        <member name="M:System.Log.Info(System.String,System.Exception,System.String)">
            <summary>
            Logs an informational message for the given tag.
            The tag SHOULD be lowercase separated with hypens or underscores and represents a subset of logs.
            It is suggested to use Service.LogTag: the lowercase type name, or the lowercase service name if you don't have a type.
            </summary>
        </member>
        <member name="M:System.Log.Warn(System.String,System.String)">
            <summary>
            Logs a warning message for the given tag.
            The tag SHOULD be lowercase separated with hypens or underscores and represents a subset of logs.
            It is suggested to use Service.LogTag: the lowercase type name, or the lowercase service name if you don't have a type.
            </summary>
        </member>
        <member name="M:System.Log.Warn(System.String,System.Exception,System.String)">
            <summary>
            Logs a warning message for the given tag.
            The tag SHOULD be lowercase separated with hypens or underscores and represents a subset of logs.
            It is suggested to use Service.LogTag: the lowercase type name, or the lowercase service name if you don't have a type.
            </summary>
        </member>
        <member name="M:System.Log.Error(System.String,System.String)">
            <summary>
            Logs an error message for the given tag. It is strongly recommended to pass the exception here too such that the stack trace will be logged.
            The tag SHOULD be lowercase separated with hypens or underscores and represents a subset of logs.
            It is suggested to use Service.LogTag: the lowercase type name, or the lowercase service name if you don't have a type.
            </summary>
        </member>
        <member name="M:System.Log.Error(System.String,System.Exception,System.String)">
            <summary>
            Logs an error message for the given tag. It is strongly recommended to pass the exception here too such that the stack trace will be logged.
            The tag SHOULD be lowercase separated with hypens or underscores and represents a subset of logs.
            It is suggested to use Service.LogTag: the lowercase type name, or the lowercase service name if you don't have a type.
            </summary>
        </member>
        <member name="M:System.Log.Fatal(System.String,System.String)">
            <summary>
            Logs a fatal error message for the given tag. It is strongly recommended to pass the exception here too such that the stack trace will be logged.
            Fatal exceptions usually happen just before or during a total application failure. For this reason, they are very high priority.
            That means logging a fatal error will force all buffers to flush. If the link to the log store is down then they will be flushed 
            to a file for safe keeping until service is restored.
            The tag SHOULD be lowercase separated with hypens or underscores and represents a subset of logs.
            It is suggested to use Service.LogTag: the lowercase type name, or the lowercase service name if you don't have a type.
            </summary>
        </member>
        <member name="M:System.Log.Fatal(System.String,System.Exception,System.String)">
            <summary>
            Logs a fatal error message for the given tag. It is strongly recommended to pass the exception here too such that the stack trace will be logged.
            Fatal exceptions usually happen just before or during a total application failure. For this reason, they are very high priority.
            That means logging a fatal error will force all buffers to flush. If the link to the log store is down then they will be flushed 
            to a file for safe keeping until service is restored.
            The tag SHOULD be lowercase separated with hypens or underscores and represents a subset of logs.
            It is suggested to use Service.LogTag: the lowercase type name, or the lowercase service name if you don't have a type.
            </summary>
        </member>
        <member name="M:System.Log.ReadSelfBackwards(System.Action{Api.ErrorLogging.LogTransactionReader})">
            <summary>
            Reads the log for this node backwards.
            </summary>
            <param name="onRead">A callback to run whilst reading entries in the log. You can interrupt it if you wish to stop.</param>
            <returns></returns>
        </member>
        <member name="F:System.Log._schema">
            <summary>
            The Lumity schema used by the log transactions.
            </summary>
        </member>
        <member name="M:System.Log.FromStdOut(System.String)">
            <summary>
            Don't use this directly. It exists to track log entries written via stdout (Console.WriteLine et al).
            </summary>
        </member>
        <member name="M:System.Log.Add(Api.SocketServerLibrary.Writer,System.Boolean)">
            <summary>
            Adds the given writer to the in memory buffer.
            </summary>
            <param name="writer"></param>
            <param name="highPriority">True if this message should not sit in the buffer and forces an immediate flush.</param>
        </member>
        <member name="M:System.Log.LogFilePath">
            <summary>
            Gets the file path that the main log is stored at.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CryptSharp.Crypter">
            <summary>
            Crypts and verifies passwords. The main class for most uses of this library.
            </summary>
            
            <example>
            <code title="Crypting a Password">
            using CryptSharp;
            
            // Crypt using the Blowfish crypt ("BCrypt") algorithm.
            string cryptedPassword = Crypter.Blowfish.Crypt(password);
            </code>
            <code title="Checking a Password">
            using CryptSharp;
            
            // Do the passwords match?
            // You can also check a password using the Crypt method, but this approach way is easier.
            bool matches = Crypter.CheckPassword(testPassword, cryptedPassword);
            </code>
            <code title="Specifying Options">
            using CryptSharp;
            
            // Specify the $apr1$ Apache htpasswd variant of the MD5 crypt algorithm.
            string cryptedPassword = Crypter.MD5.Crypt(password, new CrypterOptions()
                {
                    { CrypterOption.Variant, MD5CrypterVariant.Apache }
                });
            </code>
            </example>
        </member>
        <member name="M:CryptSharp.Crypter.CanCrypt(System.String)">
            <summary>
            Checks if the particular crypt algorithm is compatible with the salt string or crypted password.
            </summary>
            <param name="salt">The salt string or crypted password.</param>
            <returns><c>true</c> if the algorithm is compatible.</returns>
        </member>
        <member name="M:CryptSharp.Crypter.Crypt(System.String)">
            <summary>
            Creates a one-way password hash (crypted password) from a password string.
            </summary>
            <param name="password">The password string. Characters are UTF-8 encoded.</param>
            <returns>The crypted password.</returns>
        </member>
        <member name="M:CryptSharp.Crypter.Crypt(System.String,CryptSharp.CrypterOptions)">
            <summary>
            Creates a one-way password hash (crypted password) from a password string.
            Options modify the crypt operation.
            </summary>
            <param name="password">The password string. Characters are UTF-8 encoded.</param>
            <param name="options">Options modifying the crypt operation.</param>
            <returns>The crypted password.</returns>
        </member>
        <member name="M:CryptSharp.Crypter.Crypt(System.String,System.String)">
            <summary>
            Creates a one-way password hash (crypted password) from a password string and a salt string.
            
            The salt can be produced using <see cref="M:CryptSharp.Crypter.GenerateSalt(CryptSharp.CrypterOptions)"/>.
            Because crypted passwords take the form <c>algorithm+salt+hash</c>, if you pass
            a crypted password as the salt parameter, the same algorithm and salt will be used to re-crypt the
            password. Since randomness comes from the salt, the same salt means the same hash, and so the
            same crypted password will result. Therefore, this method can both generate *and* verify crypted passwords.
            </summary>
            <param name="password">The password string. Characters are UTF-8 encoded.</param>
            <param name="salt">The salt string or crypted password containing a salt string.</param>
            <returns>The crypted password.</returns>
        </member>
        <member name="M:CryptSharp.Crypter.Crypt(System.Byte[])">
            <summary>
            Creates a one-way password hash (crypted password) from password bytes.
            </summary>
            <param name="password">The bytes of the password.</param>
            <returns>The crypted password.</returns>
        </member>
        <member name="M:CryptSharp.Crypter.Crypt(System.Byte[],CryptSharp.CrypterOptions)">
            <summary>
            Creates a one-way password hash (crypted password) from password bytes.
            Options modify the crypt operation.
            </summary>
            <param name="password">The bytes of the password.</param>
            <param name="options">Options modifying the crypt operation.</param>
            <returns>The crypted password.</returns>
        </member>
        <member name="M:CryptSharp.Crypter.Crypt(System.Byte[],System.String)">
            <summary>
            Creates a one-way password hash (crypted password) from password bytes and a salt string.
            
            The salt can be produced using <see cref="M:CryptSharp.Crypter.GenerateSalt(CryptSharp.CrypterOptions)"/>.
            Because crypted passwords take the form <c>algorithm+salt+hash</c>, if you pass
            a crypted password as the salt parameter, the same algorithm and salt will be used to re-crypt the
            password. Since randomness comes from the salt, the same salt means the same hash, and so the
            same crypted password will result. Therefore, this method can both generate *and* verify crypted passwords.
            </summary>
            <param name="password">The bytes of the password.</param>
            <param name="salt">The salt string or crypted password containing a salt string.</param>
            <returns>The crypted password.</returns>
        </member>
        <member name="M:CryptSharp.Crypter.GenerateSalt">
            <summary>
            Generates a salt string with default options.
            The purpose of salt is to make dictionary attacks against a whole password database much harder,
            by causing the crypted password to be different even if two users have the same uncrypted password.
            </summary>
            <returns>The salt string.</returns>
        </member>
        <member name="M:CryptSharp.Crypter.GenerateSalt(System.Int32)">
            <summary>
            Generates a salt string using the specified number of rounds.
            The purpose of salt is to make dictionary attacks against a whole password database much harder,
            by causing the crypted password to be different even if two users have the same uncrypted password.
            </summary>
            <returns>The salt string.</returns>
        </member>
        <member name="M:CryptSharp.Crypter.GenerateSalt(CryptSharp.CrypterOptions)">
            <summary>
            Generates a salt string. Options are used to modify the salt generation.
            The purpose of salt is to make dictionary attacks against a whole password database much harder,
            by causing the crypted password to be different even if two users have the same uncrypted password.
            
            Randomness in a crypted password comes from its salt string, as do all recorded options.
            The same salt string, when combined with the same password, will generate the same crypted password.
            If the salt string differs, the same password will generate a different crypted password
            (crypted passwords have the form <c>algorithm+salt+hash</c>, so the salt is always carried along
            with the crypted password).
            </summary>
            <param name="options">Options modifying the salt generation.</param>
            <returns>The salt string.</returns>
        </member>
        <member name="P:CryptSharp.Crypter.Properties">
            <summary>
            Properties inherent to the particular crypt algorithm. These cannot be modified.
            See <see cref="T:CryptSharp.CrypterProperty"/> for possible keys.
            </summary>
        </member>
        <member name="T:CryptSharp.CrypterOption">
            <summary>
            Options that modify the crypt operation.
            </summary>
        </member>
        <member name="F:CryptSharp.CrypterOption.Rounds">
            <summary>
            The number of rounds to iterate.
            </summary>
        </member>
        <member name="F:CryptSharp.CrypterOption.Variant">
            <summary>
            The variant of the crypt algorithm to use.
            </summary>
        </member>
        <member name="T:CryptSharp.CrypterOptionKey">
            <summary>
            The key type for options.
            </summary>
        </member>
        <member name="M:CryptSharp.CrypterOptionKey.#ctor(System.String,System.Type)">
            <summary>
            Creates a new option key.
            </summary>
            <param name="description">A description of the option.</param>
            <param name="valueType">The type of the option's value.</param>
        </member>
        <member name="M:CryptSharp.CrypterOptionKey.CheckValue(System.Object)">
            <summary>
            Throws an exception if the value is incompatible with this option.
            </summary>
            <param name="value">The value to check.</param>
        </member>
        <member name="M:CryptSharp.CrypterOptionKey.OnCheckValue(System.Object)">
            <summary>
            Override this to provide additional validation for an option.
            </summary>
            <param name="value">The value to check.</param>
        </member>
        <member name="M:CryptSharp.CrypterOptionKey.ToString">
            <inheritdoc />
        </member>
        <member name="P:CryptSharp.CrypterOptionKey.Description">
            <summary>
            A description of the option.
            </summary>
        </member>
        <member name="P:CryptSharp.CrypterOptionKey.ValueType">
            <summary>
            The type of the option's value.
            </summary>
        </member>
        <member name="T:CryptSharp.CrypterOptions">
            <summary>
            Stores options for the crypt operation.
            </summary>
        </member>
        <member name="M:CryptSharp.CrypterOptions.Add(CryptSharp.CrypterOptionKey,System.Object)">
            <summary>
            Sets the value of an option, if the option has not already been set.
            </summary>
            <param name="key">The key of the option.</param>
            <param name="value">The value of the option.</param>
        </member>
        <member name="M:CryptSharp.CrypterOptions.Clear">
            <summary>
            Clears all options.
            </summary>
        </member>
        <member name="M:CryptSharp.CrypterOptions.ContainsKey(CryptSharp.CrypterOptionKey)">
            <summary>
            Checks if an option is set.
            </summary>
            <param name="key">The key of the option.</param>
            <returns><c>true</c> if the option is set.</returns>
        </member>
        <member name="M:CryptSharp.CrypterOptions.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through all options.
            </summary>
            <returns>An enumerator for the options.</returns>
        </member>
        <member name="M:CryptSharp.CrypterOptions.GetValue``1(CryptSharp.CrypterOptionKey)">
            <summary>
            Gets the value of an option, if the option is set, or a default value otherwise.
            </summary>
            <typeparam name="T">The type of the option's value.</typeparam>
            <param name="key">The key of the option.</param>
            <returns>The option's value.</returns>
        </member>
        <member name="M:CryptSharp.CrypterOptions.GetValue``1(CryptSharp.CrypterOptionKey,``0)">
            <summary>
            Gets the value of an option, if the option is set, or a specified default value otherwise.
            </summary>
            <typeparam name="T">The type of the option's value.</typeparam>
            <param name="key">The key of the option.</param>
            <param name="defaultValue">The default value if the option is not set.</param>
            <returns>The option's value.</returns>
        </member>
        <member name="M:CryptSharp.CrypterOptions.Remove(CryptSharp.CrypterOptionKey)">
            <summary>
            Clears an option.
            </summary>
            <param name="key">The key of the option.</param>
            <returns><c>true</c> if the option was found and cleared.</returns>
        </member>
        <member name="M:CryptSharp.CrypterOptions.TryGetValue(CryptSharp.CrypterOptionKey,System.Object@)">
            <summary>
            Gets the value of an option, if the option is set.
            </summary>
            <param name="key">The key of the option.</param>
            <param name="value">The value, or <c>null</c> if the option is not set.</param>
            <returns><c>true</c> if the option is set.</returns>
        </member>
        <member name="P:CryptSharp.CrypterOptions.Count">
            <summary>
            The number of options that have been set.
            </summary>
        </member>
        <member name="P:CryptSharp.CrypterOptions.Item(CryptSharp.CrypterOptionKey)">
            <summary>
            Gets or sets an option.
            </summary>
            <param name="key">The key of the option.</param>
            <returns>The value of the option.</returns>
        </member>
        <member name="P:CryptSharp.CrypterOptions.None">
            <summary>
            No options.
            </summary>
        </member>
        <member name="M:CryptSharp.CrypterOptions.MakeReadOnly">
            <summary>
            Prevents future changes to the options.
            </summary>
            <returns>The same <see cref="T:CryptSharp.CrypterOptions"/>.</returns>
        </member>
        <member name="P:CryptSharp.CrypterOptions.IsReadOnly">
            <summary>
            <c>true</c> if the options cannot be changed.
            </summary>
        </member>
        <member name="T:CryptSharp.CrypterProperty">
            <summary>
            Properties inherent to particular crypt algorithms. 
            </summary>
        </member>
        <member name="F:CryptSharp.CrypterProperty.MaxPasswordLength">
            <summary>
            The maximum password length. Bytes beyond this length will have no effect.
            </summary>
        </member>
        <member name="F:CryptSharp.CrypterProperty.MinRounds">
            <summary>
            The minimum number for <see cref="F:CryptSharp.CrypterOption.Rounds"/>.
            </summary>
        </member>
        <member name="F:CryptSharp.CrypterProperty.MaxRounds">
            <summary>
            The maximum number for <see cref="F:CryptSharp.CrypterOption.Rounds"/>.
            </summary>
        </member>
        <member name="T:CryptSharp.PhpassCrypter">
            <summary>
            PHPass crypt. Used by WordPress. Variants support phpBB and Drupal 7+.
            </summary>
        </member>
        <member name="M:CryptSharp.PhpassCrypter.GenerateSalt(CryptSharp.CrypterOptions)">
            <inheritdoc />
        </member>
        <member name="M:CryptSharp.PhpassCrypter.CanCrypt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CryptSharp.PhpassCrypter.Crypt(System.Byte[],System.String)">
            <inheritdoc />
        </member>
        <member name="P:CryptSharp.PhpassCrypter.Properties">
            <inheritdoc />
        </member>
        <member name="T:CryptSharp.PhpassCrypterVariant">
            <summary>
            Modified versions of the PHPass crypt algorithm.
            </summary>
        </member>
        <member name="F:CryptSharp.PhpassCrypterVariant.Standard">
            <summary>
            Standard PHPass. WordPress uses this.
            </summary>
        </member>
        <member name="F:CryptSharp.PhpassCrypterVariant.Phpbb">
            <summary>
            phpBB changes the prefix but the algorithm is otherwise identical.
            </summary>
        </member>
        <member name="F:CryptSharp.PhpassCrypterVariant.Drupal">
            <summary>
            Drupal 7+ uses SHA512 instead of MD5.
            </summary>
        </member>
        <member name="T:CryptSharp.Utility.Base64Encoding">
            <summary>
            Base-64 binary-to-text encodings.
            </summary>
        </member>
        <member name="P:CryptSharp.Utility.Base64Encoding.Blowfish">
            <summary>
            Blowfish crypt orders characters differently from standard crypt, and begins encoding from
            the most-significant bit instead of the least-significant bit.
            </summary>
        </member>
        <member name="P:CryptSharp.Utility.Base64Encoding.UnixCrypt">
            <summary>
            Traditional DES crypt base-64, as seen on Unix /etc/passwd, many websites, database servers, etc.
            </summary>
        </member>
        <member name="P:CryptSharp.Utility.Base64Encoding.UnixMD5">
            <summary>
            MD5, SHA256, and SHA512 crypt base-64, as seen on Unix /etc/passwd, many websites, database servers, etc.
            </summary>
        </member>
        <member name="T:CryptSharp.Utility.BaseEncodingDecodeFilterCallback">
            <summary>
            A callback to map arbitrary characters onto the characters that can be decoded.
            </summary>
            <param name="originalCharacter">The original character.</param>
            <returns>the replacement character.</returns>
        </member>
        <member name="T:CryptSharp.Utility.BaseEncoding">
            <summary>
            Performs generic binary-to-text encoding.
            </summary>
        </member>
        <member name="M:CryptSharp.Utility.BaseEncoding.#ctor(System.String,System.Boolean)">
            <summary>
            Defines a binary-to-text encoding.
            </summary>
            <param name="characterSet">The characters of the encoding.</param>
            <param name="msbComesFirst">
                <c>true</c> to begin with the most-significant bit of each byte.
                Otherwise, the encoding begins with the least-significant bit.
            </param>
        </member>
        <member name="M:CryptSharp.Utility.BaseEncoding.#ctor(System.String,System.Boolean,System.Collections.Generic.IDictionary{System.Char,System.Int32},CryptSharp.Utility.BaseEncodingDecodeFilterCallback)">
            <summary>
            Defines a binary-to-text encoding.
            Additional decode characters let you add aliases, and a filter callback can be used
            to make decoding case-insensitive among other things.
            </summary>
            <param name="characterSet">The characters of the encoding.</param>
            <param name="msbComesFirst">
                <c>true</c> to begin with the most-significant bit of each byte.
                Otherwise, the encoding begins with the least-significant bit.
            </param>
            <param name="additionalDecodeCharacters">
                A dictionary of alias characters, or <c>null</c> if no aliases are desired.
            </param>
            <param name="decodeFilterCallback">
                A callback to map arbitrary characters onto the characters that can be decoded.
            </param>
        </member>
        <member name="M:CryptSharp.Utility.BaseEncoding.GetValue(System.Char)">
            <summary>
            Gets the value corresponding to the specified character.
            </summary>
            <param name="character">A character.</param>
            <returns>A value, or <c>-1</c> if the character is not part of the encoding.</returns>
        </member>
        <member name="M:CryptSharp.Utility.BaseEncoding.GetChar(System.Int32)">
            <summary>
            Gets the character corresponding to the specified value.
            </summary>
            <param name="value">A value.</param>
            <returns>A character.</returns>
        </member>
        <member name="P:CryptSharp.Utility.BaseEncoding.BitMask">
            <summary>
            The bit mask for a single character in the current encoding.
            </summary>
        </member>
        <member name="P:CryptSharp.Utility.BaseEncoding.BitsPerCharacter">
            <summary>
            The number of bits per character in the current encoding.
            </summary>
        </member>
        <member name="P:CryptSharp.Utility.BaseEncoding.MsbComesFirst">
            <summary>
            <c>true</c> if the encoding begins with the most-significant bit of each byte.
            Otherwise, the encoding begins with the least-significant bit.
            </summary>
        </member>
        <member name="M:CryptSharp.Utility.BaseEncoding.GetMaxCharCount(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CryptSharp.Utility.BaseEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CryptSharp.Utility.BaseEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Converts bytes from their binary representation to a text representation.
            </summary>
            <param name="bytes">An input array of bytes.</param>
            <param name="byteIndex">The index of the first byte.</param>
            <param name="byteCount">The number of bytes to read.</param>
            <param name="chars">An output array of characters.</param>
            <param name="charIndex">The index of the first character.</param>
            <param name="charCount">The number of characters to write.</param>
            <returns>The number of characters written.</returns>
        </member>
        <member name="M:CryptSharp.Utility.BaseEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CryptSharp.Utility.BaseEncoding.GetMaxByteCount(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CryptSharp.Utility.BaseEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CryptSharp.Utility.BaseEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts characters from their text representation to a binary representation.
            </summary>
            <param name="chars">An input array of characters.</param>
            <param name="charIndex">The index of the first character.</param>
            <param name="charCount">The number of characters to read.</param>
            <param name="bytes">An output array of bytes.</param>
            <param name="byteIndex">The index of the first byte.</param>
            <param name="byteCount">The number of bytes to write.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:CryptSharp.Utility.BaseEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:ustring">
            <summary>
            ustrings are used to manipulate utf8 strings, either from byte arrays or blocks of memory.
            </summary>
            <remarks>
            <para>
              The ustring provides a series of string-like operations over an array of bytes.   The buffer
              is expected to contain an UTF8 encoded string, but if the buffer contains an invalid utf8
              sequence many of the operations will continue to work.
            </para>
            <para>
              The strings can be created either from byte arrays, a range within a byte array, or from a 
              block of unmanaged memory.  The ustrings are created using one of the Make or MakeCopy methods 
              in the class, not by invoking the new operator on the class.
            </para>
            <para>
            <list type="table">
              <listheader>
                <term>Method</term>
                <term>Description</term>
              </listheader>
              <item>
                <term><see cref="M:ustring.Make(string)"/></term>
                <description>Creates a ustring from a C# string.</description>
              </item>
              <item>
                <term><see cref="M:ustring.Make(byte[])"/></term>
                <description>Creates a ustring from a byte array.</description>
              </item>
              <item>
                <term><see cref="M:ustring.Make(byte[],int,int)"/></term>
                <description>Creates a ustring from a range in a byte array.</description>
              </item>
              <item>
                <term><see cref="M:ustring.Make(uint)"/></term>
                <description>Creates a ustring from a single rune.</description>
              </item>
              <item>
                <term><see cref="M:ustring.Make(char[])"/></term>
                <description>Creates a ustring from a character array.</description>
              </item>
              <item>
                <term><see cref="M:ustring.Make(System.IntPtr,int,System.Action{ustring, System.IntPtr})"/></term>
                <description>Creates a ustring from an unmanaged memory block, with an optional method to invoke to release the block when the ustring is garbage collected.</description>
              </item>
              <item>
                <term><see cref="M:ustring.Make(System.IntPtr,System.Action{ustring, System.IntPtr})"/></term>
                <description>
                  Creates a ustring from an unmanaged memory block that is null-terminated, suitable for interoperability with C APIs.   
                  It takes an optional method to invoke to release the block when the ustring is garbage collected.
                </description>
              </item>
              <item>
                <term><see cref="M:ustring.MakeCopy(System.IntPtr,int)"/></term>
                <description>Creates a ustring by making a copy of the provided memory block.</description>
              </item>
              <item>
                <term><see cref="M:ustring.MakeCopy(System.IntPtr)"/></term>
                <description>
                  Creates a ustring by making a copy of the null-terminated memory block.   Suitable for interoperability with C APIs.   
                </description>
              </item>
            </list>
            </para>
            <para>
              The Length property describes the length in bytes of the underlying array, while the RuneCount 
              property describes the number of code points (or runes) that are reprenseted by the underlying 
              utf8 encoded buffer.
            </para>
            <para>
              The ustring supports slicing by calling the indexer with two arguments, the argument represent
              indexes into the underlying byte buffer.  The starting index is inclusive, while the ending index
              is exclusive.   Negative values can be used to index the string from the end.  See the documentation
              for the indexer for more details.
            </para>
            
            </remarks>
        </member>
        <member name="F:ustring.buffer">
            <summary>
            
            </summary>
        </member>
        <member name="M:ustring.GetInternalBuffer">
            <summary>
            Gets the internal buffer of this string (utf8 encoded).
            </summary>
            <returns></returns>
        </member>
        <member name="F:ustring.Empty">
            <summary>
            The empty ustring.
            </summary>
        </member>
        <member name="M:ustring.Make(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ustring"/> class using the provided byte array for its storage.
            </summary>
            <param name="buffer">Buffer containing the utf8 encoded string.</param>
            <remarks>
            <para>
              No validation is performed on the contents of the byte buffer, so it
              might contains invalid UTF-8 sequences.
            </para>
            <para>
              No copy is made of the incoming byte buffer, so changes to it will be visible on the ustring.
            </para>
            </remarks>
        </member>
        <member name="M:ustring.Make(Api.Startup.Utf8Helpers.Rune)">
            <summary>
            Initializes a new instance using the provided rune as the sole character in the string.
            </summary>
            <param name="rune">Rune (short name for Unicode code point).</param>
        </member>
        <member name="M:ustring.Make(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ustring"/> class from a string.
            </summary>
            <param name="str">C# String.</param>
        </member>
        <member name="M:ustring.Make(System.Char[])">
            <summary>
            Initializes a new instance of the <see cref="T:ustring"/> class from an array of C# characters.
            </summary>
            <param name="chars">Characters.</param>
        </member>
        <member name="M:ustring.Make(System.Collections.Generic.IList{Api.Startup.Utf8Helpers.Rune})">
            <summary>
            Initializes a new instance of the <see cref="T:ustring"/> class from an array of Runes.
            </summary>
            <returns>The make.</returns>
            <param name="runes">Runes.</param>
        </member>
        <member name="M:ustring.Make(System.Collections.Generic.IEnumerable{Api.Startup.Utf8Helpers.Rune})">
            <summary>
            Initializes a new instance of the <see cref="T:ustring"/> class from an IEnumerable of runes
            </summary>
            <returns>The make.</returns>
            <param name="runes">Runes.</param>
        </member>
        <member name="M:ustring.Make(System.UInt32[])">
            <summary>
            Initializes a new instance of the <see cref="T:ustring"/> class from an array of uints, which contain CodePoints.
            </summary>
            <returns>The make.</returns>
            <param name="runes">Runes.</param>
        </member>
        <member name="M:ustring.op_Equality(ustring,ustring)">
            <summary>
            Determines whether a specified instance of <see cref="T:ustring"/> is equal to another specified <see cref="T:ustring"/>, this means that the contents of the string are identical
            </summary>
            <param name="a">The first <see cref="T:ustring"/> to compare.</param>
            <param name="b">The second <see cref="T:ustring"/> to compare.</param>
            <returns><c>true</c> if <c>a</c> and <c>b</c> are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ustring.op_Inequality(ustring,ustring)">
            <summary>
            Determines whether a specified instance of <see cref="T:ustring"/> is not equal to another specified <see cref="T:ustring"/>.
            </summary>
            <param name="a">The first <see cref="T:ustring"/> to compare.</param>
            <param name="b">The second <see cref="T:ustring"/> to compare.</param>
            <returns><c>true</c> if <c>a</c> and <c>b</c> are not equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ustring.op_Explicit(System.String)~ustring">
            <summary>
            explicit conversion from a C# string into a ustring.
            </summary>
            <returns>The ustring with the same contents as the string.</returns>
            <param name="str">The string to encode as a ustring.</param>
            <remarks>
            This will allocate a byte array and copy the contents of the 
            string encoded as UTF8 into it.
            </remarks>
        </member>
        <member name="M:ustring.op_Explicit(System.Byte[])~ustring">
            <summary>
            explicit conversion from a byte array into a ustring.
            </summary>
            <returns>The ustring wrapping the existing byte array.</returns>
            <param name="buffer">The buffer containing the data.</param>
            <remarks>
            The returned string will keep a reference to the buffer, which 
            means that changes done to the buffer will be reflected into the
            ustring.
            </remarks>
        </member>
        <member name="M:ustring.AsSpan">
            <summary>
            Get as a span of bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ustring.AsWritableSpan">
            <summary>
            Get as a span of bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ustring.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:ustring"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="M:ustring.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:ustring"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:ustring"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:ustring"/>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ustring.Equals(ustring)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:ustring"/>.
            </summary>
            <param name="other">The other string to compare with the current <see cref="T:ustring"/>.</param>
            <returns><c>true</c> if the specified ustring is equal to the current ustring;
            otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:ustring.EqualsFold(ustring)">
            <summary>
            Reports whether this string and the provided string, when interpreted as UTF-8 strings, are equal under Unicode case-folding
            </summary>
            <returns><c>true</c>, if fold was equaled, <c>false</c> otherwise.</returns>
            <param name="other">Other.</param>
        </member>
        <member name="M:ustring.Copy">
            <summary>
            The Copy method makes a copy of the underlying data, it can be used to release the resources associated with an
            unmanaged buffer, or a ranged string.
            </summary>
            <returns>A copy of the underlying data.</returns>
        </member>
        <member name="M:ustring.Make(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ustring"/> class from a byte array.
            </summary>
            <param name="buffer">Buffer containing the utf8 encoded string.</param>
            <param name="start">Starting offset into the buffer.</param>
            <param name="count">Number of bytes to consume from the buffer.</param>
            <remarks>
            <para>
            No validation is performed on the contents of the byte buffer, so it
            might contains invalid UTF-8 sequences.
            </para>
            <para>
            This will make a copy of the buffer range.
            </para>
            </remarks>
        </member>
        <member name="P:ustring.Length">
            <summary>
            Gets the length in bytes of the byte buffer.
            </summary>
            <value>The length in bytes of the encoded UTF8 string, does not represent the number of runes.</value>
            <remarks>To obtain the number of runes in the string, use the <see cref="P:System.ustring.RuneCount"/> property.</remarks>
        </member>
        <member name="P:ustring.Item(System.Int32)">
            <summary>
            Returns the byte at the specified position.
            </summary>
            <value>The byte encoded at the specified position.</value>
            <remarks>The index value should be between 0 and Length-1.</remarks>
        </member>
        <member name="M:ustring.GetRange(System.Int32,System.Int32)">
            <summary>
            For internal use, returns the range of bytes specified.
            </summary>
            <returns>The range.</returns>
            <param name="start">Start.</param>
            <param name="end">End.</param>
        </member>
        <member name="P:ustring.Item(System.Int32,System.Int32)">
            <summary>
            Returns a slice of the ustring delimited by the [start, end) range.  If the range is invalid, the return is the Empty string.
            </summary>
            <param name="start">Start index, this value is inclusive.   If the value is negative, the value is added to the length, allowing this parameter to count to count from the end of the string.</param>
            <param name="end">End index, this value is exclusive.   If the value is negative, the value is added to the length, plus one, allowing this parameter to count from the end of the string.</param>
            <remarks>
            <para>
            Some examples given the string "1234567890":
            </para>
            <para>The range [0, 4] produces "1234"</para>
            <para>The range [8, 10] produces "90"</para>
            <para>The range [8, null] produces "90"</para>
            <para>The range [-2, null] produces "90"</para>
            <para>The range [8, 9] produces "9"</para>
            <para>The range [-4, -1] produces "789"</para>
            <para>The range [-4, null] produces "7890"</para>
            <para>The range [-4, null] produces "7890"</para>
            <para>The range [-9, -3] produces "234567"</para>
            <para>The range [0, 0] produces the empty string</para>
            <para>
              This indexer does not raise exceptions for invalid indexes, instead the value 
              returned is the ustring.Empty value:
            </para>
            <para>
              The range [100, 200] produces the ustring.Empty
            </para>
            <para>
              The range [-100, 0] produces ustring.Empty
            </para>
            <para>
              To simulate the optional end boundary, use the indexer that takes the
              object parameter and pass a null to it.   For example, to fetch all
              elements from the position five until the end, use [5, null]
            </para>
            </remarks>
        </member>
        <member name="P:ustring.Item(System.Int32,System.Object)">
            <summary>
            Returns a slice of the ustring delimited by the [start, last-element-of-the-string range.  If the range is invalid, the return is the Empty string.
            </summary>
            <param name="start">Byte start index, this value is inclusive.   If the value is negative, the value is added to the length, allowing this parameter to count to count from the end of the string.</param>
            <param name="end">Byte end index.  This value is expected to be null to indicate that it should be the last element of the string.</param>
            <remarks>
            <para>
            This is a companion indexer to the indexer that takes two integers, it only exists
            to provide the optional end argument to mean "until the end", and to make the code
            that uses indexer look familiar, without having to resort to another API.
            
            Some examples given the string "1234567890":
            </para>
            <para>
              The indexes are byte indexes, they are not rune indexes.
            </para>
            <para>The range [8, null] produces "90"</para>
            <para>The range [-2, null] produces "90"</para>
            <para>The range [8, 9] produces "9"</para>
            <para>The range [-4, -1] produces "789"</para>
            <para>The range [-4, null] produces "7890"</para>
            <para>The range [-4, null] produces "7890"</para>
            <para>The range [-9, -3] produces "234567"</para>
            <para>
              This indexer does not raise exceptions for invalid indexes, instead the value 
              returned is the ustring.Empty value:
            </para>
            <para>
              The range [100, 200] produces the ustring.Empty
            </para>
            <para>
              The range [-100, 0] produces ustring.Empty
            </para>
            <para>
              To simulate the optional end boundary, use the indexer that takes the
              object parameter and pass a null to it.   For example, to fetch all
              elements from the position five until the end, use [5, null]
            </para>
            </remarks>
        </member>
        <member name="M:ustring.Substring(System.Int32)">
            <summary>
            Returns the substring starting at the given position in bytes from the origin of the Utf8 string.   
            Use RuneSubstring to extract substrings based on the rune index, rather than the byte index inside the
            Utf8 encoded string.
            </summary>
            <returns>The substring starting at the specified offset.</returns>
            <param name="byteStart">Starting point, the value is .</param>
        </member>
        <member name="M:ustring.RuneSubstring(System.Int32)">
            <summary>
            
            </summary>
            <param name="runeStart"></param>
            <returns></returns>
        </member>
        <member name="P:ustring.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref="T:ustring"/> is empty.
            </summary>
            <value><c>true</c> if is empty (Length is zero); otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ustring.RuneCount">
            <summary>
            Gets the rune count of the string.
            </summary>
            <value>The rune count.</value>
        </member>
        <member name="P:ustring.ConsoleWidth">
            <summary>
            Returns the number of columns used by the unicode string on console applications.  This is done by calling the Rune.ColumnWidth on each rune.
            </summary>
        </member>
        <member name="M:ustring.CopyTo(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies the specified number of bytes from the the underlying ustring representation to the target array at the specified offset.
            </summary>
            <param name="fromOffset">Offset in the underlying ustring buffer to copy from.</param>
            <param name="target">Target array where the buffer contents will be copied to.</param>
            <param name="targetOffset">Offset into the target array where this will be copied to.</param>
            <param name="count">Number of bytes to copy.</param>
        </member>
        <member name="M:ustring.ToByteArray">
            <summary>
            Returns a version of the ustring as a byte array, it might allocate or return the internal byte buffer, depending on the backing implementation.
            </summary>
            <returns>A byte array containing the contents of the ustring.</returns>
            <remarks>
            The byte array contains either a copy of the underlying data, in the cases where the ustring was created
            from an unmanaged pointer or when the ustring was created by either slicing or from a range withing a byte
            array.   Otherwise the returned array that is used by the ustring itself.
            </remarks>
        </member>
        <member name="M:ustring.Concat(ustring[])">
            <summary>
            Concatenates the provided ustrings into a new ustring.
            </summary>
            <returns>A new ustring that contains the concatenation of all the ustrings.</returns>
            <param name="args">One or more ustrings.</param>
        </member>
        <member name="M:ustring.Explode(System.Int32)">
            <summary>
            Explode splits the string into a slice of UTF-8 strings
            </summary>
            <returns>, one string per unicode character, 
            up to the specified limit.</returns>
            <param name="limit">Maximum number of entries to return, or -1 for no limits.</param>
        </member>
        <member name="M:ustring.ToRunes(System.Int32)">
            <summary>
            Converts a ustring into a rune array.
            </summary>
            <returns>An array containing the runes for the string up to the specified limit.</returns>
            <param name="limit">Maximum number of entries to return, or -1 for no limits.</param>
        </member>
        <member name="M:ustring.ToRuneList">
            <summary>
            Converts a ustring into a List of runes.
            </summary>
            <returns>A list containing the runes for the string, it is not bound by any limits.</returns>
        </member>
        <member name="M:ustring.ToRuneList(System.Int32)">
            <summary>
            Converts a ustring into a rune array.
            </summary>
            <returns>An array containing the runes for the string up to the specified limit.</returns>
            <param name="limit">Maximum number of entries to return, or -1 for no limits.</param>
        </member>
        <member name="M:ustring.Count(ustring)">
            <summary>
            Count the number of non-overlapping instances of substr in the string.
            </summary>
            <returns>If substr is an empty string, Count returns 1 + the number of Unicode code points in the string, otherwise the count of non-overlapping instances in string.</returns>
            <param name="substr">Substr.</param>
        </member>
        <member name="M:ustring.Contains(ustring)">
            <summary>
            Returns a value indicating whether a specified substring occurs within this string.
            </summary>
            <returns>true if the <paramref name="substr" /> parameter occurs within this string, or if <paramref name="substr" /> is the empty string (""); otherwise, false.</returns>
            <param name="substr">The string to seek.</param>
        </member>
        <member name="M:ustring.Contains(System.UInt32)">
            <summary>
            Returns a value indicating whether a specified rune occurs within this string.
            </summary>
            <returns>true if the <paramref name="rune" /> parameter occurs within this string; otherwise, false.</returns>
            <param name="rune">The rune to seek.</param>
        </member>
        <member name="M:ustring.ContainsAny(ustring)">
            <summary>
            Returns a value indicating whether any of the characters in the provided string occurs within this string.
            </summary>
            <returns>true if any of the characters in <paramref name="chars" /> parameter occurs within this string; otherwise, false.</returns>
            <param name="chars">string contanining one or more characters.</param>
        </member>
        <member name="M:ustring.ContainsAny(System.UInt32[])">
            <summary>
            Returns a value indicating whether any of the runes occurs within this string.
            </summary>
            <returns>true if any of the runes in <paramref name="runes" /> parameter occurs within this string; otherwise, false.</returns>
            <param name="runes">one or more runes.</param>
        </member>
        <member name="M:ustring.IndexOf(ustring,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of a specified Unicode character or string within this instance. 
            </summary>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not.   The index position returned is relative to the start of the substring, not to the offset.</returns>
            <param name="substr">The string to seek.</param>
            <param name="offset">The search starting position.</param>
        </member>
        <member name="M:ustring.LastIndexOf(ustring)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified substring within this instance
            </summary>
            <returns>The zero-based index position of <paramref name="substr" /> if that character is found, or -1 if it is not.</returns>
            <param name="substr">The ustring to seek.</param>
        </member>
        <member name="M:ustring.LastIndexByte(System.Byte)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified byte on the underlying byte buffer.
            </summary>
            <returns>The zero-based index position of <paramref name="b" /> if that byte is found, or -1 if it is not.  </returns>
            <param name="b">The byte to seek.</param>
        </member>
        <member name="M:ustring.IndexOf(System.UInt32,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode rune in this string
            </summary>
            <returns>The zero-based index position of <paramref name="rune" /> if that character is found, or -1 if it is not.  If the rune is Utf8.RuneError, it returns the first instance of any invalid UTF-8 byte sequence.</returns>
            <param name="rune">Rune.</param>
            <param name="offset">Starting offset to start the search from.</param>
        </member>
        <member name="M:ustring.IndexByte(System.Byte,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified byte in the underlying byte buffer.
            </summary>
            <returns>The zero-based index position of <paramref name="b" /> if that byte is found, or -1 if it is not.  </returns>
            <param name="b">The byte to seek.</param>
            <param name="offset">Starting location.</param>
        </member>
        <member name="M:ustring.IndexOfAny(ustring)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any character in the provided string
            </summary>
            <returns>The zero-based index position of the first occurrence in this instance where any character in <paramref name="chars" /> was found; -1 if no character in <paramref name="chars" /> was found.</returns>
            <param name="chars">ustring containing characters to seek.</param>
        </member>
        <member name="M:ustring.IndexOfAny(System.UInt32[])">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any runes in the provided string
            </summary>
            <returns>The zero-based index position of the first occurrence in this instance where any character in <paramref name="runes" /> was found; -1 if no character in <paramref name="runes" /> was found.</returns>
            <param name="runes">ustring containing runes.</param>
        </member>
        <member name="M:ustring.LastIndexOfAny(ustring)">
            <summary>
            Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in the ustring.
            </summary>
            <returns>The index position of the last occurrence in this instance where any character in <paramref name="chars" /> was found; -1 if no character in <paramref name="chars" /> was found.</returns>
            <param name="chars">The string containing characters to seek.</param>
        </member>
        <member name="M:ustring.CompareTo(ustring)">
            <summary>
            Implements the IComparable.CompareTo method
            </summary>
            <returns>Less than zero if this instance is less than value, zero if they are the same, and higher than zero if the instance is greater.</returns>
            <param name="other">Value.</param>
        </member>
        <member name="M:ustring.Split(ustring,System.Int32)">
            <summary>
            Split the string using at every instance of a string separator
            </summary>
            <returns>An array containing the individual strings, excluding the separator string.</returns>
            <param name="separator">Separator string.</param>
            <param name="n">Optional maximum number of results to return, or -1 for an unlimited result</param>
        </member>
        <member name="M:ustring.StartsWith(ustring)">
            <summary>
            Determines whether the beginning of this string instance matches the specified string.
            </summary>
            <returns><c>true</c> if <paramref name="prefix" /> matches the beginning of this string; otherwise, <c>false</c>.</returns>
            <param name="prefix">Prefix.</param>
        </member>
        <member name="M:ustring.EndsWith(ustring)">
            <summary>
            Determines whether the end of this string instance matches the specified string.
            </summary>
            <returns>true if <paramref name="suffix" /> matches the end of this instance; otherwise, false.</returns>
            <param name="suffix">The string to compare to the substring at the end of this instance.</param>
        </member>
        <member name="M:ustring.Join(ustring,ustring[])">
            <summary>
            Concatenates all the elements of a ustring array, using the specified separator between each element.
            </summary>
            <returns>A string that consists of the elements in <paramref name="values" /> delimited by the <paramref name="separator" /> string. If <paramref name="values" /> is an empty array, the method returns <see cref="F:System.ustring.Empty" />.</returns>
            <param name="separator">Separator.</param>
            <param name="values">Values.</param>
        </member>
        <member name="M:ustring.op_Addition(ustring,ustring)">
            <summary>
            Concatenates the contents of two <see cref="T:ustring"/> instances.
            </summary>
            <param name="u1">The first <see cref="T:ustring"/> to add, can be null.</param>
            <param name="u2">The second <see cref="T:ustring"/> to add, can be null.</param>
            <returns>The <see cref="T:ustring"/> that is the concatenation of the strings of <c>u1</c> and <c>u2</c>.</returns>
        </member>
        <member name="M:ustring.Range">
            <summary>
            An enumerator that returns the index within the string, and the rune found at that location
            </summary>
            <returns>Enumerable object that can be used to iterate and get the index of the values at the same time.</returns>
            <remarks>
            This is useful to iterate over the string and obtain both the index of the rune and the rune
            in the same call.  This version does allocate an object for the enumerator, if you want to avoid
            the object allocation, you can use the following code to iterate over the contents of the string
            <example>
            <code lang="c#">
              ustring mystr = "hello";
              int byteLen = mystr.Length;
              for (int i = 0; i &lt; byteLen;) {
                  (var rune, var size) = Utf8.DecodeRune(mystr, i, i - byteLen);
                  Console.WriteLine ("Rune is: " + rune);
                  i += size;
              }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:ustring.RuneAt(System.Int32)">
            <summary>
            Returns the Rune encoded at the specified byte <paramref name="index"/>.   
            </summary>
            <returns>The <see cref="T:System.Rune"/> which might be Rune.Error if the value at the specified index is not UTF8 compliant, for example because it is not a valid UTF8 encoding, or the buffer is too short.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:ustring.ToUpper">
            <summary>
            Returns a copy of the string s with all Unicode letters mapped to their upper case.
            </summary>
            <returns>The string to uppercase.</returns>
        </member>
        <member name="M:ustring.ToUpper(Api.Startup.Utf8Helpers.Unicode.SpecialCase)">
            <summary>
            Returns a copy of the string s with all Unicode letters mapped to their upper case giving priority to the special casing rules.
            </summary>
            <returns>The string to uppercase.</returns>
        </member>
        <member name="M:ustring.ToLower">
            <summary>
            Returns a copy of the string s with all Unicode letters mapped to their lower case.
            </summary>
            <returns>The lowercased string.</returns>
        </member>
        <member name="M:ustring.ToLower(Api.Startup.Utf8Helpers.Unicode.SpecialCase)">
            <summary>
            Returns a copy of the string s with all Unicode letters mapped to their lower case giving priority to the special casing rules.
            </summary>
            <returns>The string to uppercase.</returns>
        </member>
        <member name="M:ustring.ToTitle">
            <summary>
            Returns a copy of the string s with all Unicode letters mapped to their title case.
            </summary>
            <returns>The title-cased string.</returns>
        </member>
        <member name="M:ustring.ToTitle(Api.Startup.Utf8Helpers.Unicode.SpecialCase)">
            <summary>
            Returns a copy of the string s with all Unicode letters mapped to their title case giving priority to the special casing rules.
            </summary>
            <returns>The string to uppercase.</returns>
        </member>
        <member name="M:ustring.IsSeparator(System.UInt32)">
            <summary>
            IsSeparator reports whether the rune could mark a word boundary.
            </summary>
            <returns><c>true</c>, if the rune can be considered a word boundary, <c>false</c> otherwise.</returns>
            <param name="rune">The rune to test.</param>
        </member>
        <member name="M:ustring.Title">
            <summary>
            Converts the string to Title-case, that is every word (as determined by <see cref="M:ustring.IsSeparator"/> is Title cased.
            </summary>
            <returns>A title-cased string.</returns>
        </member>
        <member name="T:ustring.RunePredicate">
            <summary>
            Rune predicate functions take a rune as input and return a boolean determining if the rune matches or not.
            </summary>
        </member>
        <member name="M:ustring.IndexOf(ustring.RunePredicate)">
            <summary>
            IndexOf returns the index into s of the first Unicode rune satisfying matchFunc(rune), or -1 if none do.
            </summary>
            <returns>The index inside the string where the rune is found, or -1 on error.</returns>
            <param name="matchFunc">Match func, it receives a rune as a parameter and should return true if it matches, false otherwise.</param>
        </member>
        <member name="M:ustring.LastIndexOf(ustring.RunePredicate)">
            <summary>
            LastIndexOf returns the index into s of the last Unicode rune satisfying matchFunc(rune), or -1 if none do.
            </summary>
            <returns>The last index inside the string where the rune is found, or -1 on error.</returns>
            <param name="matchFunc">Match func, it receives a rune as a parameter and should return true if it matches, false otherwise.</param>
        </member>
        <member name="M:ustring.TrimStart(ustring.RunePredicate)">
            <summary>
            Returns a slice of the string with all leading runes matching the predicate removed.
            </summary>
            <returns>The current string if the predicate does not match anything, or a slice of the string starting in the first rune after the predicate matched.</returns>
            <param name="predicate">Function that determines whether this character must be trimmed.</param>
        </member>
        <member name="M:ustring.TrimStart(ustring)">
            <summary>
            TrimStarts returns a slice of the string with all leading characters in cutset removed.
            </summary>
            <returns>The slice of the string with all cutset characters removed.</returns>
            <param name="cutset">Characters to remove.</param>
        </member>
        <member name="M:ustring.TrimEnd(ustring)">
            <summary>
            TrimEnd returns a slice of the string with all leading characters in cutset removed.
            </summary>
            <returns>The slice of the string with all cutset characters removed.</returns>
            <param name="cutset">Characters to remove.</param>
        </member>
        <member name="M:ustring.TrimSpace">
            <summary>
            Returns a slice of the string with all leading and trailing space characters removed (as determined by <see cref="M:Unicode.IsSpace()"/> 
            </summary>
            <returns>The space.</returns>
        </member>
        <member name="M:ustring.TrimEnd(ustring.RunePredicate)">
            <summary>
            Returns a slice of the string with all trailing runes matching the predicate removed.
            </summary>
            <returns>The current string if the predicate does not match anything, or a slice of the string starting in the first rune after the predicate matched.</returns>
            <param name="predicate">Function that determines whether this character must be trimmed.</param>
        </member>
        <member name="M:ustring.Trim(ustring.RunePredicate)">
            <summary>
            Returns a slice of the string with all leading and trailing runes matching the predicate removed.
            </summary>
            <returns>The trim.</returns>
            <param name="predicate">Predicate.</param>
        </member>
        <member name="M:ustring.Replace(ustring,ustring,System.Int32)">
            <summary>
            Returns a new ustring with the non-overlapping instances of oldValue replaced with newValue.
            </summary>
            <returns>The replace.</returns>
            <param name="oldValue">Old value;  if it is empty, the string matches at the beginning of the string and after each UTF-8 sequence, yielding up to k+1 replacements for a k-rune string.</param>
            <param name="newValue">New value that will replace the oldValue.</param>
            <param name="maxReplacements">Optional, the maximum number of replacements.   Negative values indicate that there should be no limit to the replacements.</param>
        </member>
        <member name="M:ustring.IsNullOrEmpty(ustring)">
            <summary>
            Represent the null or empty value related to the ustring.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoController`1">
            <summary>
            A convenience controller for defining common endpoints like create, list, delete etc. Requires an AutoService of the same type to function.
            Not required to use these - you can also just directly use ControllerBase if you want.
            Like AutoService this isn't in a namespace due to the frequency it's used.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:AutoController`2">
            <summary>
            A convenience controller for defining common endpoints like create, list, delete etc. Requires an AutoService of the same type to function.
            Not required to use these - you can also just directly use ControllerBase if you want.
            Like AutoService this isn't in a namespace due to the frequency it's used.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ID"></typeparam>
            <summary>
            A convenience controller for defining common endpoints like create, list, delete etc. Requires an AutoService of the same type to function.
            Not required to use these - you can also just directly use ControllerBase if you want.
            Like AutoService this isn't in a namespace due to the frequency it's used.
            </summary>
        </member>
        <member name="F:AutoController`2._service">
            <summary>
            The underlying autoservice used by this controller.
            </summary>
        </member>
        <member name="M:AutoController`2.#ctor">
            <summary>
            Instanced automatically.
            </summary>
        </member>
        <member name="F:AutoController`2._applicationJson">
            <summary>
            Json header
            </summary>
        </member>
        <member name="M:AutoController`2.OutputJson(Api.Contexts.Context,System.Collections.Generic.IEnumerable{`0},System.String,System.Boolean)">
            <summary>
            Outputs the given content object set whilst considering the field visibility rules of the role in the context.
            To avoid an IEnumerable allocation, also consider using the non-alloc mechanism inside this function directly on high traffic usage.
            </summary>
            <param name="context"></param>
            <param name="content"></param>
            <param name="includes"></param>
            <param name="withTotal"></param>
            <returns></returns>
        </member>
        <member name="M:AutoController`2.OutputJson(Api.Contexts.Context,`0,System.String)">
            <summary>
            Outputs the given content object whilst considering the field visibility rules of the role in the context.
            </summary>
            <param name="context"></param>
            <param name="content"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="M:AutoController`2.OutputContext(Api.Contexts.Context)">
            <summary>
            Outputs a context update.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:AutoController`2.Load(`1,System.String)">
            <summary>
            GET /v1/entityTypeName/2/
            Returns the data for 1 entity.
            </summary>
        </member>
        <member name="M:AutoController`2.Delete(`1,System.String)">
            <summary>
            DELETE /v1/entityTypeName/2/
            Deletes an entity
            </summary>
        </member>
        <member name="M:AutoController`2.Recache">
            <summary>
            GET /v1/entityTypeName/recache
            Repopulates the cache for this service (if it is cached, and if you are an admin).
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoController`2.List(System.String)">
            <summary>
            GET /v1/entityTypeName/list
            Lists all entities of this type available to this user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoController`2.List(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            POST /v1/entityTypeName/list
            Lists filtered entities available to this user.
            See the filter documentation for more details on what you can request here.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoController`2.Create(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            POST /v1/entityTypeName/
            Creates a new entity. Returns the ID. Includes everything by default.
            </summary>
        </member>
        <member name="M:AutoController`2.SetFieldsOnObject(`0,Api.Contexts.Context,Newtonsoft.Json.Linq.JObject,Api.Startup.JsonFieldGroup)">
            <summary>
            Sets the fields from the given JSON object on the given target object, based on the user role in the context.
            Note that there's 2 sets of fields - a primary set, then also a secondary set which are set only after the ID of the object is known.
            E.g. during create, the object is instanced, initial fields are set, it's then actually created, and then the after ID set is run.
            </summary>
            <param name="target"></param>
            <param name="context"></param>
            <param name="body"></param>
            <param name="fieldGroup"></param>
        </member>
        <member name="M:AutoController`2.Update(`1,Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            POST /v1/entityTypeName/1/
            Updates an entity with the given ID. Includes everything by default.
            </summary>
        </member>
        <member name="M:AutoController`2.ListPOTUpdate">
            <summary>
             /// PUT /v1/entityTypeName/list.pot
            Update translations for this content type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoController`2.ListPOT(System.String,System.String)">
            <summary>
            GET /v1/entityTypeName/list.pot
            Lists all entities of this type available to this user, and outputs as a POT file.
            </summary>
            <param name="includes"></param>
            <param name="ignoreFields"></param>
            <returns></returns>
        </member>
        <member name="M:AutoController`2.ListPOT(Newtonsoft.Json.Linq.JObject,System.String,System.String)">
            <summary>
            POST /v1/entityTypeName/list.pot
            Lists filtered entities available to this user.
            See the filter documentation for more details on what you can request here.
            </summary>
            <param name="filters"></param>
            <param name="includes"></param>
            <param name="ignoreFields"></param>
            <returns></returns>
        </member>
        <member name="M:AutoController`2.EscapeForPo(System.String)">
            <summary>
            Escapes a value for use in PO/POT files.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoService`1">
            <summary>
            A general use service which manipulates an entity type. In the global namespace due to its common use.
            Deletes, creates, lists and updates them whilst also firing off a series of events.
            Note that you don't have to inherit this to create a service - it's just for convenience for common functionality.
            Services are actually detected purely by name.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AutoService`1.#ctor(Api.Eventing.EventGroup{`0})">
            <summary>
            Instanced automatically
            </summary>
            <param name="eventGroup"></param>
        </member>
        <member name="M:AutoService`1.IsTestSuite">
            <summary>
            Quick helper function
            </summary>
            <returns></returns>
        </member>
        <member name="T:DataOptions">
            <summary>
            Options when requesting data from a service.
            </summary>
        </member>
        <member name="F:DataOptions.CheckNotChanged">
            <summary>
            Checks if the given row has not changed based on the EditedUtc date.
            </summary>
        </member>
        <member name="F:DataOptions.RawFlag">
            <summary>
            Set this flag true to get the raw data from the db.
            </summary>
        </member>
        <member name="F:DataOptions.CacheFlag">
            <summary>
            Cache flag
            </summary>
        </member>
        <member name="F:DataOptions.PermissionsFlag">
            <summary>
            Perms flag
            </summary>
        </member>
        <member name="F:DataOptions.NoCache">
            <summary>
            Only use the database but permissions are active.
            </summary>
        </member>
        <member name="F:DataOptions.NoCacheIgnorePermissions">
            <summary>
            Ignore permissions and only use the database.
            </summary>
        </member>
        <member name="F:DataOptions.Default">
            <summary>
            Default with the permission system and cache active.
            </summary>
        </member>
        <member name="F:DataOptions.IgnorePermissions">
            <summary>
            Permissions will be disabled on this request for data. I hope you know what you're doing! 
            As a general piece of guidance, using this is fine if the data that you obtain is not returned directly to the end user.
            For example, the end user will likely be denied the ability to search users by email, but the login system needs to be able to do that.
            It's ok to ignore the permission engine given we're not just outright returning the user data unless the login is valid.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.GzipMappingFileProvider">
            <summary>
            The idea here is to be able to serve pre-gzipped js and css
            I use webpack to pre gzip js and css bundles for production
            If there is a request for a js or css file this will check if there exists the same file with .gz
            and if so that will be returned instead.
            
            To be even more usefull, added logic to try to auto create the .gz file if it does not exist
            
            Usage:
              app.UseStaticFiles(new StaticFileOptions()
              {
                   OnPrepareResponse = GzipMappingFileProvider.OnPrepareResponse,
                   FileProvider = new GzipMappingFileProvider(
                       loggerFactory,
                       true,
                       Environment.WebRootFileProvider
                      )
             });
            
            
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.GzipMappingFileProvider.#ctor(System.Boolean,Microsoft.Extensions.FileProviders.IFileProvider[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Configuration.GzipMappingFileProvider" /> class using a collection of file provider.
            </summary>
            <param name="autoGenerateMissingGzipFiles">bool indicating whether to try auto creating misssing .gz files </param>
            <param name="fileProviders">The collection of <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /></param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.GzipMappingFileProvider.GetFileInfo(System.String)">
            <summary>
            Locates a file at the given path.
            </summary>
            <param name="subpath">The path that identifies the file. </param>
            <returns>The file information. Caller must check Exists property. This will be the first existing <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo"/> returned by the provided <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/> or a not found <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo"/> if no existing files is found.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.GzipMappingFileProvider.GetDirectoryContents(System.String)">
            <summary>
            Enumerate a directory at the given path, if any.
            </summary>
            <param name="subpath">The path that identifies the directory</param>
            <returns>Contents of the directory. Caller must check Exists property.
            The content is a merge of the contents of the provided <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/>.
            When there is multiple <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo"/> with the same Name property, only the first one is included on the results.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.GzipMappingFileProvider.Watch(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.Extensions.Primitives.IChangeToken"/> for the specified <paramref name="pattern"/>.
            </summary>
            <param name="pattern">Filter string used to determine what files or folders to monitor. Example: **/*.cs, *.*, subFolder/**/*.cshtml.</param>
            <returns>An <see cref="T:Microsoft.Extensions.Primitives.IChangeToken"/> that is notified when a file matching <paramref name="pattern"/> is added, modified or deleted.
            The change token will be notified when one of the change token returned by the provided <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/> will be notified.</returns>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.GzipMappingFileProvider.FileProviders">
            <summary>
            Gets the list of configured <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> instances.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.Configuration.GzipMappingFileProvider.CacheControl">
            <summary>
            A lengthy default cache control value.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.GzipMappingFileProvider.OnPrepareResponse(Microsoft.AspNetCore.StaticFiles.StaticFileResponseContext)">
            <summary>
            Sets the content encoding and type. Use this in your OnPrepareResponse.
            </summary>
            <param name="context"></param>
        </member>
    </members>
</doc>
