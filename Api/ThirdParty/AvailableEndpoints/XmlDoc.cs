using System;
using System.Collections.Generic;


namespace Api.AvailableEndpoints
{
	/// <summary>
	/// Loads xmldoc documentation (from an xml file generated by the C# compiler).
	/// </summary>
	public class XmlDoc
	{
		/// <summary>
		/// All the types in the xml doc.
		/// </summary>
		public Dictionary<string, XmlDocType> Types = new Dictionary<string, XmlDocType>();

		/// <summary>
		/// Create a new xml doc.
		/// </summary>
		public XmlDoc() { }

		/// <summary>
		/// Loads this from xml in the given file.
		/// </summary>
		/// <param name="filePath"></param>
		public void LoadFrom(string filePath)
		{
			// Get the raw XML doc:
			var xmlDoc = System.IO.File.ReadAllText(filePath);

			// Deserialize the xml doc:
			var doc = new System.Xml.XmlDocument();
			doc.InnerXml = xmlDoc;
			var members = doc.GetElementsByTagName("member");

			if (members == null || members.Count == 0)
			{
				return;
			}

			foreach (var member in members)
			{
				AddMemberDoc(member as System.Xml.XmlElement);
			}
		}

		/// <summary>
		/// Adds a member to this with details from the given xml element.
		/// Creates the type if it's needed.
		/// </summary>
		/// <param name="ele"></param>
		public void AddMemberDoc(System.Xml.XmlElement ele)
		{
			if (ele == null)
			{
				return;
			}

			var nodeName = ele.GetAttribute("name");

			if (nodeName == null)
			{
				return;
			}

			var parts = nodeName.Split(':', 2);

			if (parts.Length != 2)
			{
				return;
			}

			var methodType = parts[0].ToLower();

			var member = new XmlDocMember();

			if (methodType == "f")
			{
				member.Type = XmlDocMemberType.Field;
			}
			else if (methodType == "p")
			{
				member.Type = XmlDocMemberType.Property;
			}
			else if (methodType == "m")
			{
				member.Type = XmlDocMemberType.Method;
			}
			else if (methodType == "t")
			{
				member.Type = XmlDocMemberType.Type;
			}
			else
			{
				return;
			}

			var summaries = ele.GetElementsByTagName("summary");
			string summary = null;

			if (summaries != null && summaries.Count > 0)
			{
				summary = summaries[0].InnerText;
			}

			if (member.Type == XmlDocMemberType.Type)
			{
				var type = GetType(parts[1], true);
				type.Summary = summary;
				return;
			}

			var methodTypeParts = parts[1].Split('(', 2);
			var memberSignature = methodTypeParts[0].Split('.');

			// The name is at the end:
			var memberName = memberSignature[memberSignature.Length - 1];
			member.Name = memberName;
			member.Summary = summary;

			var fullTypeName = "";

			for (var i = 0; i < memberSignature.Length - 1; i++)
			{
				if (i != 0)
				{
					fullTypeName += ".";
				}
				fullTypeName += memberSignature[i];
			}

			var containerType = GetType(fullTypeName, true);
			containerType.Members[memberName] = member;

			// If this member is a method then it will also have param elements as kids:
			var parameters = ele.GetElementsByTagName("param");

			foreach (var parameterDoc in parameters)
			{
				var paramDocEle = (parameterDoc as System.Xml.XmlElement);
				var paramName = paramDocEle.GetAttribute("name");

				var parameterMember = new XmlDocMember();
				parameterMember.Type = XmlDocMemberType.Parameter;
				parameterMember.Name = paramName;
				parameterMember.Summary = paramDocEle.InnerText;

				member.AddParameter(parameterMember);
			}
		}

		/// <summary>
		/// Get a type by its fully qualified name (incl. its namespace).
		/// </summary>
		/// <param name="typeName"></param>
		/// <param name="create"></param>
		/// <returns></returns>
		public XmlDocType GetType(string typeName, bool create)
		{
			if (!Types.TryGetValue(typeName, out XmlDocType result) && create)
			{
				result = new XmlDocType();
				Types[typeName] = result;
			}

			return result;
		}
	}

	/// <summary>
	/// The various types of member in an xml doc.
	/// </summary>
	public enum XmlDocMemberType
	{
		/// <summary>
		/// The member is a field.
		/// </summary>
		Field = 1,
		/// <summary>
		/// The member is a property.
		/// </summary>
		Property = 2,
		/// <summary>
		/// The member is a method.
		/// </summary>
		Method = 3,
		/// <summary>
		/// The member is a type.
		/// </summary>
		Type = 4,
		/// <summary>
		/// The member is a method parameter.
		/// </summary>
		Parameter = 5
	}

	/// <summary>
	/// A member in an type.
	/// </summary>
	public class XmlDocMember
	{
		/// <summary>
		/// The summary for this member.
		/// </summary>
		public string Summary;
		/// <summary>
		/// The name of this member.
		/// </summary>
		public string Name;
		/// <summary>
		/// The type of this member.
		/// </summary>
		public XmlDocMemberType Type;
		/// <summary>
		/// The members in this type.
		/// </summary>
		public Dictionary<string, XmlDocMember> Parameters;


		/// <summary>
		/// Gets info about a parameter (if this member is a method).
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public XmlDocMember GetParameter(string name)
		{
			if (Parameters == null)
			{
				return null;
			}

			Parameters.TryGetValue(name, out XmlDocMember parameter);
			return parameter;
		}

		/// <summary>
		/// Adds the given member as a parameter.
		/// </summary>
		/// <param name="parameter"></param>
		public void AddParameter(XmlDocMember parameter)
		{
			if (Parameters == null)
			{
				Parameters = new Dictionary<string, XmlDocMember>();
			}

			Parameters[parameter.Name] = parameter;
		}
	}

	/// <summary>
	/// A type in an xml doc.
	/// </summary>
	public class XmlDocType
	{
		/// <summary>
		/// The summary of this type.
		/// </summary>
		public string Summary;
		/// <summary>
		/// The members in this type.
		/// </summary>
		public Dictionary<string, XmlDocMember> Members = new Dictionary<string, XmlDocMember>();


		/// <summary>
		/// Gets a member. Null if it doesn't exist.
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public XmlDocMember GetMember(string name)
		{
			Members.TryGetValue(name, out XmlDocMember member);
			return member;
		}
	}

}
