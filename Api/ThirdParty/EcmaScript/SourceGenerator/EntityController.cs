using System;
using System.Reflection;
using Api.EcmaScript.TypeScript;
using Api.Startup;
using Microsoft.AspNetCore.Mvc;

namespace Api.EcmaScript
{
    public static partial class SourceGenerator
    {
        public static ClassDefinition OnEntityController(Type entityType, Type controller, Script script)
        {
            var ecmaService = Services.Get<EcmaService>();

            EnsureScript(script);

            var entityName = GetCleanTypeName(entityType);
            var includesName = entityName + "Includes";
            var apiName = entityName + "Api";

            var classDef = new ClassDefinition
            {
                Name = apiName,
                Extends = $"AutoController<{entityName}, uint, {includesName}>"
            };

            AddApiImports(script, entityName, includesName);

            var routeAttribute = controller.GetCustomAttribute<RouteAttribute>();
            var baseUrl = GetNormalizedRoute(routeAttribute?.Template ?? "");

            // Add constructor
            classDef.Children.Add(CreateConstructor(baseUrl, includesName));

            // Add additional controller methods
            AddControllerMethods(controller, classDef, baseUrl, script);

            return classDef;
        }

        private static void AddApiImports(Script script, string entityName, string includesName)
        {
            script.AddImport(new()
            {
                Symbols = ["AutoController"],
                From = "./ApiEndpoints"
            });

            script.AddImport(new()
            {
                Symbols = [includesName, "ApiIncludes"],
                From = "./Includes"
            });
        }

        private static string GetNormalizedRoute(string route)
        {
            if (string.IsNullOrEmpty(route))
            {
                return "";
            }

            return route.StartsWith("v1/") ? route[3..] : route;
        }

        private static ClassMethod CreateConstructor(string baseUrl, string includesName)
        {
            var ctor = new ClassMethod
            {
                Name = "constructor",
                Injected =
                [
                    $"super('{baseUrl}')",
                    $"this.includes = new {includesName}();"
                ]
            };

            ctor.AddTsDocLine("AutoGenerated, ensures all default CRUD functionality");
            return ctor;
        }
    }
}
