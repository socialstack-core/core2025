

using System;
using System.Reflection;
using Api.EcmaScript.TypeScript;
using Api.Startup;
using Microsoft.AspNetCore.Mvc;

namespace Api.EcmaScript
{
    public static partial class SourceGenerator
    {

        public static ClassDefinition OnEntityController(Type entityType, Type controller, Script script)
        {

            var ecmaService = Services.Get<EcmaService>();

            EnsureScript(script);

            var definition = new ClassDefinition() {
                Name = GetCleanTypeName(entityType) + "Api",
                Extends = "AutoApi<" + GetCleanTypeName(entityType) + ", " + GetCleanTypeName(entityType) + "Includes>"
            };

            script.AddImport(new() {
                Symbols = ["AutoApi"],
                From = "./ApiEndpoints"
            });

            script.AddImport(new() {
                Symbols = [GetCleanTypeName(entityType) + "Includes", "ApiIncludes"],
                From = "./Includes"
            });

            var routeAttribute = controller.GetCustomAttribute<RouteAttribute>();

            var baseUrl = routeAttribute.Template;

            if (baseUrl.StartsWith("v1/"))
            {
                baseUrl = baseUrl.Substring(3); // start from index 3 till end
            }

            // constructor
            var ctor = new ClassMethod() {
                Name = "constructor",
                Injected = [
                    "super('" + baseUrl + "')"
                ]
            };

            ctor.AddTsDocLine("AutoGenerated, ensures all default CRUD functionality");
            
            definition.Children.Add(ctor);

            AddControllerMethods(controller, definition, baseUrl, script);

            return definition;
        }

    } 
}