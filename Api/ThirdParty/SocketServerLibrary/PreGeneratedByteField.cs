using System;
using System.Reflection;
using System.Reflection.Emit;


namespace Api.SocketServerLibrary
{
	/// <summary>
	/// A field containing a pre-generated byte[].
	/// </summary>
	public class PreGeneratedByteField
	{
		// Writer.Write(byte[], int, int)
		private static MethodInfo _writeByteArray;

		/// <summary>
		/// The field.
		/// </summary>
		public FieldInfo Field;
		/// <summary>
		/// The value.
		/// </summary>
		public byte[] Value;

		/// <summary>
		/// Emits a write of this field into the ILGenerator.
		/// </summary>
		/// <param name="writerBody"></param>
		public void Write(ILGenerator writerBody)
		{

			// Get the Write(byte[], int, int) writer method. We'll use it to write, for example, the common JSON header for this type.
			if (_writeByteArray == null)
			{
				_writeByteArray = typeof(Writer).GetMethod("Write", new Type[] {
					typeof(byte[]),
					typeof(int),
					typeof(int)
				});
			}

			writerBody.Emit(OpCodes.Ldarg_2); // Writer
			if (Field.IsStatic)
			{
				writerBody.Emit(OpCodes.Ldsfld, Field); // field the byte[] is in
			}
			else
			{
				writerBody.Emit(OpCodes.Ldarg_0); // this.
				writerBody.Emit(OpCodes.Ldfld, Field); // field the byte[] is in
			}
			writerBody.Emit(OpCodes.Ldc_I4, 0); // offset
			writerBody.Emit(OpCodes.Ldc_I4, Value.Length); // length (the length of the byte[])
			writerBody.Emit(OpCodes.Call, _writeByteArray); // Call Write(byte[], int, int)
		}
	}
}