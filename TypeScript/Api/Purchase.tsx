/* * * * * * * | Auto Generated Script, do not edit | * * * * * * * */
// Imports
import {VersionedContent} from './Content'
import {AutoController} from './ApiEndpoints'
import {PurchaseIncludes, ApiIncludes} from './Includes'
// eslint-disable-next-line no-restricted-imports
import {getOne, getList, getJson, getText} from 'UI/Functions/WebRequest'

// Module
/*
  A purchase for a set of products which are attached as a set of ProductQuantities.
*/
export type Purchase = VersionedContent<uint> & {
    status: uint,
    couponId: uint,
    authorise: boolean,
    multiExecute: boolean,
    localeId: uint,
    paymentGatewayInternalId?: string,
    paymentGatewayId: uint,
    paymentMethodId: uint,
    currencyCode?: string,
    totalCost: ulong,
    contentAntiDuplication: ulong,
    contentType?: string,
    contentId: uint,
}

/*
*/
export type PurchaseStatus = {
    status?: uint,
    nextAction?: string,
}

/**
*/
export class PurchaseApi extends AutoController<Purchase, uint>{
    /**
      AutoGenerated, ensures all default CRUD functionality

    */
    public constructor (){
        super('purchase')
        this.includes = new PurchaseIncludes('', '');
    }

    /**
      POST /v1/purchase/submit
            Creates a purchase from a list of submitted items and a payment method.
            The items may also specify they are for a subscription by declaring isSubscribing: true instead of quantity.
            
            {
            	paymentMethod: uintId || {gatewayToken: '', gatewayId: uintId},
            	items: [
            		{product: uintId, quantity: ulong, isSubscribing: bool}
            	],
            	couponCode: x,
            	future - delivery address etc
            }

    */
    public submit = (purchaseOrder: Record<string, string | number | boolean>): Promise<PurchaseStatus>  => {
        return getJson<PurchaseStatus>(this.apiUrl + '/submit', purchaseOrder)
    }

}

export default new PurchaseApi();
