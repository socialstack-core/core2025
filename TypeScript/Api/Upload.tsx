/* * * * * * * | Auto Generated Script, do not edit | * * * * * * * */
// Imports
import {VersionedContent} from './Content'
import {AutoController} from './ApiEndpoints'
import {UploadIncludes, ApiIncludes} from './Includes'
import {ApiList, getOne, getList} from 'UI/Functions/WebRequest'

// Module
/*
  Meta for uploaded files.
*/
export type Upload = VersionedContent<uint> & {
    originalName?: string,
    fileType?: string,
    variants?: string,
    blurhash?: string,
    width?: int,
    height?: int,
    focalX?: int,
    focalY?: int,
    alt?: string,
    author?: string,
    usageCount?: int,
    isImage: boolean,
    isPrivate: boolean,
    isVideo: boolean,
    isAudio: boolean,
    transcodeState: int,
    subdirectory?: string,
    temporaryPath?: string,
    ref?: string,
}

/*
*/
export type MediaRef = {
    type?: string,
    id: uint,
    name?: string,
    description?: string,
    field?: string,
    url?: string,
    existingRef?: string,
    updatedRef?: string,
    status?: string,
    localeId: uint,
}

/**
*/
export class UploadApi extends AutoController<Upload, uint, UploadIncludes>{
    /**
      AutoGenerated, ensures all default CRUD functionality

    */
    public constructor (){
        super('upload')
        this.includes = new UploadIncludes('');
    }

    /**
      Upload a file with efficient support for huge ones.

    */
    public upload = (): Promise<Upload>  => {
        return getOne(this.apiUrl + '/create', {}, { method: 'PUT' })
    }

    /**
      List any active media items

    */
    public active = (): Promise<ApiList<Upload>>  => {
        return getList(this.apiUrl + '/active', {}, { method: 'GET' })
    }

    /**
      Replace any existing refs with new ones

    */
    public replace = (sourceRef: string, targetRef: string): Promise<ApiList<MediaRef>>  => {
        return getList(this.apiUrl + '/replace?sourceRef=' + sourceRef + '&targetRef=' + targetRef + '', {}, { method: 'GET' })
    }

    /**
      Upgrade refs such that any ref fields hold the latest version of a specified ref.

    */
    public updateRefs = (update: boolean): Promise<ApiList<MediaRef>>  => {
        return getList(this.apiUrl + '/update-refs?update=' + update + '', {}, { method: 'GET' })
    }

    /**
      Preview any media refs changes

    */
    public preview = (uploadRef: string): Promise<ApiList<MediaRef>>  => {
        return getList(this.apiUrl + '/replace/preview?uploadRef=' + uploadRef + '', {}, { method: 'GET' })
    }

}

export default new UploadApi();
