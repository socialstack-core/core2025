/* * * * * * * | Auto Generated Script, do not edit | * * * * * * * */
// Imports
import {VersionedContent} from './Content'
import {AutoController} from './ApiEndpoints'
import {UploadIncludes, ApiIncludes} from './Includes'
// eslint-disable-next-line no-restricted-imports
import {ApiList, getOne, getList, getJson, getText} from 'UI/Functions/WebRequest'

// Module
/*
  Meta for uploaded files.
*/
export type Upload = VersionedContent<uint> & {
    originalName?: string,
    fileType?: string,
    variants?: string,
    blurhash?: string,
    width?: int,
    height?: int,
    focalX?: int,
    focalY?: int,
    alt?: string,
    author?: string,
    usageCount?: int,
    isImage: boolean,
    isPrivate: boolean,
    isVideo: boolean,
    isAudio: boolean,
    transcodeState: int,
    subdirectory?: string,
    temporaryPath?: string,
    ref?: string,
}

/*
*/
export type MediaRef = {
    type?: string,
    id: uint,
    name?: string,
    description?: string,
    field?: string,
    url?: string,
    existingRef?: string,
    updatedRef?: string,
    status?: string,
    localeId: uint,
}

/**
*/
export class UploadApi extends AutoController<Upload, uint>{
    /**
      AutoGenerated, ensures all default CRUD functionality

    */
    public constructor (){
        super('upload')
        this.includes = new UploadIncludes('', '');
    }

    /**
      Upload a file with efficient support for huge ones.

    */
    public upload = (includes: ApiIncludes[] = []): Promise<Upload>  => {
        return getOne<Upload>(this.apiUrl + '/create'+ (includes.length != 0 ? '?includes=' + includes.map(include => include.toString()).join(', ') : ''))
    }

    /**
      Uploads a transcoded file. The body of the client request is expected to be a tar of the files, using a directory called "output" at its root.

    */
    public transcodedTar = (id: uint, token: string): Promise<string>  => {
        return getText(this.apiUrl + '/transcoded/' + id + '?token=' + token + '')
    }

    /**
      List any active media items

    */
    public active = (includes: ApiIncludes[] = []): Promise<ApiList<Upload>>  => {
        return getOne<Upload>(this.apiUrl + '/active'+ (includes.length != 0 ? '?includes=' + includes.map(include => include.toString()).join(', ') : ''))
    }

    /**
      List any active media refs

    */
    public activePost = (): Promise<string>  => {
        return getText(this.apiUrl + '/active')
    }

    /**
      Performs a file consistency check, where it will make sure each identified ref file matches the current upload policy.
            In the future this will also add any missing database entries.
      @param {context} - Api.AvailableEndpoints.XmlDocMember
      @param {regenBefore} - Api.AvailableEndpoints.XmlDocMember
      @param {idRange} - Api.AvailableEndpoints.XmlDocMember

    */
    public fileConsistency = (regenBefore: string, idRange: string): Promise<string>  => {
        return getText(this.apiUrl + '/file-consistency?regenBefore=' + regenBefore + '&idRange=' + idRange + '')
    }

    /**
      Replace any existing refs with new ones

    */
    public replace = (sourceRef: string, targetRef: string): Promise<MediaRef[]>  => {
        return getJson<MediaRef>(this.apiUrl + '/replace?sourceRef=' + sourceRef + '&targetRef=' + targetRef + '')
    }

    /**
      Update alt names based on image data

    */
    public updateAlts = (): Promise<string>  => {
        return getText(this.apiUrl + '/update-alts')
    }

    /**
      Upgrade refs such that any ref fields hold the latest version of a specified ref.

    */
    public updateRefs = (update: boolean): Promise<MediaRef[]>  => {
        return getJson<MediaRef>(this.apiUrl + '/update-refs?update=' + update + '')
    }

    /**
      Preview any media refs changes

    */
    public preview = (uploadRef: string): Promise<MediaRef[]>  => {
        return getJson<MediaRef>(this.apiUrl + '/replace/preview?uploadRef=' + uploadRef + '')
    }

}

export default new UploadApi();
