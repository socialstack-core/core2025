/* * * * * * * | Auto Generated Script, do not edit | * * * * * * * */
// Imports
import {AutoController} from './ApiEndpoints'
import {PasswordResetRequestIncludes, ApiIncludes} from './Includes'
// eslint-disable-next-line no-restricted-imports
import {getOne, getList, getJson, getText} from 'UI/Functions/WebRequest'

// Module
/*
*/
export type PasswordResetRequest = {
    token?: string,
    isUsed?: boolean,
    email?: string,
    createdUtc: Date,
    userId?: uint,
}

/*
*/
export type NewPassword = {
    password?: string,
}

/*
*/
export type ResetToken = {
    token?: string,
    url?: string,
}

/**
*/
export class PasswordResetRequestApi extends AutoController<PasswordResetRequest, uint>{
    /**
      AutoGenerated, ensures all default CRUD functionality

    */
    public constructor (){
        super('passwordresetrequest')
        this.includes = new PasswordResetRequestIncludes('', '');
    }

    /**
      Check if token exists and has not expired yet.

    */
    public checkTokenExists = (token: string): Promise<any>  => {
        return getText(this.apiUrl + '/token/' + token + '')
    }

    /**
      Attempts to login with a submitted new password.

    */
    public loginWithToken = (setSession: (s: SessionResponse) => Session, token: string, newPassword: NewPassword): Promise<SessionResponse>  => {
        return getText(this.apiUrl + '/login/' + token + '', newPassword)
        .then((s: SessionResponse) => {
        	setSession(s);
        	return s;
        })
    }

    /**
      Admin link generation.

    */
    public generate = (id: uint): Promise<ResetToken>  => {
        return getText(this.apiUrl + '/' + id + '/generate')
    }

}

export default new PasswordResetRequestApi();
