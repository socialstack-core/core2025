/* * * * * * * | Auto Generated Script, do not edit | * * * * * * * */
// Imports
import {UserCreatedContent} from './Content'
import {AutoController} from './ApiEndpoints'
import {SearchEntityIncludes, ApiIncludes} from './Includes'
// eslint-disable-next-line no-restricted-imports
import {getOne, getList, getJson, getText} from 'UI/Functions/WebRequest'

// Module
/*
  A SearchEntity
*/
export type SearchEntity = UserCreatedContent<uint> & {
    contentType?: string,
    contentId: ulong,
    action?: string,
}

/*
*/
export type DocumentsResult = {
    pageIndex: long,
    pageSize: long,
    totalResults: long,
    results?: Document[],
    aggregations?: Aggregation[],
}

/**
*/
export class SearchEntityApi extends AutoController<SearchEntity, uint>{
    /**
      AutoGenerated, ensures all default CRUD functionality

    */
    public constructor (){
        super('entitysearch')
        this.includes = new SearchEntityIncludes('', '');
    }

    /**
      Exposes the site search

    */
    public query = (filters: Record<string, string | number | boolean>): Promise<DocumentsResult>  => {
        return getJson<DocumentsResult>(this.apiUrl + '/query', filters)
    }

    /**
      Reset the index

    */
    public reset = (): Promise<Boolean>  => {
        return getJson<boolean>(this.apiUrl + '/reset')
    }

    /**
      Reindex the content

    */
    public index = (): Promise<Boolean>  => {
        return getJson<boolean>(this.apiUrl + '/reindex')
    }

}

/*
*/
export type Document = {
    id?: string,
    author?: string,
    hash?: string,
    title?: string,
    content?: string,
    metaDataText?: string,
    keywords?: string,
    headings?: string[],
    url?: string,
    checkSum?: string,
    contentType?: string,
    image?: string,
    tags?: string[],
    taxonomy?: Record<string, string[]>,
    timeStamp: Date,
    editedUtc?: Date,
    highlights?: string,
    score?: double,
    primaryObject?: Record<string, string | number | boolean>,
    metaData?: Record<string, Record<string, string | number | boolean>[]>,
}

/*
*/
export type Aggregation = {
    name?: string,
    label?: string,
    buckets?: Bucket[],
}

export default new SearchEntityApi();
