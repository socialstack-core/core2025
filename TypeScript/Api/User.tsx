/* * * * * * * | Auto Generated Script, do not edit | * * * * * * * */
// Imports
import {VersionedContent} from './Content'
import {AutoController} from './ApiEndpoints'
import {UserIncludes, ApiIncludes} from './Includes'
import {getJson} from 'UI/Functions/WebRequest'

// Module
/*
  A particular user account.
*/
export type User = VersionedContent<uint> & {
    email?: string,
    emailOptOutFlags: uint,
    emailVerifyToken?: string,
    passwordHash?: string,
    loginAttempts: int,
    failedLoginTimeUtc?: Date,
    firstName?: string,
    lastName?: string,
    fullName?: string,
    loginRevokeCount: uint,
    role: uint,
    privateVerify: long,
    featureRef?: string,
    avatarRef?: string,
    username?: string,
    localeId?: uint,
    passwordReset?: string,
    joinedUtc: Date,
}

/*
*/
export type UserPasswordForgot = {
    email?: string,
}

/*
*/
export type OptionalPassword = {
    password?: string,
}

/*
*/
export type UserLogin = {
    emailOrUsername?: string,
    password?: string,
}

/**
*/
export class UserApi extends AutoController<User, uint, UserIncludes>{
    /**
      AutoGenerated, ensures all default CRUD functionality

    */
    public constructor (){
        super('user')
        this.includes = new UserIncludes();
    }

    /**
      POST /v1/user/sendverifyemail/
            Sends the user a new token to verify their email.

    */
    public resendVerificationEmail = (body: UserPasswordForgot): Promise<SessionResponse>  => {
        return getJson(this.apiUrl + '/sendverifyemail', body )
    }

    /**
      POST /v1/user/verify/{userid}/{token}
            Attempts to verify the users email. If a password is supplied, the users password is also set.

    */
    public verifyUser = (userid: uint, token: string, newPassword: OptionalPassword): Promise<SessionResponse>  => {
        return getJson(this.apiUrl + '/verify/' + userid + '/' + token + '', newPassword )
    }

    /**
      Gets the current context.

    */
    public self = (): Promise<SessionResponse>  => {
        return getJson(this.apiUrl + '/self')
    }

    /**
      Logs out this user account.

    */
    public logout = (): Promise<SessionResponse>  => {
        return getJson(this.apiUrl + '/logout')
    }

    /**
      POST /v1/user/login/
            Attempts to login. Returns either a Context or a LoginResult.

    */
    public login = (body: UserLogin): Promise<SessionResponse>  => {
        return getJson(this.apiUrl + '/login', body )
    }

    /**
      Impersonate a user by their ID. This is a hard cookie switch. You will loose all admin functionality to make the impersonation as accurate as possible.

    */
    public impersonate = (id: uint): Promise<SessionResponse>  => {
        return getJson(this.apiUrl + '/' + id + '/impersonate')
    }

    /**
      Reverses an impersonation.

    */
    public unpersonate = (): Promise<SessionResponse>  => {
        return getJson(this.apiUrl + '/unpersonate')
    }

}

export default new UserApi();
