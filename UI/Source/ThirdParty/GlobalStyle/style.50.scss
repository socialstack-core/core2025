:root {
	// ensure we have a default scroll position
	--page-scroll-y: 0px;
}

html, body, #react-view, #react-root, #content-root, #content-page, #react-loading {
	height: 100%;
	width: 100%;
	margin: 0;
	touch-action: manipulation;
}

#react-root {
    height: auto;
    min-height: 100%;

	> #wrapper {
		min-height: 100vh;

		// ensure header remains fixed when scrolling
		> header {
			position: sticky;
			top: 0;
			background: var(--site-bg, #fff);
			z-index: 1000;
			box-shadow: 0 .5rem 1rem 0 rgba(33, 8, 24, 0.25);
		}

		// check - if we have:
		// <div id="react-root">
		//   <div id="wrapper">
		//     <div id="content">
		//     </div>
		//     <footer>
		//     </footer>
		//   </div>
		// </div>
		// 
		// ... then use flexbox to ensure content is always at least tall enough to place the footer at the bottom of the view
		// (prevents short page content causing footer to render halfway up the page)
		&:has(#content + footer) {
			display: flex;
			flex-direction: column;

			> *:not(#content) {
				flex-shrink: 0;
			}

			> #content {
				flex-grow: 1;
			}
		}

		// check: header followed by content?
		// ensure there's spacing between the two
		// NB: homepage may need to override this if a hero area needs to be flush with the bottom of the header
		&:has(header + #content) {

			> #content {
				margin-top: px_to_rem(30);
			}
		}

	}

}

html {
	overflow-x: hidden;

	body, #react-view, #react-root, #content-root, #content-page, #react-loading {
		font-family: var(--font);
	}

	body {
		background-color: $site_bg;
	}

	// Identify a frontend (mobile app build too):
	&.ui {
	}
	// Identify a mobile app build:
	&.mobile {
	}
	// Identify a frontend but not the app build:
	&.web {
	}
	// Identify the admin panel:
	&.admin {

		&:not(.fullscreen-preview) {

			// prevent admin sidbar breaking layout when viewing an admin page in admin
			.canvas-editor {

				.pages-default > div > .admin-aside .main-menu {
					position: static;
					width: 100%;
					max-height: 20rem;
				}

			}
		}
	}
	// define rules which shouldn't be applied for admin views
	&:not(.admin),
	&.admin .panelled-editor__preview {
	}
}

.loader {
	position: absolute;
	display: inline-block;
	//border: 6px solid lightgrey;
	border: 4px solid #eeeeee;
	border-radius: 50%;
	//border-top: 6px solid white;
	border-top: 4px solid white;
	//width: 40px;
	//height: 40px;
	width: 60px;
	height: 60px;
	margin-left: -30px;
	margin-top: -30px;
	-webkit-animation: spin 2s linear infinite;
	animation: spin 2s linear infinite;
}

#react-loading {
	position: absolute;
	top: 0;
	//background: white !important;
}

#react-loading-message {
	color: white;
	text-align: center;
	font-size: 2em;
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translateX(-50%) translateY(-50%);
}
